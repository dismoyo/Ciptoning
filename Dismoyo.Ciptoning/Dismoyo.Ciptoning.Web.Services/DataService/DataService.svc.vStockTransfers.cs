// ===================================================================================
// Author        : System
// Created date  : 18 Mar 2016 00:00:00
// Description   : DataService partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Ciptoning.Data;
using System;
using System.Data;
using System.Data.Services;
using System.Data.Services.Providers;
using System.Linq;
using System.Linq.Expressions;
using System.ServiceModel.Web;

namespace Dismoyo.Ciptoning.Web.Services
{

    public partial class DataService : EntityFrameworkDataService<StoreFunctionsDataContext>, IServiceProvider
    {

        #region Methods

        [QueryInterceptor("vStockTransfers")]
        public Expression<Func<vStockTransfer, bool>> OnQueryvStockTransfers()
        {
            return (p => true);
        }

        [ChangeInterceptor("vStockTransfers")]
        public void OnChangevStockTransfers(vStockTransfer data, UpdateOperations operations)
        {
            var dataProvider = DataConfiguration.GetDefaultDataProvider<IvStockTransferDataProvider>();

            switch (operations)
            {
                case UpdateOperations.Add:
                    using (var transaction = DefaultDataContext.DataContext.Database.BeginTransaction())
                    {
                        try
                        {
                            var directPost = false;
                            int prevDocumentStatusID = data.DocumentStatusID;

                            while (!directPost)
                            {
                                var serverData = (data.DocumentID.Equals(Guid.Empty)) ? null :
                                    dataProvider.GetData(data.DocumentID);

                                directPost = true;
                                if ((serverData == null) && string.IsNullOrEmpty(data.DocumentCode))
                                {
                                    dataProvider.InsertData(data, true);

                                    if (data.DocumentStatusID == 2)
                                        directPost = false;
                                }
                                else
                                {
                                    prevDocumentStatusID = serverData.DocumentStatusID;
                                    data.DODocumentID = serverData.DODocumentID;

                                    dataProvider.UpdateData(data, true);
                                }
                            }

                            DefaultDataContext.DataContext.SaveChanges();
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            if (transaction.UnderlyingTransaction.Connection != null)
                                transaction.Rollback();

                            throw ex;
                        }
                    }

                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Change:
                    using (var transaction = DefaultDataContext.DataContext.Database.BeginTransaction())
                    {
                        try
                        {
                            dataProvider.UpdateData(data, true);
                            DefaultDataContext.DataContext.SaveChanges();
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            throw ex;
                        }
                    }

                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Delete:
                    dataProvider.DeleteData(data);
                    operations = UpdateOperations.None;
                    break;
            }

            if (operations == UpdateOperations.None)
                CancelChanges();
        }

        #endregion

        #region Custom Methods

        [WebGet]
        public IQueryable<vStockTransfer> fStockTransfers()
        {
            return CurrentDataSource.fStockTransfer(
                (Guid?)GetQueryFilterParameterValue("DocumentID"),
                (string)GetQueryFilterParameterValue("DocumentCode"),
                (DateTime?)GetQueryFilterParameterValue("TransactionDateFrom"),
                (DateTime?)GetQueryFilterParameterValue("TransactionDateTo"),
                (Guid?)GetQueryFilterParameterValue("SourceWarehouseID"),
                (string)GetQueryFilterParameterValue("SourceWarehouseCode"),
                (string)GetQueryFilterParameterValue("SourceWarehouseName"),
                (Guid?)GetQueryFilterParameterValue("SourceSiteID"),
                (string)GetQueryFilterParameterValue("SourceSiteCode"),
                (string)GetQueryFilterParameterValue("SourceSiteName"),
                (int?)GetQueryFilterParameterValue("SourceCompanyID"),
                (string)GetQueryFilterParameterValue("SourceCompanyCode"),
                (string)GetQueryFilterParameterValue("SourceCompanyName"),
                (int?)GetQueryFilterParameterValue("SourceAreaID"),
                (string)GetQueryFilterParameterValue("SourceAreaCode"),
                (string)GetQueryFilterParameterValue("SourceAreaName"),
                (int?)GetQueryFilterParameterValue("SourceRegionID"),
                (string)GetQueryFilterParameterValue("SourceRegionCode"),
                (string)GetQueryFilterParameterValue("SourceRegionName"),
                (int?)GetQueryFilterParameterValue("SourceTerritoryID"),
                (string)GetQueryFilterParameterValue("SourceTerritoryCode"),
                (string)GetQueryFilterParameterValue("SourceTerritoryName"),
                (int?)GetQueryFilterParameterValue("SourceSiteDistributionTypeID"),
                (bool?)GetQueryFilterParameterValue("IsSourceSiteLotNumberEntryRequired"),
                (int?)GetQueryFilterParameterValue("SourceWarehouseTypeID"),
                (string)GetQueryFilterParameterValue("SourcePIC"),
                (Guid?)GetQueryFilterParameterValue("DestinationWarehouseID"),
                (string)GetQueryFilterParameterValue("DestinationWarehouseCode"),
                (string)GetQueryFilterParameterValue("DestinationWarehouseName"),
                (Guid?)GetQueryFilterParameterValue("DestinationSiteID"),
                (string)GetQueryFilterParameterValue("DestinationSiteCode"),
                (string)GetQueryFilterParameterValue("DestinationSiteName"),
                (int?)GetQueryFilterParameterValue("DestinationCompanyID"),
                (string)GetQueryFilterParameterValue("DestinationCompanyCode"),
                (string)GetQueryFilterParameterValue("DestinationCompanyName"),
                (int?)GetQueryFilterParameterValue("DestinationAreaID"),
                (string)GetQueryFilterParameterValue("DestinationAreaCode"),
                (string)GetQueryFilterParameterValue("DestinationAreaName"),
                (int?)GetQueryFilterParameterValue("DestinationRegionID"),
                (string)GetQueryFilterParameterValue("DestinationRegionCode"),
                (string)GetQueryFilterParameterValue("DestinationRegionName"),
                (int?)GetQueryFilterParameterValue("DestinationTerritoryID"),
                (string)GetQueryFilterParameterValue("DestinationTerritoryCode"),
                (string)GetQueryFilterParameterValue("DestinationTerritoryName"),
                (int?)GetQueryFilterParameterValue("DestinationSiteDistributionTypeID"),
                (int?)GetQueryFilterParameterValue("DestinationWarehouseTypeID"),
                (bool?)GetQueryFilterParameterValue("IsDestinationSiteLotNumberEntryRequired"),
                (string)GetQueryFilterParameterValue("DestinationPIC"),
                (string)GetQueryFilterParameterValue("ReferenceNumber"),
                (Guid?)GetQueryFilterParameterValue("DODocumentID"),
                (string)GetQueryFilterParameterValue("DODocumentCode"),
                (DateTime?)GetQueryFilterParameterValue("DOShipmentDateFrom"),
                (DateTime?)GetQueryFilterParameterValue("DOShipmentDateTo"),
                (DateTime?)GetQueryFilterParameterValue("DOReceivedDateFrom"),
                (DateTime?)GetQueryFilterParameterValue("DOReceivedDateTo"),
                (DateTime?)GetQueryFilterParameterValue("DOLastPrintedDateFrom"),
                (DateTime?)GetQueryFilterParameterValue("DOLastPrintedDateTo"),
                (int?)GetQueryFilterParameterValue("DocumentStatusID"),
                (DateTime?)GetQueryFilterParameterValue("PostedDateFrom"),
                (DateTime?)GetQueryFilterParameterValue("PostedDateTo"));
        }

        #endregion

    }

}
