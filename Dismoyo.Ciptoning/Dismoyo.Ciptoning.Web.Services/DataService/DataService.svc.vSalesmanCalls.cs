// ===================================================================================
// Author        : System
// Created date  : 19 Oct 2016 20:29:51
// Description   : DataService partial class.
//
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Ciptoning.Data;
using System;
using System.Data.Services;
using System.Data.Services.Providers;
using System.Linq.Expressions;

namespace Dismoyo.Ciptoning.Web.Services
{

    public partial class DataService : EntityFrameworkDataService<StoreFunctionsDataContext>, IServiceProvider
    {

        #region Methods

        [QueryInterceptor("vSalesmanCalls")]
        public Expression<Func<vSalesmanCall, bool>> OnQueryvSalesmanCalls()
        {
            return (p => true);
        }

        [ChangeInterceptor("vSalesmanCalls")]
        public void OnChangevSalesmanCalls(vSalesmanCall data, UpdateOperations operations)
        {
            var dataProvider = DataConfiguration.GetDefaultDataProvider<IvSalesmanCallDataProvider>();

            switch (operations)
            {
                case UpdateOperations.Add:
                    using (var transaction = DefaultDataContext.DataContext.Database.BeginTransaction())
                    {
                        try
                        {
                            var serverData = (data.ID.Equals(Guid.Empty)) ? null :
                                dataProvider.GetData(data.ID);

                            if (serverData == null)
                                dataProvider.InsertData(data, true);
                            else
                                dataProvider.UpdateData(data, true);

                            DefaultDataContext.DataContext.SaveChanges();
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            if (transaction.UnderlyingTransaction.Connection != null)
                                transaction.Rollback();

                            throw ex;
                        }
                    }

                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Change:
                    using (var transaction = DefaultDataContext.DataContext.Database.BeginTransaction())
                    {
                        try
                        {
                            dataProvider.UpdateData(data, true);
                            DefaultDataContext.DataContext.SaveChanges();
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            throw ex;
                        }
                    }

                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Delete:
                    dataProvider.DeleteData(data);
                    operations = UpdateOperations.None;
                    break;
            }

            if (operations == UpdateOperations.None)
                CancelChanges();
        }

        #endregion

    }

}
