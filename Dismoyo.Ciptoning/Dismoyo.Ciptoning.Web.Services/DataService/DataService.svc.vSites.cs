// ===================================================================================
// Author        : System
// Created date  : 18 Mar 2016 00:00:00
// Description   : DataService partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Ciptoning.Data;
using System;
using System.Data;
using System.Data.Services;
using System.Data.Services.Providers;
using System.Linq;
using System.Linq.Expressions;
using System.ServiceModel.Web;

namespace Dismoyo.Ciptoning.Web.Services
{

    public partial class DataService : EntityFrameworkDataService<StoreFunctionsDataContext>, IServiceProvider
    {

        #region Methods

        [QueryInterceptor("vSites")]
        public Expression<Func<vSite, bool>> OnQueryvSites()
        {
            return (p => !p.IsDeleted);
        }

        [ChangeInterceptor("vSites")]
        public void OnChangevSites(vSite data, UpdateOperations operations)
        {
            var dataProvider = DataConfiguration.GetDefaultDataProvider<IvSiteDataProvider>();

            switch (operations)
            {
                case UpdateOperations.Add:
                    using (var transaction = DefaultDataContext.DataContext.Database.BeginTransaction())
                    {
                        try
                        {
                            if (data.ID.Equals(Guid.Empty))
                                dataProvider.InsertData(data, true);
                            else
                                dataProvider.UpdateData(data, true);

                            DefaultDataContext.DataContext.SaveChanges();
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            throw ex;
                        }
                    }

                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Change:
                    using (var transaction = DefaultDataContext.DataContext.Database.BeginTransaction())
                    {
                        try
                        {
                            dataProvider.UpdateData(data, true);
                            DefaultDataContext.DataContext.SaveChanges();
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            throw ex;
                        }
                    }

                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Delete:
                    dataProvider.DeleteData(data);
                    operations = UpdateOperations.None;
                    break;
            }

            if (operations == UpdateOperations.None)
                CancelChanges();
        }

        #endregion

        #region Custom Methods
        
        [WebGet]
        public IQueryable<vSite> fSites()
        {
            return CurrentDataSource.fSite(
                (Guid?)GetQueryFilterParameterValue("ID"),
                (string)GetQueryFilterParameterValue("Code"),
                (string)GetQueryFilterParameterValue("Name"),
                (int?)GetQueryFilterParameterValue("AreaID"),
                (string)GetQueryFilterParameterValue("AreaCode"),
                (string)GetQueryFilterParameterValue("AreaName"),
                (int?)GetQueryFilterParameterValue("RegionID"),
                (string)GetQueryFilterParameterValue("RegionCode"),
                (string)GetQueryFilterParameterValue("RegionName"),
                (int?)GetQueryFilterParameterValue("TerritoryID"),
                (string)GetQueryFilterParameterValue("TerritoryCode"),
                (string)GetQueryFilterParameterValue("TerritoryName"),
                (int?)GetQueryFilterParameterValue("CompanyID"),
                (string)GetQueryFilterParameterValue("CompanyCode"),
                (string)GetQueryFilterParameterValue("CompanyName"),
                (int?)GetQueryFilterParameterValue("DistributionTypeID"),
                (bool?)GetQueryFilterParameterValue("IsLotNumberEntryRequired"),
                (string)GetQueryFilterParameterValue("Address"),
                (string)GetQueryFilterParameterValue("City"),
                (string)GetQueryFilterParameterValue("StateProvince"),
                (int?)GetQueryFilterParameterValue("CountryID"),
                (string)GetQueryFilterParameterValue("CountryName"),
                (string)GetQueryFilterParameterValue("ZipCode"),
                (string)GetQueryFilterParameterValue("Phone1"),
                (string)GetQueryFilterParameterValue("Phone2"),
                (string)GetQueryFilterParameterValue("Fax"),
                (string)GetQueryFilterParameterValue("Email"),
                (string)GetQueryFilterParameterValue("TaxNumber"),
                (int?)GetQueryFilterParameterValue("StatusID"),
                (string)GetQueryFilterParameterValue("AdditionalInfo"),
                false);
        }

        #endregion

    }

}
