$(document).ready(function () {
    checkContainer();

    checkNotification();
});

function checkContainer() {
    if ($('#mainContent').is(':visible')) {
        $('.desktop-layout').tabs({
            activate: $.layout.callbacks.resizeTabLayout
        });

        $('.dx-viewport').layout({
            name: 'viewport',
            initPanes: false,
            resizeWithWindow: false,

            center: {
                paneSelector: '.desktop-layout',
                children: {
                    name: 'desktopLayout',
                    north: {
                        paneSelector: '#topPane',
                        resizable: false,
                        spacing_open: 0,
                        spacing_closed: 0
                    },
                    center: {
                        paneSelector: '#mainContent',
                        onresize: $.layout.callbacks.resizeTabLayout
                    },
                    west: {
                        paneSelector: '#leftPane',
                        initHidden: true,
                        initClosed: true,
                    },
                    south: {
                        paneSelector: '#bottomPane',
                        resizable: false,
                        spacing_open: 0,
                        spacing_closed: 0
                    }
                }
            }
        });
    } else
        setTimeout(checkContainer, 50);
}


var loadingPanel = function () { return DXUtility.getDXInstance(null, '#loadingPanel', 'dxLoadPanel'); }

var setLoadingPanelByVisibility = function (name, visible) {
    var panel = DXUtility.getDXInstance(null, name, 'dxLoadPanel');
    if (panel)
        panel.option('visible', visible);
};

var showLoadingPanel = function () {
    var panel = loadingPanel();
    if (panel)
        panel.option('visible', true);
};

var hideLoadingPanel = function () {
    var panel = loadingPanel();
    if (panel)
        panel.option('visible', false);
};

var desktopPane = function () { return $('.desktop-layout').layout(); };


//var mainMenuOptions = {
//    items: mainMenuItems,
//    dataStructure: 'plain',
//    parentIdExpr: 'categoryId',
//    keyExpr: 'ID',
//    displayExpr: 'name'
//}

var mainMenuItems = [{
    ID: '1',
    name: 'Home',
    iconSrc: 'Images/home_32px.png',
    uri: 'Home',
    viewScript: 'Views/Home/Home.js',
    view: 'Views/Home/Home.dxview'
}, {
    ID: '2',
    name: 'Settings',
    iconSrc: 'Images/settings_32px.png',
    isHeadOffice: true
}, {
    ID: '2_1',
    categoryId: '2',
    name: 'Users',
    iconSrc: 'Images/user_32px.png',
    uri: 'vUsers',
    viewScript: 'Views/vUser/vUsers.js',
    view: 'Views/vUser/vUsers.dxview',
    isHeadOffice: true,
    //permissionObjectID: 'Users.View'
}, {
    ID: '2_2',
    categoryId: '2',
    name: 'User Groups',
    iconSrc: 'Images/role_32px.png',
    uri: 'vRoles',
    viewScript: 'Views/vRole/vRoles.js',
    view: 'Views/vRole/vRoles.dxview',
    isHeadOffice: true
}, {
    ID: '2_3',
    categoryId: '2',
    name: 'Permissions',
    iconSrc: 'Images/permission_32px.png',
    uri: 'vPermissionObjects',
    viewScript: 'Views/vPermissionObject/vPermissionObjects.js',
    view: 'Views/vPermissionObject/vPermissionObjects.dxview',
    isHeadOffice: true
}, {
    ID: '2_5',
    categoryId: '2',
    name: 'System Parameters',
    iconSrc: 'Images/system_parameter_32px.png',
    uri: 'vSystemParameters',
    viewScript: 'Views/vSystemParameter/vSystemParameters.js',
    view: 'Views/vSystemParameter/vSystemParameters.dxview',
    isHeadOffice: true
}, {
    ID: '3',
    name: 'Master Data',
    iconSrc: 'Images/master_data_32px.png'
}, {
    ID: '3_1',
    categoryId: '3',
    name: 'Sales Organization',
    iconSrc: 'Images/sales_organization_32px.png',
    isHeadOffice: true
}, {
    ID: '3_1_1',
    categoryId: '3_1',
    name: 'Territories',
    iconSrc: 'Images/territory_32px.png',
    uri: 'vTerritories',
    viewScript: 'Views/vTerritory/vTerritories.js',
    view: 'Views/vTerritory/vTerritories.dxview',
    isHeadOffice: true,
    permissionObjectID: 'Territories.View'
}, {
    ID: '3_1_2',
    categoryId: '3_1',
    name: 'Regions',
    iconSrc: 'Images/region_32px.png',
    uri: 'vRegions',
    viewScript: 'Views/vRegion/vRegions.js',
    view: 'Views/vRegion/vRegions.dxview',
    isHeadOffice: true,
    permissionObjectID: 'Regions.View'
}, {
    ID: '3_1_3',
    categoryId: '3_1',
    name: 'Areas',
    iconSrc: 'Images/area_32px.png',
    uri: 'vAreas',
    viewScript: 'Views/vArea/vAreas.js',
    view: 'Views/vArea/vAreas.dxview',
    isHeadOffice: true,
    permissionObjectID: 'Areas.View'
}, {
    ID: '3_1_4',
    categoryId: '3_1',
    name: 'Companies',
    iconSrc: 'Images/company_32px.png',
    uri: 'vCompanies',
    viewScript: 'Views/vCompany/vCompanies.js',
    view: 'Views/vCompany/vCompanies.dxview',
    isHeadOffice: true,
    permissionObjectID: 'Companies.View'
}, {
    ID: '3_1_5',
    categoryId: '3_1',
    name: 'Sites',
    iconSrc: 'Images/site_32px.png',
    uri: 'vSites',
    viewScript: 'Views/vSite/vSites.js',
    view: 'Views/vSite/vSites.dxview',
    isHeadOffice: true,
    permissionObjectID: 'Sites.View'
}, {
    ID: '3_2',
    categoryId: '3',
    name: 'Inventories',
    iconSrc: 'Images/inventory_32px.png'
}, {
    ID: '3_2_1',
    categoryId: '3_2',
    name: 'Product Brands',
    iconSrc: 'Images/product_brand_32px.png',
    uri: 'vProductBrands',
    viewScript: 'Views/vProductBrand/vProductBrands.js',
    view: 'Views/vProductBrand/vProductBrands.dxview',
    isHeadOffice: true,
    //permissionObjectID: 'ProductBrands.View'
}, {
    ID: '3_2_2',
    categoryId: '3_2',
    name: 'Products',
    iconSrc: 'Images/product_32px.png',
    uri: 'vProducts',
    viewScript: 'Views/vProduct/vProducts.js',
    view: 'Views/vProduct/vProducts.dxview',
    isHeadOffice: true,
    //permissionObjectID: 'Products.View'
}, {
    ID: '3_2_3',
    categoryId: '3_2',
    name: 'Product Prices',
    iconSrc: 'Images/product_price_32px.png',
    uri: 'vProductPrices',
    viewScript: 'Views/vProductPrice/vProductPrices.js',
    view: 'Views/vProductPrice/vProductPrices.dxview',
    isHeadOffice: true,
    //permissionObjectID: 'ProductPrices.View'
}, {
    ID: '3_2_4',
    categoryId: '3_2',
    name: 'Warehouses',
    iconSrc: 'Images/warehouse_32px.png',
    uri: 'vWarehouses',
    viewScript: 'Views/vWarehouse/vWarehouses.js',
    view: 'Views/vWarehouse/vWarehouses.dxview',
    //permissionObjectID: 'Warehouses.View'
}, {
    ID: '3_3',
    categoryId: '3',
    name: 'Sales Orders',
    iconSrc: 'Images/sales_32px.png'
}, {
    ID: '3_3_1',
    categoryId: '3_3',
    name: 'Customer Categories',
    iconSrc: 'Images/sales_organization_32px.png',
    uri: 'vCustomerCategories',
    viewScript: 'Views/vCustomerCategory/vCustomerCategories.js',
    view: 'Views/vCustomerCategory/vCustomerCategories.dxview',
    isHeadOffice: true,
    //permissionObjectID: 'CustomerCategories.View'
},
    {
        ID: '3_3_2',
        categoryId: '3_3',
        name: 'Salesman',
        iconSrc: 'Images/salesman_32px.png',
        uri: 'vSalesmen',
        viewScript: 'Views/vSalesman/vSalesmen.js',
        view: 'Views/vSalesman/vSalesmen.dxview',
        //permissionObjectID: 'Salesmen.View'
    }, {
        ID: '3_3_3',
        categoryId: '3_3',
        name: 'Customers',
        iconSrc: 'Images/customer_32px.png',
        uri: 'vCustomers',
        viewScript: 'Views/vCustomer/vCustomers.js',
        view: 'Views/vCustomer/vCustomers.dxview',
        //permissionObjectID: 'Customers.View'
    },
    {
        ID: '3_3_4',
        categoryId: '3_3',
        name: 'Salesman Target',
        iconSrc: 'Images/salesman_target_32px.png',
        uri: 'vSalesmanTargets',
        viewScript: 'Views/vSalesmanTarget/vSalesmanTargets.js',
        view: 'Views/vSalesmanTarget/vSalesmanTargets.dxview',
        //permissionObjectID: 'SalesmanTargets.View'
    },
    {
        ID: '3_3_6',
        categoryId: '3_3',
        name: 'Closing Period ',
        iconSrc: 'Images/close_period_32px.png',
        uri: 'vClosingPeriods',
        viewScript: 'Views/vClosingPeriod/vClosingPeriods.js',
        view: 'Views/vClosingPeriod/vClosingPeriods.dxview',
        isHeadOffice: true,
        //permissionObjectID: 'ClosingPeriods.View'
    }, {
        ID: '3_4',
        categoryId: '3',
        name: 'Discount & Promo',
        iconSrc: 'Images/discount_promo_32px.png',
        isHeadOffice: true
    }, {
        ID: '3_4_1',
        categoryId: '3_4',
        name: 'Discount Strata',
        iconSrc: 'Images/discount_strata_32px.png',
        uri: 'vDiscountStratas',
        viewScript: 'Views/vDiscountStrata/vDiscountStratas.js',
        view: 'Views/vDiscountStrata/vDiscountStratas.dxview',
        isHeadOffice: true,
        //permissionObjectID: 'DiscountStratas.View'
    }, {
        ID: '3_4_2',
        categoryId: '3_4',
        name: 'Discount Groups',
        iconSrc: 'Images/discount_group_32px.png',
        uri: 'vDiscountGroups',
        viewScript: 'Views/vDiscountGroup/vDiscountGroups.js',
        view: 'Views/vDiscountGroup/vDiscountGroups.dxview',
        isHeadOffice: true,
        //permissionObjectID: 'DiscountGroups.View'
    }, {
        ID: '3_5',
        categoryId: '3',
        name: 'Routes',
        iconSrc: 'Images/route_32px.png'
    }, {
        ID: '3_5_2',
        categoryId: '3_5',
        name: 'Route Plans',
        iconSrc: 'Images/route_plan_32px.png',
        uri: 'vRoutePlans',
        viewScript: 'Views/vRoutePlan/vRoutePlans.js',
        view: 'Views/vRoutePlan/vRoutePlans.dxview'
    }, {
        ID: '4',
        name: 'Inventory Transaction',
        iconSrc: 'Images/inventory_32px.png'
    }, {
        ID: '4_1',
        categoryId: '4',
        name: 'Stock Views',
        iconSrc: 'Images/stock_view_32px.png',
        uri: 'vStockViews',
        viewScript: 'Views/vStockView/vStockViews.js',
        view: 'Views/vStockView/vStockViews.dxview'
    }, {
        ID: '4_2',
        categoryId: '4',
        name: 'Stock Receivals',
        iconSrc: 'Images/stock_receive_32px.png',
        uri: 'vStockReceives',
        viewScript: 'Views/vStockReceive/vStockReceives.js',
        view: 'Views/vStockReceive/vStockReceives.dxview'
    }, {
        ID: '4_3',
        categoryId: '4',
        name: 'Stock Opnames',
        iconSrc: 'Images/stock_opname_32px.png',
        uri: 'vStockOpnames',
        viewScript: 'Views/vStockOpname/vStockOpnames.js',
        view: 'Views/vStockOpname/vStockOpnames.dxview'
    }, {
        ID: '4_4',
        categoryId: '4',
        name: 'Stock Changes',
        onClick: "#vStockChanges",
        iconSrc: 'Images/stock_changes_32px.png',
        uri: 'vStockChanges',
        viewScript: 'Views/vStockChanges/vStockChanges.js',
        view: 'Views/vStockChanges/vStockChanges.dxview'
    }, {
        ID: '4_5',
        categoryId: '4',
        name: 'Stock Disposals',
        onClick: "#vStockDisposals",
        iconSrc: 'Images/stock_disposal_32px.png',
        uri: 'vStockDisposals',
        viewScript: 'Views/vStockDisposal/vStockDisposals.js',
        view: 'Views/vStockDisposal/vStockDisposals.dxview'
    }, {
        ID: '4_6',
        categoryId: '4',
        name: 'Stock Transfers',
        iconSrc: 'Images/stock_transfer_32px.png',
        uri: 'vStockTransfers',
        viewScript: 'Views/vStockTransfer/vStockTransfers.js',
        view: 'Views/vStockTransfer/vStockTransfers.dxview'
    }, {
        ID: '5',
        name: 'Sales Order Transaction',
        iconSrc: 'Images/sales_32px.png'
    }, {
        ID: '5_1',
        categoryId: '5',
        name: 'Sales Orders',
        iconSrc: 'Images/sales_order_32px.png',
        uri: 'vSalesOrders',
        viewScript: 'Views/vSalesOrder/vSalesOrders.js',
        view: 'Views/vSalesOrder/vSalesOrders.dxview'
    }, {
        ID: '5_2',
        categoryId: '5',
        name: 'Sales Order Returns',
        iconSrc: 'Images/sales_order_return_32px.png',
        uri: 'vSalesOrderReturns',
        viewScript: 'Views/vSalesOrderReturn/vSalesOrderReturns.js',
        view: 'Views/vSalesOrderReturn/vSalesOrderReturns.dxview'
    }, {
        ID: '5_3',
        categoryId: '5',
        name: 'Sales Order Swaps',
        iconSrc: 'Images/sales_order_swap_32px.png',
        uri: 'vSalesOrderSwaps',
        viewScript: 'Views/vSalesOrderSwap/vSalesOrderSwaps.js',
        view: 'Views/vSalesOrderSwap/vSalesOrderSwaps.dxview'
    }, {
        ID: '5_4',
        categoryId: '5',
        name: 'Sales Order FOC',
        iconSrc: 'Images/sales_order_foc_32px.png',
        uri: 'vSalesOrderFOCs',
        viewScript: 'Views/vSalesOrderFOC/vSalesOrderFOCs.js',
        view: 'Views/vSalesOrderFOC/vSalesOrderFOCs.dxview'
    }, {
        ID: '5_5',
        categoryId: '5',
        name: 'Sales Order Samples',
        iconSrc: 'Images/sales_order_sample_32px.png',
        uri: 'vSalesOrderSamples',
        viewScript: 'Views/vSalesOrderSample/vSalesOrderSamples.js',
        view: 'Views/vSalesOrderSample/vSalesOrderSamples.dxview'
    }, {
        ID: '6',
        name: 'Reports',
        iconSrc: 'Images/reports_32px.png'
    }, {
        ID: '6_1', categoryId: '6',
        name: 'Daily Sales Reports',
        iconSrc: 'Images/daily_sales_report_32px.png',
        uri: 'vDailySalesReports',
        viewScript: 'Views/vDailySalesReport/vDailySalesReports.js',
        view: 'Views/vDailySalesReport/vDailySalesReports.dxview'
    }, {
        ID: '6_2', categoryId: '6',
        name: 'Sales by Channel Reports',
        iconSrc: 'Images/sales_by_channel_report_32px.png',
        uri: 'vSalesByChannelReports',
        viewScript: 'Views/vSalesByChannelReport/vSalesByChannelReports.js',
        view: 'Views/vSalesByChannelReport/vSalesByChannelReports.dxview'
    }, {
        ID: '6_3', categoryId: '6',
        name: 'Sales by Site Reports',
        iconSrc: 'Images/sales_by_site_report_32px.png',
        uri: 'vSalesBySiteReports',
        viewScript: 'Views/vSalesBySiteReport/vSalesBySiteReports.js',
        view: 'Views/vSalesBySiteReport/vSalesBySiteReports.dxview'
    }, {
        ID: '6_4', categoryId: '6',
        name: 'Daily Salesman Reports',
        iconSrc: 'Images/daily_salesman_report_32px.png',
        uri: 'vDailySalesmanReports',
        viewScript: 'Views/vDailySalesmanReport/vDailySalesmanReports.js',
        view: 'Views/vDailySalesmanReport/vDailySalesmanReports.dxview'
    }, {
        ID: '6_5', categoryId: '6',
        name: 'Sales by Order Reports',
        iconSrc: 'Images/sales_by_order_report_32px.png',
        uri: 'vSalesByOrderReports',
        viewScript: 'Views/vSalesByOrderReport/vSalesByOrderReports.js',
        view: 'Views/vSalesByOrderReport/vSalesByOrderReports.dxview'
    }, {
        ID: '6_6', categoryId: '6',
        name: 'Customer Master Reports',
        iconSrc: 'Images/customer_master_report_32px.png',
        uri: 'vCustomerMasterReports',
        viewScript: 'Views/vCustomerMasterReport/vCustomerMasterReports.js',
        view: 'Views/vCustomerMasterReport/vCustomerMasterReports.dxview'
    }, {
        ID: '6_7', categoryId: '6',
        name: 'Salesman Activity Reports',
        iconSrc: 'Images/stock_view_32px.png',
        uri: 'vSalesmanActivityReports',
        viewScript: 'Views/vSalesmanActivityReport/vSalesmanActivityReports.js',
        view: 'Views/vSalesmanActivityReport/vSalesmanActivityReports.dxview'
    }
];

var headerMenu = function () { return DXUtility.getDXInstance(null, '#headerMenu', 'dxMenu'); };
var notificationPopover = function () { return DXUtility.getDXInstance(null, '#notificationPopover', 'dxPopover'); };
var notificationList = function () { return DXUtility.getDXInstance(null, '#notificationList', 'dxList'); };

var changePassword = new Dismoyo_Ciptoning_Client.ChangePassword();

function checkNotification() {
    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
    var menu = headerMenu();
    if (user && menu && menu.option('visible')) {
        new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vUserNotifications,
            select: ['_'],
            filter: [
                ['UserID', '=', user.ID()],
                ['IsRead', '=', false]
            ],
            paginate: false,
            map: function (item) { return new Dismoyo_Ciptoning_Client.vUserNotificationViewModel(item); }
        }).load()
            .done(function (result) {
                if (user.NotificationCount() == undefined)
                    user.NotificationCount(0);

                var menuItems = menu.option('items');
                var iconSrc = 'Images/user_notification_empty_32px.png';
                if (user.NotificationCount() != result.length)
                    user.NotificationCount(result.length);

                CommonUtility.setJsonCookie('CurrentUser', user.toJS(), 7);

                if (user.NotificationCount() > 0)
                    iconSrc = 'Images/user_notification_32px.png';

                if (menuItems[0].iconSrc != iconSrc) {
                    menuItems[0].iconSrc = iconSrc;
                    menu.option('items', menuItems);
                }

                //setTimeout(checkNotification, 30000);
                setTimeout(checkNotification, 10000);
            })
            .fail(function (error) {
                //setTimeout(checkNotification, 30000);
                setTimeout(checkNotification, 10000);
            });
    } else
        setTimeout(checkNotification, 500);
}

function showNotification() {
    var list = notificationList();
    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

    if ((user.NotificationCount() != undefined) && (user.NotificationCount() > 0)) {
        var userNotificationDataSource = new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vUserNotifications,
            select: [
                'ID',
                'HtmlMessage',
                'IsRead'
            ],
            filter: [
                ['UserID', '=', user.ID()],
                ['IsRead', '=', false]
            ],
            paginate: false,
            map: function (item) { return new Dismoyo_Ciptoning_Client.vUserNotificationViewModel(item); }
        });

        list.option('dataSource', userNotificationDataSource);
        userNotificationDataSource.load()
            .done(function (result) {
                notificationPopover().show();

                for (var i = 0; i < result.length; i++) {
                    var dataJS = result[i].toJS();
                    if (dataJS.IsRead == false) {
                        dataJS.HtmlMessage = '';
                        dataJS.IsRead = true;
                        userNotificationDataSource.store().update(dataJS.ID, dataJS)
                            .done(function (result2) {
                                if (i >= (result.length - 1))
                                    checkNotification();
                            })
                            .fail(function (error2) {
                                if (i >= (result.length - 1))
                                    checkNotification();
                            });
                    }
                }
            });
    } else
        notificationPopover().show();
}

(function ($, DX, undefined) {
    var layoutSets = DX.framework.html.layoutSets;
    layoutSets['desktop'] = layoutSets['desktop'] || [];
    layoutSets['desktop'].push({
        platform: 'generic',
        controller: new DX.framework.html.DefaultLayoutController({ name: 'desktop' })
    })
})(jQuery, DevExpress);


Dismoyo_Ciptoning_Client.ChangePassword = function () {
    var intrvl;

    var events = {
        performSave: function () {
            var editForm = form();
                        
            var isValid = editForm.validate().isValid;
            var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var oldPassword = editForm.getEditor('OldPassword').option('value');
            if (isValid) {
                if (oldPassword != user.Password()) {
                    errorMsg = 'Old Password is incorrect.';
                    isValid = false;
                }
            }

            if (isValid) {
                var changePassword = {
                    ID: user.ID(),
                    Password: editForm.getEditor('NewPassword').option('value')
                };

                Dismoyo_Ciptoning_Client.DB.ChangePasswords.update(changePassword.ID, changePassword)
                    .done(function (result) {
                        DevExpress.ui.dialog.alert('Password has been successfully changed. System will navigate to the Sign In page.',
                            'Change Password Succeed');
                        popupOptions.visible(false);

                        CommonUtility.clearCookie('CurrentUser');
                        Dismoyo_Ciptoning_Client.app.navigate(Dismoyo_Ciptoning_Client.app.router.format({ view: 'Login' }));
                    }).fail(function (error) {
                        DevExpress.ui.dialog.alert(error.message, 'Change Password Failed');
                    });
            }

            if (errorMsg != '') {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Change Password Failed');
            }
        },
        performCancel: function () {
            popupOptions.visible(false);
        }
    };

    var popup = function () { return DXUtility.getDXInstance(null, '#ChangePassword_popup', 'dxPopup'); }

    var popupOptions = {
        showTitle: true,
        width: 400,
        height: 230,
        title: 'Change Password',
        visible: ko.observable(false)
    };

    var popupContent = function () { return DXUtility.getDXInstance(null, '#ChangePassword_popupContent', 'dxScrollView'); }

    var popupContentOptions = {
        scrollByContent: true,
        scrollByThumb: true
    };

    var form = function () { return DXUtility.getDXInstance(null, '#ChangePassword_form', 'dxForm'); }

    var formOptions = {
        colCount: 3,
        showColonAfterLabel: false,
        labelLocation: 'left',
        onEnterKey: function () { events.performSearch(); },
        items: [
            {
                dataField: 'OldPassword',
                validationRules: [{ type: 'required' }],
                label: { text: 'Old Password' },
                colSpan: 3,
                editorOptions: {
                    mode: 'password',
                    maxLength: 64,
                    onEnterKey: function () { events.performSave(); }
                }
            }, {
                dataField: 'NewPassword',
                validationRules: [{ type: 'required' }],
                label: { text: 'NewPassword' },
                colSpan: 3,
                editorOptions: {
                    mode: 'password',
                    maxLength: 64,
                    onEnterKey: function () { events.performSave(); }
                }
            }, {
                dataField: 'ConfirmNewPassword',
                validationRules: [{
                    type: 'required'
                }, {
                    type: 'custom',
                    validationCallback: function (options) {
                        var newPassword = form().getEditor('NewPassword').option('value');
                        if (options.value != newPassword) {
                            options.rule.message = 'Confirm New Password is not match with New Password.';
                            return false;
                        }
                        
                        return true;
                    }
                }],
                label: { text: 'Confirm New Password' },
                colSpan: 3,
                editorOptions: {
                    mode: 'password',
                    maxLength: 64,
                    onEnterKey: function () { events.performSave(); }
                }
            }
        ]
    };

    var save = function () { return DXUtility.getDXInstance(null, '#ChangePassword_save', 'dxButton'); }

    var saveOptions = {
        text: 'Save', type: 'apply',
        onClick: function () { events.performSave(); }
    };

    var cancel = function () { return DXUtility.getDXInstance(null, '#ChangePassword_cancel', 'dxButton'); }

    var cancelOptions = {
        text: 'Cancel',
        onClick: function () { events.performCancel(); }
    };

    return {
        events: events,

        popup: popup,
        popupOptions: popupOptions,

        popupData: ko.observable(),

        popupContent: popupContent,
        popupContentOptions: popupContentOptions,

        form: form,
        formOptions: formOptions,

        save: save,
        saveOptions: saveOptions,

        cancel: cancel,
        cancelOptions: cancelOptions,
    };
};

function Home_checkContainer() {
    if (!CommonUtility.validateLoggedInUser())
        return;

    if ($('#Home_viewSubContent').is(':visible')) {
        var pane = $('#Home_viewContent').layout({
            name: 'HomeViewContent',
            north: {
                paneSelector: '#Home_viewContentHeader',
                resizable: false,
                spacing_open: 0,
                spacing_closed: 0
            },
            center: {
                paneSelector: '#Home_viewSubContent',
                children: {
                    west: {
                        paneSelector: '#Home_leftChartContent',
                        resizable: false,
                        width: '300px',
                        spacing_open: 0,
                        spacing_closed: 0
                    },
                    center: {
                        paneSelector: '#Home_centerChartContent',
                        onresize: $.layout.callbacks.resizeTabLayout,
                        //onresize: function (pane, $Pane, state) {
                            //var dataGrid = DXUtility.getDXInstance($Pane, '#commonGridView_dataGrid', 'dxDataGrid');
                            //if (dataGrid)
                            //    dataGrid.option('height', $Pane.height() - 40);
                        //}
                    },
                    east: {
                        paneSelector: '#Home_rightChartContent',
                        resizable: false,
                        spacing_open: 0,
                        spacing_closed: 0
                    }
                }
            }
        });

        //pane.resizeAll();
        desktopPane().show('west');
    }
    else
        setTimeout(vSalesmanTargets_checkContainer, 50);
}


Dismoyo_Ciptoning_Client.Home = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    
    function handleViewShowing() {
        Home_checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var filters = [];
        if (!user.IsHeadOffice()) {
            filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];
        }

        var today = new Date();
        if (filters.length > 0) {
            filters.push('and');
        }

        filters.push(['TransactionDate', '>=', DateTimeUtility.getFirstDayOfMonth(today)]);
        filters.push('and');
        filters.push(['TransactionDate', '<=', DateTimeUtility.getLastDayOfMonth(today)]);

        if (filters.length > 0)
            filters = [filters];

        //var leftChartDataSource = new DevExpress.data.DataSource({
        //    store: Dismoyo_Ciptoning_Client.DB.vSalesOrders,
        //    select: [
        //        'DocumentStatusID',
        //        'DocumentStatusName'
        //    ],
        //    filter: filters,
        //    group: 'DocumentStatusID'
        //}).load()        
        //    .done(function (result) {
        //        var ds = [];
        //        for (var i = 0; i < result.length; i++) {
        //            ds.push({
        //                arg: result[0].items[0].DocumentStatusName,
        //                val: result[0].items.length
        //            });
        //        }

        //        //centerChart().option('dataSource', ds);
        //    })
        //    .fail(function (error) {
        //        alert(error);
        //    });
    }



    

    var leftChart = function () { return DXUtility.getDXInstance(null, '#Home_leftChart', 'dxChart'); };

    var leftChartOptions = {
        dataSource: [{
            arg: 'A',
            val: 24
        }, {
            arg: 'B',
            val: 120
        }, {
            arg: 'C',
            val: 32
        }, {
            arg: 'D',
            val: 3
        }],
        legend: {
            visible: false
        },
        series: {
            type: 'bar'
        },
        argumentAxis: {
            tickInterval: 10
        },
        valueAxis: {
            label: {
                format: {
                    //type: 'millions'
                }
            }
        },
        title: 'Current Sales Order'
    }

    var centerChart = function () { return DXUtility.getDXInstance(null, '#Home_centerChart', 'dxChart'); };

    var centerChartOptions = {
        dataSource: [],
        legend: {
            visible: false
        },
        series: {
            type: 'bar'
        },
        argumentAxis: {
            tickInterval: 10
        },
        valueAxis: {
            label: {
                format: {
                    //type: 'millions'
                }
            }
        },
        title: 'This Month Sales Order'
    }

    var rightChart = function () { return DXUtility.getDXInstance(null, '#Home_rightChart', 'dxChart'); };

    var rightChartOptions = {
        dataSource: [{
            arg: 'AA',
            val: 24
        }, {
            arg: 'BB',
            val: 120
        }, {
            arg: 'CC',
            val: 32
        }, {
            arg: 'DD',
            val: 3
        }],
        legend: {
            visible: false
        },
        series: {
            type: 'bar'
        },
        argumentAxis: {
            tickInterval: 10
        },
        valueAxis: {
            label: {
                format: {
                    //type: 'millions'
                }
            }
        },
        title: 'Current Sales Order'
    }




    
    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/home_32px.png',

        leftChartOptions: leftChartOptions,
        centerChartOptions: centerChartOptions,
        rightChartOptions: rightChartOptions
    };
};

Dismoyo_Ciptoning_Client.Login = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function checkContainer() {
        if ($('#Login_controls').is(':visible')) {
            var pane = $('#Login_viewContent').layout({
                name: 'LoginViewContent',
                center: {
                    paneSelector: '#Login_viewSubContent',
                    spacing_open: 0,
                    spacing_closed: 0,
                    onresize: function (pane, $Pane, state) {
                        var gallery = DXUtility.getDXInstance($Pane, '#Login_gallery', 'dxGallery');
                        if (gallery) {
                            gallery.option('width', $Pane.width());
                            gallery.option('height', $Pane.height());
                        }
                    }
                },
                east: {
                    paneSelector: '#Login_controls',
                    size: 350,
                    resizable: false,
                    spacing_open: 0,
                    spacing_closed: 0
                }
            });

            pane.resizeAll();
        }
        else
            setTimeout(Login_checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();
                
        $('#headerWelcome').text('');
        headerMenu().option('visible', false);

        desktopPane().hide('west');
    }



    function performLogin() {
        var form = loginForm();
        var isValid = form.validate().isValid;

        if (isValid) {
            showLoadingPanel();

            var user = new Dismoyo_Ciptoning_Client.vUserViewModel();
            user.Name(form.getEditor('UserName').option('value'));
            user.Password(form.getEditor('Password').option('value'));

            var dataSource = new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vUsers,
                filter: ['Name', '=', user.Name()],
                expand: 'ChildPermissions',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vUserViewModel(item); }
            });

            CommonUtility.setJsonCookie('CurrentUser', user.toJS(), 7);
            dataSource.load()
                .done(function (result) {
                    if (result.length > 0) {
                        var data = result[0];
                        var childPermissions = data.toJS().ChildPermissions;

                        data.Password(user.Password());                        
                        data.ChildPermissions(undefined);

                        CommonUtility.setJsonCookie('CurrentUser', data.toJS(), 7);

                        var currentPermissionsJS = JSON.stringify(childPermissions);
                        if ((currentPermissionsJS == undefined) || (currentPermissionsJS == null))
                            currentPermissionsJS = '';

                        var currentPermissionsJSLength = Math.ceil(currentPermissionsJS.length / 2048);
                        
                        CommonUtility.setCookie('CurrentUserPermissionsLength', currentPermissionsJSLength, 7);
                        for (var i = 0; i < currentPermissionsJSLength; i++) {
                            var start = i * 2048;
                            var end = start + 2048;
                            if (end >= currentPermissionsJS.length)
                                end = currentPermissionsJS.length;

                            var value = currentPermissionsJS.substring(start, end);
                            CommonUtility.setCookie('CurrentUserPermissions' + (i + 1).toString(), value, 7);
                        }
                        
                        var menu = headerMenu();
                        var menuItems = menu.option('items');
                        menuItems[0].iconSrc = 'Images/user_notification_empty_32px.png';
                        menu.option('items', menuItems);

                        // Load system data to local store.
                        Dismoyo_Ciptoning_Client.LocalStore.loadAllData();                        
                        Dismoyo_Ciptoning_Client.app.navigate(Dismoyo_Ciptoning_Client.app.router.format({ view: 'Home' }));
                    } else {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Invalid user name or password'), 'Login Failed');
                        CommonUtility.clearCookie('CurrentUser');
                    }

                    hideLoadingPanel();
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Login Failed');
                    CommonUtility.clearCookie('CurrentUser');

                    hideLoadingPanel();
                });
        }
    };





    var gallery = function () { return DXUtility.getDXInstance(null, '#Login_gallery', 'dxGallery'); }

    var galleryOptions = {
        //dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.galleryImages(),
        dataSource: ['Galleries/1.jpg', 'Galleries/2.jpg', 'Galleries/3.jpg'],
        height: '100%',
        stretchImages: true,
        slideshowDelay: 3000,
        loop: true,
        showNavButtons: true,
        showIndicator: true
    };

    var loginForm = function () { return DXUtility.getDXInstance(null, '#Login_form', 'dxForm'); }

    var loginFormOptions = {
        colCount: 1,
        showColonAfterLabel: false,
        labelLocation: 'left',
        onEnterKey: function () {
            performLogin();
        },
        items: [{
            itemType: 'group',
            caption: 'Sign In',
            colCount: 3,
            items: [{
                dataField: 'UserName',
                validationRules: [{ type: 'required' }],
                label: { text: 'User Name' },
                colSpan: 3,
                editorOptions: {
                    maxLength: 256,
                    onEnterKey: function () { performLogin(); }
                }
            }, {
                dataField: 'Password',
                validationRules: [{ type: 'required' }],
                label: { text: 'Password' },
                colSpan: 3,
                editorOptions: {
                    mode: 'password',
                    maxLength: 64,
                    onEnterKey: function () { performLogin(); }
                }
            }]
        }]
    };

    var submit = function () {
        return DXUtility.getDXInstance(null, '#Login_submit', 'dxButton');
    }

    var submitOptions = {
        text: 'Sign In', width: '120px', type: 'default',
        onClick: function () { performLogin(); }
    };



    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/territory_32px.png',

        gallery: gallery,
        galleryOptions: galleryOptions,
        loginForm: loginForm,
        loginFormOptions: loginFormOptions,
        submit: submit,
        submitOptions: submitOptions
    };
};


Dismoyo_Ciptoning_Client.CollapsibleFilter = function () {
    var events = {
        performSearch: function () { },
        performClear: function () {
            var items = form().option('items');
            for (var i in items) {
                if (items[i].itemType) {
                    if (items[i].itemType == "group") {
                        var subItems = items[i].items;
                        for (var j in subItems) {
                            var editor = form().getEditor(subItems[j].dataField);
                            if (editor)
                                editor.option('value', null);
                        }
                    }
                } else {
                    var editor = form().getEditor(items[i].dataField);
                    if (editor)
                        editor.option('value', null);
                }
            }

            events.performSearch();
        }
    };

    var filter = function () { return DXUtility.getDXInstance(null, '#collapsibleFilter_filter', 'dxAccordion'); }

    var filterOptions = {
        dataSource: [{ title: 'Filter' }],
        itemTemplate: 'content',
        collapsible: true,
        multiple: true,
        focusStateEnabled: false,
        onItemTitleClick: DXUtility.fixAccordionItemTitleClick,
        onItemClick: DXUtility.fixAccordionItemClick
    };

    var form = function () { return DXUtility.getDXInstance(null, '#collapsibleFilter_form', 'dxForm'); }

    var formOptions = {
        colCount: 3,
        showColonAfterLabel: false,
        labelLocation: 'top',
        onEnterKey: function () { events.performSearch(); }
    };

    var search = function () { return DXUtility.getDXInstance(null, '#collapsibleFilter_search', 'dxButton'); }

    var searchOptions = {
        text: 'Search', icon: 'search', type: 'apply',
        onClick: function () { events.performSearch(); }
    };

    var clear = function () { return DXUtility.getDXInstance(null, '#collapsibleFilter_clear', 'dxButton'); }

    var clearOptions = {
        text: 'Clear',
        onClick: function () { events.performClear(); }
    };

    return {
        events: events,

        filter: filter,
        filterOptions: filterOptions,

        form: form,
        formOptions: formOptions,

        search: search,
        searchOptions: searchOptions,

        clear: clear,
        clearOptions: clearOptions
    };
};


Dismoyo_Ciptoning_Client.CommonGridView = function () {
    var events = {
        performNewRow: function (rootView) {
            dataGrid().addRow();
        },
        performDeleteRows: function (dataGrid, selectedRows) {
            var dataSource = dataGrid.option('dataSource');
            var selectedKeys = dataGrid.getSelectedRowKeys();

            if (selectedKeys.length > 0)
                dataGrid.beginCustomLoading();

            var x = 0;
            for (var i = 0; i < selectedKeys.length; i++) {
                dataSource.store().remove(selectedKeys[i])
                    .done(function (result) {
                        x++;
                        if (x >= (selectedKeys.length - 1)) {
                            dataSource.load()
                                .done(function (result2) {
                                    dataGrid.clearSelection();
                                    dataGrid.endCustomLoading();
                                    dataGrid.refresh();
                                    events.rowsRemoved();
                                })
                                .fail(function (error2) {
                                    dataGrid.endCustomLoading();
                                });
                        }
                    })
                    .fail(function (error) {
                        var dc = $('.dx-popup-normal>.dx-dialog-content');
                        if (dc.length == 0)
                            DevExpress.ui.dialog.alert(error.message, 'Delete Failed');

                        x++;
                        if (x >= (selectedKeys.length - 1)) {
                            dataSource.load()
                                .done(function (result2) {
                                    dataGrid.clearSelection();
                                    dataGrid.endCustomLoading();
                                    dataGrid.refresh();
                                    events.rowsRemoved();
                                })
                                .fail(function (error2) {
                                    dataGrid.endCustomLoading();
                                });
                        }
                    });
            }
        },
        rowInserted: function (info) { },
        rowUpdated: function (info) { },
        rowRemoved: function (info) { },
        rowsRemoved: function () { },
        rowChanged: function (info) { },
        initRow: function (info) { },
        editingStart: function (info) { },
        selectionChanged: function (e) { },
        rowValidation: function (e) { }
    };

    var commands = function () { return $('#commonGridView_commands') }

    var newRow = function () { return DXUtility.getDXInstance(null, '#commonGridView_newRow', 'dxButton'); }

    var newRowOptions = {
        text: 'New', icon: 'add',
        onClick: function () {
            events.performNewRow(this);
        }
    };

    var deleteRows = function () { return DXUtility.getDXInstance(null, '#commonGridView_deleteRows', 'dxButton'); }

    var deleteRowsOptions = {
        text: 'Delete', icon: 'remove', disabled: true,
        onClick: function () {
            DevExpress.ui.dialog.confirm(
                'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                    if (dialogResult) {
                        var _dataGrid = dataGrid();
                        events.performDeleteRows(_dataGrid, _dataGrid.getSelectedRowsData());
                    }
                });
        }
    };

    var hideErrorMessage = function () {
        $(".dx-error-row").remove();
    }

    var showErrorMessage = function (message) {
        hideErrorMessage();
        var table = $(".dx-datagrid-table.dx-datagrid-table-fixed", "#commonGridView_dataGrid").first();
        var trMessage = "<tr class='dx-error-row'><td colspan='" + $("col", $(table).first()).length + "' role='presentation'><div class='dx-closebutton dx-datagrid-action' onclick='javascript: $(this).parent().parent().remove();'></div><div class='dx-error-message'>";
        trMessage += message;
        trMessage += "</div></td></tr>";
        $("tbody", $(table).first()).append(trMessage);
    };

    var isItRequired = function (e, dataField) {
        var validationRules = e.component.columnOption(dataField, "validationRules");
        //Add by Kevin 26/04/16
        // add check value if is null
        var value = e.component.columnOption(dataField, "value");
        for (var i in validationRules) {
            if (validationRules[i].type == "required" && value != null) {
                return true;
            }
        }
        return false;
    }


    var dataGrid = function () { return DXUtility.getDXInstance(null, '#commonGridView_dataGrid', 'dxDataGrid'); }

    var dataGridOptions = {
        height: '100%',
        paging: {
        },
        pager: {
            showPageSizeSelector: true,
            allowedPageSizes: [5, 10, 20],
            showInfo: true,
            showNavigationButtons: true
        },
        allowColumnResizing: true,
        columnAutoWidth: false,
        hoverStateEnabled: true,
        selection: {
            mode: 'multiple'
        },
        editing: {
            editMode: 'row',
            
            allowUpdating: true,
            allowDeleting: true,

            editEnabled: true,
            removeEnabled: true
        },
        onRowInserted: function (info) {
            events.rowInserted(info);
            events.rowChanged(info);

            // Added by Rika 26/4/16
            hideErrorMessage();
        },
        onRowUpdated: function (info) {
            events.rowUpdated(info);
            events.rowChanged(info);

            // Added by Rika 26/4/16
            hideErrorMessage();
        },
        onRowRemoved: function (info) {
            events.rowRemoved(info);
            events.rowChanged(info);

            // Added by Rika 26/4/16
            hideErrorMessage();
        },
        onCellClick: function (e) {
            hideErrorMessage();
        },
        onSelectionChanged: function (e) {
            var editing = e.component.option('editing');

            deleteRows().option('disabled', !(editing.allowDeleting && (e.selectedRowsData.length > 0)));
            events.selectionChanged(e);

            // Added by Rika 26/4/16
            hideErrorMessage();
        },
        onEditingStart: function (e) {
            events.editingStart(e);
            // Added by Asep 22/4/16
            var columns = e.component.option('columns');
            for (var i in columns) {
                if (e.component.columnOption(columns[i].dataField, "onlyAllowAdd"))
                    e.component.columnOption(columns[i].dataField, "allowEditing", false);

                if (columns[i].dataField == "Code")
                    e.component.columnOption(columns[i].dataField, "allowEditing", false);

                //if (columns[i].dataField == "StatusID" && e.model.name != "vSalesmen")
                //    e.data[columns[i].dataField] = 1;

                if (e.component.columnOption(columns[i].dataField, "dataType") == "number") {
                    var validationRules = e.component.columnOption(columns[i].dataField, "validationRules");
                    if (!validationRules) {
                        validationRules = [];
                    }

                    var format = e.component.columnOption(columns[i].dataField, "format");
                    if (format == "fixedPoint")
                        validationRules.push({ type: 'pattern', pattern: '^[0-9]+(\.[0-9][0-9]?)?', message: columns[i].caption + ' must be positive number' });
                    else
                        validationRules.push({ type: 'pattern', pattern: '^[0-9]+$', message: columns[i].caption + ' must be positive number' });

                    e.component.columnOption(columns[i].dataField, "validationRules", validationRules);
                }
            }
            e.component.repaint();
        },
        onInitNewRow: function (e) {
            events.initRow(e);
            // Added by Asep 22/4/16
            var columns = e.component.option("columns");
            for (var i in columns) {
                if (e.component.columnOption(columns[i].dataField, "onlyAllowAdd"))
                    e.component.columnOption(columns[i].dataField, "allowEditing", true);

                if (columns[i].dataField == "Code")
                    e.component.columnOption(columns[i].dataField, "allowEditing", true);

                //if (columns[i].dataField == "StatusID")
                //    e.data[columns[i].dataField] = 1;

                if (e.component.columnOption(columns[i].dataField, "dataType") == "number") {
                    var validationRules = e.component.columnOption(columns[i].dataField, "validationRules");
                    if (!validationRules) {
                        validationRules = [];
                    }

                    var format = e.component.columnOption(columns[i].dataField, "format");
                    if (format == "fixedPoint")
                        validationRules.push({ type: 'pattern', pattern: '^[0-9]+(\.[0-9][0-9]?)?', message: columns[i].caption + ' must be positive number' });
                    else
                        validationRules.push({ type: 'pattern', pattern: '^[0-9]+$', message: columns[i].caption + ' must be positive number' });

                    e.component.columnOption(columns[i].dataField, "validationRules", validationRules);
                }

                if (e.component.columnOption(columns[i].dataField, "defaultValue") !== undefined) {
                    e.data[columns[i].dataField] = e.component.columnOption(columns[i].dataField, "defaultValue");
                }
            }
            e.component.repaint();
        },
        onRowValidating: function (e) {
            hideErrorMessage();
            // Added by Asep 22/4/16
            var columns = e.component.option("columns");
            var errorDataField = "";
            var errorCaption = "";
            // mandatory
            for (var i in columns) {
                if (isItRequired(e, columns[i].dataField) && !e.newData[columns[i].dataField]) {
                    errorDataField = columns[i].dataField;
                    errorCaption = columns[i].caption;
                    showErrorMessage((errorCaption? errorCaption: errorDataField) + " is required");
                    e.isValid = false;
                    break;
                }
            }
            // numeric validation
            for (var i in columns) {
                if (e.component.columnOption(columns[i].dataField, "dataType") == "number") {
                    if (e.newData[columns[i].dataField] < 0) {
                        errorDataField = columns[i].dataField;
                        errorCaption = columns[i].caption;
                        showErrorMessage((errorCaption ? errorCaption : errorDataField) + " must be positive value");
                        e.isValid = false;
                        break;
                    }
                }
            }

            events.rowValidation(e);
        },
        onDataErrorOccurred: function (e) {
            setTimeout(function () { hideErrorMessage(); }, 5000);
        }
    };

    $("#cancelRow").dxButton({
        onClick: function (e) {
            hideErrorMessage();
        }
    });

    return {
        events: events,

        commands: commands,

        newRow: newRow,
        newRowOptions: newRowOptions,

        deleteRows: deleteRows,
        deleteRowsOptions: deleteRowsOptions,

        dataGrid: dataGrid,
        dataGridOptions: dataGridOptions
    };
};


Dismoyo_Ciptoning_Client.CommonIFrame = function () {
    var events = {        
    };

    var iframe = function () { return $('#commonIFrame_iframe'); }

    var loadingPanel = function () { return DXUtility.getDXInstance(null, '#commonIFrame_loadingPanel', 'dxLoadPanel'); }

    var showLoadingPanel = function () {
        var panel = loadingPanel();
        if (panel)
            panel.option('visible', true);
    };

    var hideLoadingPanel = function () {
        var panel = loadingPanel();
        if (panel)
            panel.option('visible', false);
    };

    return {
        events: events,

        showLoadingPanel: showLoadingPanel,
        hideLoadingPanel: hideLoadingPanel,

        loadingPanel: loadingPanel,
        iframe: iframe
    };
};


Dismoyo_Ciptoning_Client.CommonPopupEdit = function () {
    var events = {
        performOK: function (rootView) {
            rootView.commonPopupEdit.popupEditOptions.visible(false);
        },
        performCancel: function (rootView) {
            rootView.commonPopupEdit.popupEditOptions.visible(false);
        }
    };

    var popupEdit = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_popupEdit', 'dxPopup'); }

    var popupEditOptions = {
        deferRendering: false,
        editingKey: null,
        showTitle: true,
        title: 'Title',
        fullScreen: true,
        disabled: ko.observable(false),
        visible: ko.observable(false)
    };

    var validationGroup = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_validationGroup', 'dxValidationGroup'); }

    var popupContent = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_popupContent', 'dxScrollView'); }

    var popupContentOptions = {
        scrollByContent: true,
        scrollByThumb: true
    };

    var form = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_form', 'dxForm'); }

    var formOptions = {
        colCount: 3,
        showColonAfterLabel: false,
        labelLocation: 'left',
        onEnterKey: function () { events.performSearch(); }
    };

    var extContent = function () { return $('#commonPopupEdit_extContent'); }

    var ok = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var okOptions = {
        text: 'OK', type: 'apply',
        onClick: function () { events.performOK(this); }
    };

    var cancel = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_cancel', 'dxButton'); }

    var cancelOptions = {
        text: 'Cancel',
        onClick: function () { events.performCancel(this); }
    };

    return {
        events: events,

        popupEdit: popupEdit,
        popupEditOptions: popupEditOptions,

        popupEditData: ko.observable(),

        validationGroup: validationGroup,

        popupContent: popupContent,
        popupContentOptions: popupContentOptions,

        form: form,
        formOptions: formOptions,

        extContent: extContent,

        ok: ok,
        okOptions: okOptions,

        cancel: cancel,
        cancelOptions: cancelOptions
    };
};


Dismoyo_Ciptoning_Client.CommonPopupIFrame = function () {
    var events = {
        performOK: function (rootView) {
            rootView.commonPopupIFrame.popupEditOptions.visible(false);
        },
        performCancel: function (rootView) {
            rootView.commonPopupIFrame.popupEditOptions.visible(false);
        }
    };

    var popupEdit = function () { return DXUtility.getDXInstance(null, '#commonPopupIFrame_popupEdit', 'dxPopup'); }

    var popupEditOptions = {
        deferRendering: false,
        showTitle: true,
        title: 'Title',
        fullScreen: true,
        disabled: ko.observable(false),
        visible: ko.observable(false)
    };

    var validationGroup = function () { return DXUtility.getDXInstance(null, '#commonPopupIFrame_validationGroup', 'dxValidationGroup'); }

    var iframe = function () { return $('#commonPopupIFrame_iframe'); }

    var loadingPanel = function () { return DXUtility.getDXInstance(null, '#commonPopupIFrame_loadingPanel', 'dxLoadPanel'); }

    var showLoadingPanel = function () {
        var panel = loadingPanel();
        if (panel)
            panel.option('visible', true);
    };

    var hideLoadingPanel = function () {
        var panel = loadingPanel();
        if (panel)
            panel.option('visible', false);
    };

    var ok = function () { return DXUtility.getDXInstance(null, '#commonPopupIFrame_ok', 'dxButton'); }

    var okOptions = {
        text: 'OK', type: 'apply',
        onClick: function () { events.performOK(this); }
    };

    var cancel = function () { return DXUtility.getDXInstance(null, '#commonPopupIFrame_cancel', 'dxButton'); }

    var cancelOptions = {
        text: 'Cancel',
        onClick: function () { events.performCancel(this); }
    };

    return {
        events: events,

        popupEdit: popupEdit,
        popupEditOptions: popupEditOptions,

        popupEditData: ko.observable(),

        validationGroup: validationGroup,

        showLoadingPanel: showLoadingPanel,
        hideLoadingPanel: hideLoadingPanel,

        loadingPanel: loadingPanel,
        iframe: iframe,
                
        ok: ok,
        okOptions: okOptions,

        cancel: cancel,
        cancelOptions: cancelOptions
    };
};


Dismoyo_Ciptoning_Client.CommonTreeView = function () {
    var events = {
        performSearchItem: function (value) { },
        itemClick: function (e) { }
    };

    var commonTreeView_loadingPanel = function () { return DXUtility.getDXInstance(null, '#commonTreeView_loadingPanel', 'dxLoadPanel'); }

    var commonTreeView_loadingPanelOptions = {
        showIndicator: true,
        showPane: true,
        shading: false,
        closeOnOutsideClick: false
    };

    var search = function () { return DXUtility.getDXInstance(null, '#commonTreeView_search', 'dxTextBox'); }

    var searchOptions = {
        placeholder: 'Search',
        mode: 'search',
        valueChangeEvent: 'keyup',
        onValueChanged: function (e) {
            treeView().option('searchValue', e.value);
            events.performSearchItem(e.value);
        }
    };

    var treeView = function () { return DXUtility.getDXInstance(null, '#commonTreeView_treeView', 'dxTreeView'); }

    var treeViewOptions = {
        onItemClick: function (e) {
            $(".dx-treeview-item").removeClass("desktop-commonTreeView-focusedItem");
            $(e.itemElement).addClass("desktop-commonTreeView-focusedItem");

            e.component.selectedItem = e.itemData;
            events.itemClick(e);
        }
    };



    var commonTreeView_showLoadingPanel = function () {
        var panel = commonTreeView_loadingPanel();
        if (panel)
            panel.option('visible', true);
    };

    var commonTreeView_hideLoadingPanel = function () {
        var panel = commonTreeView_loadingPanel();
        if (panel)
            panel.option('visible', false);
    };



    return {
        events: events,

        loadingPanel: commonTreeView_loadingPanel,
        showLoadingPanel: commonTreeView_showLoadingPanel,
        hideLoadingPanel: commonTreeView_hideLoadingPanel,
        loadingPanelOptions: commonTreeView_loadingPanelOptions,

        search: search,
        searchOptions: searchOptions,

        treeView: treeView,
        treeViewOptions: treeViewOptions
    };
};


Dismoyo_Ciptoning_Client.ProductLotPopupEdit = function () {
    var intrvl;

    var events = {
        performSave: function () {
            popupEditOptions.visible(false);
        },
        performCancel: function () {
            popupEditOptions.visible(false);
        },
        performNewRow: function () {
            dataGrid().addRow();

            save().option("disabled", true);
            intrvl = setInterval(intrvlHandler, 500);
        },
        performEditingStart: function () {
            if (save()) {
                save().option("disabled", true);
                intrvl = setInterval(intrvlHandler, 500);
            }
        },
        performDeleteRows: function (dataGrid, selectedRows) {
            var dataSource = dataGrid.option('dataSource');
            var selectedKeys = dataGrid.getSelectedRowKeys();

            for (var i = 0; i < selectedKeys.length; i++) {
                dataSource.store().remove(selectedKeys[i])
                    .done(function (result) {
                        if (i >= (selectedKeys.length - 1))
                            dataSource.load().done(function (result) { dataGrid.refresh(); });
                    })
                    .fail(function (error) {
                        if (i >= (selectedKeys.length - 1))
                            dataSource.load().done(function (result) { dataGrid.refresh(); });
                    });
            }
        }
    };

    var isEditorEnabled = function () {
        var dxCommandEdit = $(".dx-command-edit", "#productLotPopupEdit_dataGrid");
        for (var i=0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf("Save") >= 0) {
                return true;
            }
        }
        return false;
    }

    var intrvlHandler = function () {
        if (!isEditorEnabled()) {
            if (save())
                save().option("disabled", false);
        }
    };

    var newRow = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_newRow', 'dxButton'); }
    
    var newRowOptions = {
        text: 'New', icon: 'add',
        onClick: function () {
            events.performNewRow();
        }
    };

    var deleteRows = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_deleteRows', 'dxButton'); }
    
    var deleteRowsOptions = {
        text: 'Delete', icon: 'remove', disabled: true,
        onClick: function () {
            DevExpress.ui.dialog.confirm(
                'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                    if (dialogResult) {
                        var _dataGrid = dataGrid();
                        events.performDeleteRows(_dataGrid, _dataGrid.getSelectedRowsData());
                    }
                });
        }
    };
        
    var dataGrid = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_dataGrid', 'dxDataGrid'); }

    var dataGridOptions = {
        showBorders: true,
        paging: { enabled: false },
        allowColumnResizing: false,
        columnAutoWidth: false,
        hoverStateEnabled: true,
        selection: {
            mode: 'multiple'
        },
        editing: {
            editMode: 'row',
            allowUpdating: true,
            allowDeleting: true,

            editEnabled: true,
            removeEnabled: true
        },
        onSelectionChanged: function (e) {
            deleteRows().option('disabled', !e.selectedRowsData.length);
        },
        onEditorPrepared: function (e) {
            events.performEditingStart();
        }
    };
    
    var popupEdit = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_popupEdit', 'dxPopup'); }

    var popupEditOptions = {
        editingKey: null,
        itemStatusID: null,
        showTitle: true,
        width: 700,
        title: 'Edit Lot Number',
        visible: ko.observable(false)
    };

    var popupContent = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_popupContent', 'dxScrollView'); }

    var popupContentOptions = {
        scrollByContent: true,
        scrollByThumb: true
    };

    var form = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_form', 'dxForm'); }

    var formOptions = {
        colCount: 3,
        showColonAfterLabel: false,
        labelLocation: 'left',
        onEnterKey: function () { events.performSearch(); }
    };

    var save = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_save', 'dxButton'); }

    var saveOptions = {
        text: 'Save', type: 'apply',
        onClick: function () { events.performSave(); }
    };

    var cancel = function () { return DXUtility.getDXInstance(null, '#productLotPopupEdit_cancel', 'dxButton'); }

    var cancelOptions = {
        text: 'Cancel',
        onClick: function () { events.performCancel(); }
    };

    return {
        events: events,

        popupEdit: popupEdit,
        popupEditOptions: popupEditOptions,

        popupEditData: ko.observable(),

        popupContent: popupContent,
        popupContentOptions: popupContentOptions,

        form: form,
        formOptions: formOptions,

        save: save,
        saveOptions: saveOptions,

        cancel: cancel,
        cancelOptions: cancelOptions,

        newRow: newRow,
        newRowOptions: newRowOptions,

        deleteRows: deleteRows,
        deleteRowsOptions: deleteRowsOptions,

        dataGrid: dataGrid,
        dataGridOptions: dataGridOptions
    };
};

Dismoyo_Ciptoning_Client.vAreas = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevAreasModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vAreas');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vAreas.off('modified', handlevAreasModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vAreas,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vAreaViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vAreas.on('modified', handlevAreasModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        dataField: 'TerritoryID',
        label: { text: 'Territory' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupTerritoryDataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                    [],
                    ['Region']);
            }
        }
    }, {
        dataField: 'RegionID',
        label: { text: 'Region' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupRegionDataSource(null),
            displayExpr: 'Region',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                    ['Territory'],
                    []);
            }
        }
    }, {
        name: 'Area',
        dataField: '',
        label: { text: 'Area' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // TerritoryID
        value = form.getEditor('TerritoryID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', value, 'and');

        // RegionID
        value = form.getEditor('RegionID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', value, 'and');

        // Area
        value = form.getEditor('Area').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Areas.AddNewArea');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Areas.EditArea');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Areas.DeleteArea');

    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow' && e.dataField == 'Code') {
            if (!e.row.inserted) {
                e.allowEditing = false;
                e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                e.cancel = true;
            }
        }
    };

    var regionDataSourceArray;
    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'TerritoryID', caption: 'Territory', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vTerritories.dataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            allowClearing: true,
            sortOrder: "asc"
        },
        setCellValue: function (rowData, value) {
            rowData.RegionID = null;
            this.defaultSetCellValue(rowData, value);
        },
    }, {
        dataField: 'RegionID', caption: 'Region', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'TerritoryID',
                    DataUtility.vRegions.dataSource);
            },
            displayExpr: 'Region',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID']);

            if (!value)
                rowData.TerritoryID = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vAreas_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Area' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        editorOptions: {
            maxLength: 10
        }
    }, {
        dataField: 'Name', width: '180px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 50
        },
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];




    
    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/area_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vClosingPeriods = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevClosingPeriodsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vClosingPeriods');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            commonGridView.commands().append($('<div class="desktop-commonGridView-commands-item" style="margin-left: 16px; margin-top: 4px; margin-bottom: 4px;">').text('Period:'));

            commonGridView.commands().append($('<div id="vClosingPeriods_periodInput" class="desktop-commonGridView-commands-item">').dxDateBox({
                width: '150px',
                showClearButton: true,
                min: new Date(2016, 6, 1),
                placeholder: 'mmm-yyyy',
                formatString: 'MMM-yyyy',
                maxZoomLevel: 'year',
            }));

            commonGridView.commands().append($('<div id="vClosingPeriods_newAll" class="desktop-commonGridView-commands-item">').dxButton({
                text: 'New All',
                onClick: function () {
                    performNewAll();
                }
            }));

            commonGridView.commands().append($('<div id="vClosingPeriods_openAll" class="desktop-commonGridView-commands-item">').dxButton({
                text: 'Open All',
                onClick: function () {
                    performOpenCloseAll(false);
                }
            }));

            commonGridView.commands().append($('<div id="vClosingPeriods_closeAll" class="desktop-commonGridView-commands-item">').dxButton({
                text: 'Close All',
                onClick: function () {
                    performOpenCloseAll(true);
                }
            }));
        }
    }

    function performNewAll() {
        var dataGrid = commonGridView.dataGrid();
        var date = $('#vClosingPeriods_periodInput').dxDateBox('instance').option('value');
        var year = date.getFullYear();

        DevExpress.ui.dialog.confirm(
            'Are you sure want to create new all sites data for year ' + year + '?',
            'New All Confirmation').done(function (dialogResult) {
                if (dialogResult) {
                    new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vSites,
                        select: ['ID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vSiteViewModel(item); }
                    }).load()
                        .done(function (result) {
                            var sites = result;

                            new DevExpress.data.DataSource({
                                store: Dismoyo_Ciptoning_Client.DB.vClosingPeriods,
                                select: ['SiteID'],
                                filter: ['YearID', '=', year],
                                paginate: false,
                                map: function (item) { return new Dismoyo_Ciptoning_Client.vClosingPeriodViewModel(item); }
                            }).load()
                            .done(function (result2) {
                                var existingSites = result2;
                                var i = 0;

                                if (existingSites.length > 0) {
                                    while (i < sites.length) {
                                        var ids = $.grep(existingSites, function (e) {
                                            return (e.SiteID()._value == sites[i].ID()._value);
                                        });

                                        if (ids.length > 0)
                                            sites.splice(i, 1);
                                        else
                                            i++;
                                    }
                                }

                                if (sites.length > 0)
                                    dataGrid.beginCustomLoading();

                                var x = 0;
                                for (i = 0; i < sites.length; i++) {
                                    var data = new Dismoyo_Ciptoning_Client.vClosingPeriodViewModel();

                                    data.SiteID(sites[i].ID());
                                    data.YearID(year);
                                    data.Jan(false);
                                    data.Feb(false);
                                    data.Mar(false);
                                    data.Apr(false);
                                    data.May(false);
                                    data.Jun(false);
                                    data.Jul(false);
                                    data.Aug(false);
                                    data.Sep(false);
                                    data.Oct(false);
                                    data.Nov(false);
                                    data.Dec(false);
                                    
                                    dataSource.store().insert(data.toJS())
                                        .done(function (result3) {
                                            x++;
                                            if (x >= (sites.length - 1)) {
                                                dataSource.load()
                                                    .done(function (result4) {
                                                        dataGrid.endCustomLoading();
                                                        dataGrid.refresh();
                                                    })
                                                    .fail(function (error4) {
                                                        dataGrid.endCustomLoading();
                                                    });
                                            }
                                        })
                                        .fail(function (error3) {
                                            var dc = $('.dx-popup-normal>.dx-dialog-content');
                                            if (dc.length == 0)
                                                DevExpress.ui.dialog.alert(error3.message, 'Save Failed');

                                            x++;
                                            if (x >= (sites.length - 1)) {
                                                dataSource.load()
                                                    .done(function (result4) {                                                        
                                                        dataGrid.endCustomLoading();
                                                        dataGrid.refresh();
                                                    })
                                                    .fail(function (error4) {
                                                        dataGrid.endCustomLoading();
                                                    });
                                            }
                                        });
                                }
                            })
                            .fail(function (error2) {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                    'Failed to load existing closing period data.'), 'Load Failed');
                            });
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load all sites data.'),
                                'Load Failed');
                        });
                }
            });
    }

    function performOpenCloseAll(isClosed) {
        var date = $('#vClosingPeriods_periodInput').dxDateBox('instance').option('value');
        var year = date.getFullYear();
        var monthName = null;
        switch (date.getMonth() + 1) {
            case 1: monthName = 'Jan'; break;
            case 2: monthName = 'Feb'; break;
            case 3: monthName = 'Mar'; break;
            case 4: monthName = 'Apr'; break;
            case 5: monthName = 'May'; break;
            case 6: monthName = 'Jun'; break;
            case 7: monthName = 'Jul'; break;
            case 8: monthName = 'Aug'; break;
            case 9: monthName = 'Sep'; break;
            case 10: monthName = 'Oct'; break;
            case 11: monthName = 'Nov'; break;
            case 12: monthName = 'Dec'; break;
        }

        var text = ((isClosed) ? 'Close' : 'Open');
        DevExpress.ui.dialog.confirm(
            'Are you sure want to ' + text + ' all sites for ' + monthName + ' ' + year + ' period?',
            text + ' All Confirmation').done(function (dialogResult) {
                if (dialogResult) {
                    new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vClosingPeriods,
                        select: [
                            'SiteID',
                            'YearID',
                            monthName
                        ],
                        filter: ['YearID', '=', year],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vClosingPeriodViewModel(item); }
                    }).load()
                        .done(function (result) {
                            for (var i = 0; i < result.length; i++) {
                                result[i][monthName](isClosed);

                                var dataJS = result[i].toJS();
                                var store = dataSource.store();
                                store.update(store.keyOf(dataJS), dataJS)
                                    .done(function (result2) {
                                        if (i >= (result.length - 1))
                                            collapsibleFilter.events.performSearch(this);
                                    })
                                    .fail(function (error) {
                                        if (i >= (result.length - 1))
                                            collapsibleFilter.events.performSearch(this);
                                    });
                            }
                        });
                }
            });
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vClosingPeriods.off('modified', handlevClosingPeriodsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vClosingPeriods,
        select: [
            'SiteID',
            'YearID',
            'TerritoryID',
            'RegionID',
            'AreaID',
            'Company',
            'Site',
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
            'CreatedDate',
            'CreatedByUserName',
            'ModifiedDate',
            'ModifiedByUserName'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vClosingPeriodViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vClosingPeriods.on('modified', handlevClosingPeriodsModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Closing Period',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'YearID',
            label: { text: 'Year' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                min: new Date(2016, 6, 1),
                placeholder: 'yyyy',
                formatString: 'yyyy',
                maxZoomLevel: 'decade',
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // YearID
        value = collapsibleFilter.form().getEditor('YearID').option('value');
        if (value instanceof Date)
            DXUtility.addFilterExpression(filterExpr, 'YearID', '=', value.getFullYear(), 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };



    function convertMonthNameToNumber(monthName) {
        var myDate = new Date(monthName + " 1, 2000");
        var monthDigit = myDate.getMonth();
        return isNaN(monthDigit) ? 0 : (monthDigit + 1);
    }





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    //commonGridView.dataGridOptions.onRowInserting = function (info) {
    //    if (info.data.YearID != undefined) {            
    //        info.data.Year = new Date(new Date(info.data.Year).getFullYear(), 0, 1);
    //    }
    //};

    //commonGridView.dataGridOptions.onRowUpdating = function (info) {
    //    if (info.newData.Year != undefined) {
    //        info.newData.Year = new Date(new Date(info.newData.Year).getFullYear(), 0, 1);
    //    }
    //};

    //commonGridView.dataGridOptions.onEditingStart = function (rowInfo) {
    //    var curMonth = Globalize.format(new Date(), "MMMM");
    //    var curYear = Globalize.format(new Date(), "yyyy");
    //    var columns = rowInfo.component.option("columns");

    //    for (var i = 3; i < 15; i++) {
    //        if (convertToDate(columns[i].dataField, rowInfo.data.Year().getFullYear()) > convertToDate(curMonth, curYear)) {
    //            commonGridView.dataGrid().columnOption(columns[i].dataField, 'allowEditing', false);

    //        } else {
    //            commonGridView.dataGrid().columnOption(columns[i].dataField, 'allowEditing', true);

    //        }
    //    }
    //}
    //var rowIndex = commonGridView.dataGrid()._controllers.data._editingController._editRowIndex;
    //if (!Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
    //    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
    //    info.data.SiteID = user.SiteID();

    //}

    //commonGridView.dataGridOptions.onInitNewRow = function (rowInfo) {
    //    var curMonth = Globalize.format(new Date(), "MMMM");
    //    var curYear = Globalize.format(new Date(), "yyyy");
    //    var columns = rowInfo.component.option("columns");

    //    if (!Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
    //        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
    //        rowInfo.data.SiteID = user.SiteID();
    //    }


    //    for (var i = 3; i < 15; i++) {
    //        if (convertMonthNameToNumber(columns[i].dataField) > convertMonthNameToNumber(curMonth)) {
    //            commonGridView.dataGrid().columnOption(columns[i].dataField, 'allowEditing', false);
    //        } else {
    //            commonGridView.dataGrid().columnOption(columns[i].dataField, 'allowEditing', true);
    //        }
    //    }
    //}



    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'TerritoryID', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vTerritories.dataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            rowData.RegionID = null;
            rowData.AreaID = null;
            rowData.SiteID = null;
            rowData.Company = null;
            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'RegionID', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'TerritoryID',
                    DataUtility.vRegions.dataSource);
            },
            displayExpr: 'Region',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID']);

            rowData.AreaID = null;
            rowData.SiteID = null;
            rowData.Company = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'AreaID', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'RegionID',
                    DataUtility.vAreas.dataSource);
            },
            displayExpr: 'Area',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID', 'RegionID']);

            rowData.SiteID = null;
            rowData.Company = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(), allowEditing: false
    }, {
        dataField: 'SiteID', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'AreaID',
                    DataUtility.vSites.dataSource);
            },
            displayExpr: 'Site',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupGuidValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID', 'RegionID', 'AreaID', 'Company']);

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'YearID', caption: 'Year', alignment: 'center', width: '70px',
        validationRules: [{ type: 'required' }],
        //format: 'yyyy', editorType: 'dxDateBox',
        //    editorOptions: {
        //onValueChanged: function (e) {
        //    if (e.value) {
        //        var curYear = Globalize.format(new Date(), 'yyyy');
        //        var curMonth = Globalize.format(new Date(), 'MMMM');
        //        var year = DateTimeUtility.convertToLocal(e.value).toLocaleString();
        //        var tahun = new Date(year);
        //        var columns = commonGridView.dataGridOptions.columns;
        //        var rowIndex = commonGridView.dataGrid()._controllers.data._editingController._editRowIndex;
        //        for (var i = 3; i < 15; i++) {
        //            if (convertToDate(columns[i].dataField, tahun.getFullYear()) > convertToDate(curMonth, curYear)) {

        //                commonGridView.dataGrid().columnOption(columns[i].dataField, 'allowEditing', false);
        //                commonGridView.dataGrid().cellValue(rowIndex, 'Year', e.value);

        //            } else {

        //                commonGridView.dataGrid().columnOption(columns[i].dataField, 'allowEditing', true);
        //                commonGridView.dataGrid().cellValue(rowIndex, 'Year', e.value);

        //            }

        //        }
        //    }
        //},
        //    maxZoomLevel: 'decade',
        //    minZoomLevel: 'century',
        //},
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vClosingPeriods_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines data-grid-banded-header-border-top">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" colspan="13">' + 'Period' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Jan', caption: 'Jan', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Feb', caption: 'Feb', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Mar', caption: 'Mar', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Apr', caption: 'Apr', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'May', caption: 'May', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Jun', caption: 'Jun', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Jul', caption: 'Jul', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Aug', caption: 'Aug', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Sep', caption: 'Sep', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Oct', caption: 'Oct', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Nov', caption: 'Nov', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'Dec', caption: 'Dec', dataType: 'boolean', width: '75px',
        cellTemplate: function (container, cellInfo) {
            formatMonthValue(container, cellInfo);
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    function formatMonthValue(container, cellInfo) {
        container.text((cellInfo.value) ? 'CLOSED' : 'OPEN');

        var date = DateTimeUtility.getFirstTimeOfDay(new Date());
        var year = DXUtility.getValue(cellInfo.data, 'YearID');
        var month = null;
        switch (cellInfo.column.dataField) {
            case 'Jan': month = 1; break;
            case 'Feb': month = 2; break;
            case 'Mar': month = 3; break;
            case 'Apr': month = 4; break;
            case 'May': month = 5; break;
            case 'Jun': month = 6; break;
            case 'Jul': month = 7; break;
            case 'Aug': month = 8; break;
            case 'Sep': month = 9; break;
            case 'Oct': month = 10; break;
            case 'Nov': month = 11; break;
            case 'Dec': month = 12; break;
        }

        if (((date.getMonth() + 1) == month) && (date.getFullYear() == year))
            container.css("background-color", "#CF7E72");
    }





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,

        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: "Images/region_32px.png",

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vCompanies = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevCompaniesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vCompanies');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vCompanies.off('modified', handlevCompaniesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vCompanies,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vCompanyViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vCompanies.on('modified', handlevCompaniesModification);



    

    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'Company',
        dataField: '',
        label: { text: 'Company' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        commonGridView.dataGrid().clearFilter();

        var filterExpr = [];
        var value;

        // Company
        value = collapsibleFilter.form().getEditor('Company').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            commonGridView.dataGrid().filter(filterExpr);
        else
            commonGridView.dataGrid().refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Companies.AddNewCompany');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Companies.EditCompany');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Companies.DeleteCompany');

    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow' && e.dataField == 'Code') {
            if (!e.row.inserted) {
                e.allowEditing = false;
                e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                e.cancel = true;
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vCompanies_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Company' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Address' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        editorOptions: {
            maxLength: 10
        }
    }, {
        dataField: 'Name', width: '180px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 50
        }
    }, {
        dataField: 'Address1', caption: '', width: '150px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'Address2', caption: '', width: '150px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'Address3', caption: '', width: '150px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'City', width: '120px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 50
        }
    }, {
        dataField: 'StateProvince', caption: 'State/Province', width: '120px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 50
        }
    }, {
        dataField: 'CountryID', caption: 'Country', width: '120px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vCountries.dataSource(null),
            displayExpr: "Name",
            valueExpr: "ID",
            allowClearing: true,
            sortOrder: "asc"
        }
    }, {
        dataField: 'ZipCode', caption: 'Zip Code', width: '70px',
        validationRules: [{ type: 'required' }, { type: "numeric" }],
        editorOptions: {
            maxLength: 10
        }
    }, {
        dataField: 'TaxNumber', caption: 'Tax Number', width: '180px',
        validationRules: [{ type: 'required' }, { type: "numeric" }],
        editorOptions: {
            maxLength: 20
        }
    }, {
        dataField: 'Phone1', caption: 'Phone 1', width: '120px',
        validationRules: [{ type: 'required' }, { type: "numeric" }],
        editorOptions: {
            maxLength: 20
        }
    }, {
        dataField: 'Phone2', caption: 'Phone 2', width: '120px',
        validationRules: [{ type: "numeric" }],
        editorOptions: {
            maxLength: 20
        }
    }, {
        dataField: 'Fax', caption: 'Fax', width: '120px',
        validationRules: [{ type: "numeric" }],
        editorOptions: {
            maxLength: 20
        }
    }, {
        dataField: 'Email', caption: 'Email', width: '150px',
        validationRules: [{ type: 'email' }],
        editorOptions: {
            maxLength: 256
        }
    }, {
        dataField: 'StatusID', caption: 'Status', width: '100px',
        defaultValue: 1,
        lookup: {
            dataSource: DataUtility.vSystemLookups.dataSource(['Group', '=', 'CompanyStatus']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: "Images/company_32px.png",


        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vCustomers = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;

    function handlevCustomersModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vCustomers');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vCustomers.off('modified', handlevCustomersModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vCustomers,
        select: [
            'ID',
            'Territory',
            'Region',
            'Area',
            'Company',
            'Site',
            'Code',
            'Name',
            'Salesman',
            'StatusName',
            'Address1',
            'Address2',
            'Address3',
            'City',
            'Category1',
            'Category2',
            'Category3',
            'StatusName',
            'CreatedDate',
            'CreatedByUserName',
            'ModifiedDate',
            'ModifiedByUserName'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vCustomers.on('modified', handlevCustomersModification);



    var dataSource_vDiscountGroup = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vDiscountGroups,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountGroupViewModel(item); }
    });


    function previewCustomerCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-20-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (!siteID)
            siteID = null;

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource(['SiteID', '=', siteID]);

        var infoForm = customerGeneralInfoForm();

        infoForm.getEditor('SalesmanID').option('value', null);
        infoForm.getEditor('SalesmanID').option('dataSource', []);
        salesmanDataSource.load()
            .done(function (result) {
                infoForm.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
            });
    }


    function setCategory(form, data) {
        for (var i = 1; i <= 10; i++) {
            var fieldName = 'Category' + i.toString() + 'ID';
            if (form.getEditor(fieldName)) {
                form.getEditor(fieldName).option('value', data[fieldName]());
            }
        }
    }

    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();
        
        return null;
    }


    function setAddressInfo(form, data, prefix, readOnly) {
        form.getEditor('Address1').option('value', data[prefix + 'Address1']());
        form.getEditor('Address2').option('value', data[prefix + 'Address2']());
        form.getEditor('Address3').option('value', data[prefix + 'Address3']());
        form.getEditor('City').option('value', data[prefix + 'City']());
        form.getEditor('StateProvince').option('value', data[prefix + 'StateProvince']());
        form.getEditor('CountryID').option('value', data[prefix + 'CountryID']());
        form.getEditor('ZipCode').option('value', data[prefix + 'ZipCode']());
        form.getEditor('Phone1').option('value', data[prefix + 'Phone1']());
        form.getEditor('Phone2').option('value', data[prefix + 'Phone2']());
        form.getEditor('Phone3').option('value', data[prefix + 'Phone3']());
        form.getEditor('Fax').option('value', data[prefix + 'Fax']());
        form.getEditor('Email').option('value', data[prefix + 'Email']());

        form.getEditor('Address1').option('readOnly', readOnly);
        form.getEditor('Address2').option('readOnly', readOnly);
        form.getEditor('Address3').option('readOnly', readOnly);
        form.getEditor('City').option('readOnly', readOnly);
        form.getEditor('StateProvince').option('readOnly', readOnly);
        form.getEditor('CountryID').option('readOnly', readOnly);
        form.getEditor('ZipCode').option('readOnly', readOnly);
        form.getEditor('Phone1').option('readOnly', readOnly);
        form.getEditor('Phone2').option('readOnly', readOnly);
        form.getEditor('Phone3').option('readOnly', readOnly);
        form.getEditor('Fax').option('readOnly', readOnly);
        form.getEditor('Email').option('readOnly', readOnly);
    }

    function setShipmentInfo(data) {
        var shipmentInfoForm = customerShipmentInfoForm();

        setAddressInfo(shipmentInfoForm, data, '', false);
        shipmentInfoForm.getEditor('Longitude').option('value', data.Longitude());
        shipmentInfoForm.getEditor('Latitude').option('value', data.Latitude());
    }

    function setBillingInfo(data, actionByUser) {
        var billingInfoForm = customerBillingInfoForm();

        billingInfoForm.getEditor('IsBillSameAsAddress').option('value', data.IsBillSameAsAddress());

        var prefix = 'Bill';
        var name = data.BillName();
        var readOnly = false;
        if (data.IsBillSameAsAddress()) {
            prefix = '';
            name = data.Name();
            readOnly = true;
        } else if (actionByUser) {
            name = null;

            data.BillName(null);
            data.BillAddress1(null);
            data.BillAddress2(null);
            data.BillAddress3(null);
            data.BillCity(null);
            data.BillStateProvince(null);
            data.BillCountryID(null);
            data.BillZipCode(null);
            data.BillPhone1(null);
            data.BillPhone2(null);
            data.BillPhone3(null);
            data.BillFax(null);
            data.BillEmail(null);
        }

        billingInfoForm.getEditor('Name').option('value', name);
        billingInfoForm.getEditor('Name').option('readOnly', readOnly);
        setAddressInfo(billingInfoForm, data, prefix, readOnly);
    }

    function setTaxInfo(data, actionByUser) {
        var taxInfoForm = customerTaxInfoForm();

        taxInfoForm.getEditor('IsTaxSameAsAddress').option('value', data.IsTaxSameAsAddress());
        taxInfoForm.getEditor('IsTaxSameAsBillAddress').option('value', data.IsTaxSameAsBillAddress());

        var prefix = 'Tax';
        var name = data.TaxName();
        var readOnly = false;
        if (data.IsTaxSameAsAddress()) {
            prefix = '';
            name = data.Name();
            readOnly = true;
        } else if (data.IsTaxSameAsBillAddress()) {
            prefix = 'Bill';
            name = data.BillName();
            readOnly = true;
        } else if (actionByUser) {
            name = null;

            data.TaxName(null);
            data.TaxAddress1(null);
            data.TaxAddress2(null);
            data.TaxAddress3(null);
            data.TaxCity(null);
            data.TaxStateProvince(null);
            data.TaxCountryID(null);
            data.TaxZipCode(null);
            data.TaxPhone1(null);
            data.TaxPhone2(null);
            data.TaxPhone3(null);
            data.TaxFax(null);
            data.TaxEmail(null);
        }

        taxInfoForm.getEditor('Name').option('value', name);
        taxInfoForm.getEditor('Name').option('readOnly', readOnly);
        setAddressInfo(taxInfoForm, data, prefix, readOnly);
    }

    function setAdditionalInfo(form, data) {
        for (var i = 1; i <= 10; i++) {
            var fieldName = 'AdditionalInfo' + i.toString();
            if (form.getEditor(fieldName))
                form.getEditor(fieldName).option('value', data[fieldName]());
        }
    }

    function retrieveCategory(form, data) {
        for (var i = 1; i <= 10; i++) {
            var fieldName = 'Category' + i.toString() + 'ID';
            data[fieldName](form.getEditor(fieldName).option('value'));
        }
    }

    function retrieveAddressInfo(form, data, prefix) {
        data[prefix + 'Address1'](form.getEditor('Address1').option('value'));
        data[prefix + 'Address2'](form.getEditor('Address2').option('value'));
        data[prefix + 'Address3'](form.getEditor('Address3').option('value'));
        data[prefix + 'City'](form.getEditor('City').option('value'));
        data[prefix + 'StateProvince'](form.getEditor('StateProvince').option('value'));
        data[prefix + 'CountryID'](form.getEditor('CountryID').option('value'));
        data[prefix + 'ZipCode'](form.getEditor('ZipCode').option('value'));
        data[prefix + 'Phone1'](form.getEditor('Phone1').option('value'));
        data[prefix + 'Phone2'](form.getEditor('Phone2').option('value'));
        data[prefix + 'Phone3'](form.getEditor('Phone3').option('value'));
        data[prefix + 'Fax'](form.getEditor('Fax').option('value'));
        data[prefix + 'Email'](form.getEditor('Email').option('value'));
    }

    function retrieveAdditionalInfo(form, data) {
        for (var i = 1; i <= 10; i++) {
            var fieldName = 'AdditionalInfo' + i.toString();
            data[fieldName](form.getEditor(fieldName).option('value'));
        }
    }

    function openSelectedEditing(id, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vCustomers.byKey(id)
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vCustomerViewModel(result));
            })        
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vCustomerViewModel();
            data.StatusID(1);
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Customer');
        commonPopupEdit.popupEditOptions.editingKey = data.ID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        customerInfoTabPanel().option('selectedIndex', 0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        var generalInfoForm = customerGeneralInfoForm();
        var shipmentInfoForm = customerShipmentInfoForm();
        var billingInfoForm = customerBillingInfoForm();
        var taxInfoForm = customerTaxInfoForm();
        var additionalInfoForm = customerAdditionalInfoForm();
        //DXUtility.resetFormValidation(form);
        //DXUtility.resetFormValidation(generalInfoForm);
        //DXUtility.resetFormValidation(shipmentInfoForm);
        //DXUtility.resetFormValidation(billingInfoForm);
        //DXUtility.resetFormValidation(taxInfoForm);
        //DXUtility.resetFormValidation(additionalInfoForm);

        var customerCode = data.Code();
        if (newData) {
            data.StatusID(1);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            data.RegisteredDate(new Date());
            data.IsBillSameAsAddress(false);
            data.IsTaxNumberAvailable(false);
            data.IsTaxSameAsAddress(false);
            data.IsTaxSameAsBillAddress(false);

            customerCode = previewCustomerCode(data.SiteCode());
        }

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('Company').option('value', data.Company());
            form.getEditor('SiteID').option('value', data.SiteID());
        }

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('Code').option('value', customerCode);
        form.getEditor('Name').option('value', data.Name());

        generalInfoForm.getEditor('SalesmanID').option('value', data.SalesmanID());
        generalInfoForm.getEditor('RegisteredDate').option('value', data.RegisteredDate());
        generalInfoForm.getEditor('TermOfPaymentID').option('value', data.TermOfPaymentID());
        generalInfoForm.getEditor('CreditLimit').option('value', data.CreditLimit());
        generalInfoForm.getEditor('PriceGroupID').option('value', data.PriceGroupID());
        generalInfoForm.getEditor('DiscountGroupID').option('value', data.DiscountGroupID());

        setCategory(generalInfoForm, data);
        setAdditionalInfo(additionalInfoForm, data);
        setShipmentInfo(data);
        setBillingInfo(data, false);

        taxInfoForm.getEditor('IsTaxNumberAvailable').option('value', data.IsTaxNumberAvailable());
        taxInfoForm.getEditor('TaxNumber').option('value', data.TaxNumber());
        taxInfoForm.getEditor('TaxSAPCode').option('value', data.TaxSAPCode());
        setTaxInfo(data, false);

        if (newData) {
            DXUtility.resetFormValidation(form);
            DXUtility.resetFormValidation(generalInfoForm);
            DXUtility.resetFormValidation(shipmentInfoForm);
            DXUtility.resetFormValidation(billingInfoForm);
            DXUtility.resetFormValidation(taxInfoForm);
            DXUtility.resetFormValidation(additionalInfoForm);
        }

        generalInfoForm.getEditor('StatusID').option('value', data.StatusID());
        generalInfoForm.getEditor('RegisteredDate').option('value', data.RegisteredDate());
    }

    function saveEditing() {
        showLoadingPanel();

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');

        var data = commonPopupEdit.popupEditData();
        var form = commonPopupEdit.form();
        var generalInfoForm = customerGeneralInfoForm();
        var shipmentInfoForm = customerShipmentInfoForm();
        var billingInfoForm = customerBillingInfoForm();
        var taxInfoForm = customerTaxInfoForm();
        var additionalInfoForm = customerAdditionalInfoForm();

        var isValidForm = form.validate().isValid;
        var isValidGeneralFrom = generalInfoForm.validate().isValid;
        var isValidShipmentFrom = shipmentInfoForm.validate().isValid;
        var isValidBillFrom = billingInfoForm.validate().isValid;
        var isValidTaxFrom = taxInfoForm.validate().isValid;
        var isValid = (isValidForm && isValidGeneralFrom && isValidShipmentFrom && isValidBillFrom && isValidTaxFrom) ? true : false;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        if (isValid) {
            if (form.itemOption('Organization').visible) {
                data.SiteID(form.getEditor('SiteID').option('value'));
            }

            data.Code(form.getEditor('Code').option('value'));
            data.Name(form.getEditor('Name').option('value'));

            data.SalesmanID(generalInfoForm.getEditor('SalesmanID').option('value'));
            data.RegisteredDate(generalInfoForm.getEditor('RegisteredDate').option('value'));
            data.TermOfPaymentID(generalInfoForm.getEditor('TermOfPaymentID').option('value'));
            data.CreditLimit(generalInfoForm.getEditor('CreditLimit').option('value'));
            data.PriceGroupID(generalInfoForm.getEditor('PriceGroupID').option('value'));
            data.DiscountGroupID(generalInfoForm.getEditor('DiscountGroupID').option('value'));
            data.StatusID(generalInfoForm.getEditor('StatusID').option('value'));

            retrieveCategory(generalInfoForm, data);

            data.Longitude(shipmentInfoForm.getEditor('Longitude').option('value'));
            data.Latitude(shipmentInfoForm.getEditor('Latitude').option('value'));
            retrieveAddressInfo(shipmentInfoForm, data, '');

            data.IsBillSameAsAddress(billingInfoForm.getEditor('IsBillSameAsAddress').option('value'));
            data.BillName(billingInfoForm.getEditor('Name').option('value'));
            retrieveAddressInfo(billingInfoForm, data, 'Bill');

            data.IsTaxNumberAvailable(taxInfoForm.getEditor('IsTaxNumberAvailable').option('value'));
            data.TaxSAPCode(taxInfoForm.getEditor('TaxSAPCode').option('value'));
            data.TaxNumber(taxInfoForm.getEditor('TaxNumber').option('value'));
            data.IsTaxSameAsAddress(taxInfoForm.getEditor('IsTaxSameAsAddress').option('value'));
            data.IsTaxSameAsBillAddress(taxInfoForm.getEditor('IsTaxSameAsBillAddress').option('value'));
            data.TaxName(taxInfoForm.getEditor('Name').option('value'));
            retrieveAddressInfo(taxInfoForm, data, 'Tax');

            retrieveAdditionalInfo(additionalInfoForm, data);
        }

        if (isValidForm && isValidGeneralFrom && isValidShipmentFrom && isValidBillFrom && isValidTaxFrom) {
            var dataJS = ko.toJS(data);

            dataJS.RegisteredDate.setHours(0, 0, 0, 0);

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    isDataGridRefreshRequired = true;

                    commonPopupEdit.events.performCancel();
                    hideLoadingPanel();
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            var dc = $('.dx-popup-normal>.dx-dialog-content');
            if (dc.length == 0)
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }



    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Customer',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            name: 'Customer',
            dataField: '',
            label: { text: 'Customer' },
            editorOptions: {
                placeholder: 'Code/Name',
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: 'StatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'CustomerStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = collapsibleFilter.form().getEditor('TerritoryID').option('value');
            regionID = collapsibleFilter.form().getEditor('RegionID').option('value');
            areaID = collapsibleFilter.form().getEditor('AreaID').option('value');
            companyID = collapsibleFilter.form().getEditor('CompanyID').option('value');
            siteID = collapsibleFilter.form().getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // StatusID
        value = form.getEditor('StatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'StatusID', '=', value, 'and');

        var groupFilterExpr = [];
        value = form.getEditor('Customer').option('value');
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    
    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Customers.AddNewCustomer');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Customers.EditCustomer');
    commonGridView.dataGridOptions.editing.allowDeleting = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Customers.DeleteCustomer');
    
    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Code', Caption: 'Code', width: '135px',
        validationRules: [{ type: 'required' }],        
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vCustomers_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines data-grid-banded-header-border-top">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="4">' + 'Customer' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';                    
                } else {

                    tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Customer' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Address' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                }

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.Code());
            if (commonGridView.dataGridOptions.editing.allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.Code()).on('dxclick', function () {
                    openSelectedEditing(options.data.ID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'Name', width: '180px'
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'StatusName', caption: 'Status', width: '100px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Address1', caption: '', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Address2', caption: '', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Address3', caption: '', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'City', caption: 'City', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Category1', caption: 'Customer Type', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Category2', caption: 'Customer Group', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Category3', caption: 'Customer Location', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'StatusName', caption: 'Status', width: '100px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px', visible: !Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating ||
        commonGridView.dataGridOptions.editing.allowDeleting) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                if (commonGridView.dataGridOptions.editing.allowUpdating) {
                    commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                        openSelectedEditing(options.data.ID(), false);
                    }));
                    commands.append('&nbsp;');
                }

                if (commonGridView.dataGridOptions.editing.allowDeleting) {
                    commands.append($('<a class="dx-link">').text('Delete').on('dxclick', function () {
                        var dataGrid = commonGridView.dataGrid();
                        var dataSource = dataGrid.option('dataSource');
                        var data = options.data.toJS();
                        var selectedKey = data.ID;

                        dataSource.store().remove(selectedKey).done(function () {
                            dataGrid.refresh();
                        });
                    }));
                    commands.append('&nbsp;');
                }

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();
    commonPopupEdit.popupEditOptions.title = 'Customer';

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var customerInfoTabPanel = function () { return DXUtility.getDXInstance(null, '#vCustomers_infoTabPanel', 'dxTabPanel'); }
    var customerGeneralInfoForm = function () { return DXUtility.getDXInstance(null, '#vCustomers_generalInfoForm', 'dxForm'); }
    var customerShipmentInfoForm = function () { return DXUtility.getDXInstance(null, '#vCustomers_shipmentInfoForm', 'dxForm'); }
    var customerBillingInfoForm = function () { return DXUtility.getDXInstance(null, '#vCustomers_billingInfoForm', 'dxForm'); }
    var customerTaxInfoForm = function () { return DXUtility.getDXInstance(null, '#vCustomers_taxInfoForm', 'dxForm'); }
    var customerAdditionalInfoForm = function () { return DXUtility.getDXInstance(null, '#vCustomers_additionalInfoForm', 'dxForm'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = $('<div>');

        var tabPanel = $('<div id="vCustomers_infoTabPanel">').dxTabPanel({
            deferRendering: false,
            dataSource: [{
                'ID': 0,
                'Title': 'General Information'
            }, {
                'ID': 1,
                'Title': 'Shipment Information'
            }, {
                'ID': 2,
                'Title': 'Billing Information'
            }, {
                'ID': 3,
                'Title': 'Tax Information'
            }, {
                'ID': 4,
                'Title': 'Additional Information'
            }],
            onTitleRendered: function (e) {
                e.itemElement.empty();
                e.itemElement.append($('<span>').append(e.itemData.Title));
            },
            onItemRendered: function (e) {
                e.itemElement.empty();

                var container = $('<div style="padding: 12px 12px 12px 12px">');

                switch (e.itemData.ID) {
                    case 0: // General Information                        
                        container.append($('<div id="vCustomers_generalInfoForm">').dxForm({
                            deferRendering: false,
                            colCount: 3,
                            colSpan: 3,
                            showColonAfterLabel: false,
                            labelLocation: 'left',
                            items: [{
                                dataField: 'SalesmanID',
                                label: { text: 'Salesman' },
                                validationRules: [{ type: 'required' }],
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupSalesmanDataSource(
                                        (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]),
                                    displayExpr: 'Salesman',
                                    valueExpr: 'ID',
                                    searchEnabled: true,
                                    showClearButton: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'RegisteredDate',
                                label: { text: 'Registered Date' },
                                validationRules: [{ type: 'required' }],
                                editorType: 'dxDateBox',
                                editorOptions: {
                                    width: '100%',
                                    showClearButton: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'StatusID',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Status', location: 'left' },
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'CustomerStatus']),
                                    displayExpr: 'Name',
                                    valueExpr: 'Value_Int32',
                                    searchEnabled: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'TermOfPaymentID',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Term of Payment' },
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'CustomerTermOfPayment']),
                                    displayExpr: 'Name',
                                    valueExpr: 'Value_Int32',
                                    searchEnabled: true,
                                    showClearButton: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'CreditLimit',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Credit Limit' },
                                editorType: 'dxNumberBox',
                                editorOptions: {
                                    min: 0,
                                    max: 1000000000,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                itemType: 'empty',
                                colSpan: 1
                            }, {
                                dataField: 'PriceGroupID',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Price Group' },
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'ProductPriceGroup']),
                                    displayExpr: 'Name',
                                    valueExpr: 'Value_Int32',
                                    searchEnabled: true,
                                    showClearButton: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'DiscountGroupID',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Discount Group' },
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupDiscountGroupDataSource(),
                                    displayExpr: 'DiscountGroup',
                                    valueExpr: 'ID',
                                    searchEnabled: true,
                                    showClearButton: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                itemType: 'empty',
                                colSpan: 1
                            }, {
                                itemType: 'group',
                                caption: 'Categories',
                                cssClass: 'form-group-padding',
                                colCount: 2,
                                colSpan: 2,
                                items: [{
                                    dataField: 'Category1ID',
                                    validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category1') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category1Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    }
                                }, {
                                    dataField: 'Category2ID',
                                    validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category2') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category2Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category3ID',
                                    validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category3') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category3Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category4ID',
                                    validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category4') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category4Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category5ID',
                                    validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category5') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category5Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category6ID',
                                    //validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category6') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category6Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category7ID',
                                    //validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category7') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category7Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category8ID',
                                    //validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category8') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category8Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category9ID',
                                    //validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category9') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category9Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'Category10ID',
                                    //validationRules: [{ type: 'required' }],
                                    label: { text: getValueFromSystemParameter('Customer.Category10') },
                                    editorType: 'dxSelectBox',
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCustomerCategoryDataSource(['Group', '=', getValueFromSystemParameter('Customer.Category10Lookup')]),
                                        displayExpr: 'Category',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        showClearButton: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }]
                            }]
                        }));


                        break;
                    case 1: // Shipment Information
                        container.append($('<div id="vCustomers_shipmentInfoForm">').dxForm({
                            deferRendering: false,
                            colCount: 3,
                            colSpan: 3,
                            showColonAfterLabel: false,
                            labelLocation: 'left',
                            items: [{
                                dataField: 'Address1',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Address' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 100,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Address1(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Address1').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Address1').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Address2',
                                label: { text: ' ' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 100,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Address2(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Address2').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Address2').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Address3',
                                label: { text: ' ' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 100,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Address3(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Address3').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Address3').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'City',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'City' },
                                editorOptions: {
                                    maxLength: 50,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.City(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('City').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('City').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'StateProvince',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Province' },
                                editorOptions: {
                                    maxLength: 50,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.StateProvince(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('StateProvince').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('StateProvince').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'CountryID', width: '120px',
                                label: { text: 'Country' },
                                validationRules: [{ type: 'required' }],
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupCountryDataSource(null),
                                    displayExpr: 'Name',
                                    valueExpr: 'ID',
                                    searchEnabled: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.CountryID(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('CountryID').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('CountryID').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'ZipCode',
                                validationRules: [{ type: 'required' }, { type: 'numeric' }],
                                label: { text: 'Zip Code' },
                                editorOptions: {
                                    maxLength: 10,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.ZipCode(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('ZipCode').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('ZipCode').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Phone1',
                                validationRules: [{ type: 'required' }, { type: 'numeric' }],
                                label: { text: 'Phone 1' },
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Phone1(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Phone1').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Phone1').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'Phone2',
                                label: { text: 'Phone 2' },
                                validationRules: [{ type: 'numeric' }],
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Phone2(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Phone2').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Phone2').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Phone3',
                                label: { text: 'Phone 3' },
                                validationRules: [{ type: 'numeric' }],
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Phone3(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Phone3').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Phone3').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'Fax',
                                label: { text: 'Fax' },
                                validationRules: [{ type: 'numeric' }],
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Fax(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Fax').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Fax').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Email',
                                label: { text: 'Email' },
                                validationRules: [{ type: 'email' }],
                                colSpan: '2',
                                editorOptions: {
                                    maxLength: 256,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.Email(e.value);

                                        if (data.IsBillSameAsAddress())
                                            customerBillingInfoForm().getEditor('Email').option('value', e.value);

                                        if (data.IsTaxSameAsAddress())
                                            customerTaxInfoForm().getEditor('Email').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Longitude',
                                label: { text: 'Longitude' },
                                editorType: 'dxNumberBox',
                                editorOptions: {
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'Latitude',
                                label: { text: 'Latitude' },
                                editorType: 'dxNumberBox',
                                editorOptions: {
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                itemType: 'empty',
                            }]
                        }));
                        break;
                    case 2: // Billing Information
                        container.append($('<div id="vCustomers_billingInfoForm">').dxForm({
                            deferRendering: false,
                            colCount: 3,
                            colSpan: 3,
                            showColonAfterLabel: false,
                            labelLocation: 'left',
                            items: [{
                                dataField: 'IsBillSameAsAddress',
                                label: { text: 'Same as Shipment Address' },
                                colSpan: 3,
                                editorType: 'dxCheckBox',
                                editorOptions: {
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.IsBillSameAsAddress(e.value);

                                        setBillingInfo(data, true);
                                    }
                                }
                            }, {
                                dataField: 'Name',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Name' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 50,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillName(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Name').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Address1',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Address' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 100,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillAddress1(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Address1').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Address2',
                                label: { text: ' ' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 100,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillAddress2(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Address2').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Address3',
                                label: { text: ' ' },
                                colSpan: 2,
                                editorOptions: {
                                    maxLength: 100,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillAddress3(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Address3').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'City',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'City' },
                                editorOptions: {
                                    maxLength: 50,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillCity(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('City').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'StateProvince',
                                validationRules: [{ type: 'required' }],
                                label: { text: 'Province' },
                                editorOptions: {
                                    maxLength: 50,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillStateProvince(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('StateProvince').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'CountryID', caption: 'Country', width: '120px',
                                validationRules: [{ type: 'required' }],
                                editorType: 'dxSelectBox',
                                editorOptions: {
                                    dataSource: DataUtility.GetLookupCountryDataSource(null),
                                    displayExpr: 'Name',
                                    valueExpr: 'ID',
                                    searchEnabled: true,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillCountryID(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('CountryID').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'ZipCode',
                                validationRules: [{ type: 'required' }, { type: 'numeric' }],
                                label: { text: 'Zip Code' },
                                editorOptions: {
                                    maxLength: 10,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillZipCode(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('ZipCode').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Phone1',
                                validationRules: [{ type: 'required' }, { type: 'numeric' }],
                                label: { text: 'Phone 1' },
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillPhone1(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Phone1').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'Phone2',
                                label: { text: 'Phone 2' },
                                validationRules: [{ type: 'numeric' }],
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillPhone2(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Phone2').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Phone3',
                                label: { text: 'Phone 3' },
                                validationRules: [{ type: 'numeric' }],
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillPhone3(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Phone3').option('value', e.value);
                                    }
                                }
                            }, {
                                dataField: 'Fax',
                                label: { text: 'Fax' },
                                validationRules: [{ type: 'numeric' }],
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillFax(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Fax').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                            }, {
                                dataField: 'Email',
                                label: { text: 'Email' },
                                validationRules: [{ type: 'email' }],
                                editorOptions: {
                                    maxLength: 256,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.BillEmail(e.value);

                                        if (data.IsTaxSameAsBillAddress())
                                            customerTaxInfoForm().getEditor('Email').option('value', e.value);
                                    }
                                }
                            }, {
                                itemType: 'empty',
                                colSpan: 2,
                            }]
                        }));
                        break;
                    case 3: // Tax Information
                        container.append($('<div id="vCustomers_taxInfoForm">').dxForm({
                            deferRendering: false,
                            colCount: 3,
                            colSpan: 3,
                            showColonAfterLabel: false,
                            labelLocation: 'left',
                            items: [{
                                dataField: 'IsTaxNumberAvailable',
                                label: { text: 'Have Tax Number' },
                                editorType: 'dxCheckBox',
                                editorOptions: {
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                    onValueChanged: function (e) {
                                        var data = commonPopupEdit.popupEditData();
                                        data.IsTaxNumberAvailable(e.value);

                                        var taxInfoForm = customerTaxInfoForm();
                                        taxInfoForm.itemOption('TaxNumber', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.Name', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.Address1', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.City', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.StateProvince', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.CountryID', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.ZipCode', 'isRequired', e.value);
                                        taxInfoForm.itemOption('.Phone1', 'isRequired', e.value);

                                        if (!e.value) {
                                            data.TaxNumber(null);
                                            data.TaxSAPCode(null);
                                        }

                                        taxInfoForm.getEditor('TaxNumber').option('value', data.TaxNumber());
                                        taxInfoForm.getEditor('TaxSAPCode').option('value', data.TaxSAPCode());

                                        taxInfoForm.getEditor('TaxNumber').option('readOnly', !e.value);
                                        taxInfoForm.getEditor('TaxSAPCode').option('readOnly', !e.value);
                                        // added by Asep 16/8/16
                                        if (data.IsTaxSameAsAddress() || data.IsTaxSameAsBillAddress())
                                            setTaxInfo(data, true);
                                    }
                                }
                            }, {
                                dataField: 'TaxNumber',
                                label: { text: 'Tax Number' },
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                dataField: 'TaxSAPCode',
                                label: { text: 'Tax SAP Code' },
                                editorOptions: {
                                    maxLength: 20,
                                    onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                }
                            }, {
                                itemType: 'group',
                                caption: ' ',
                                cssClass: 'form-group-padding',
                                colCount: 3,
                                colSpan: 3,
                                items: [{
                                    dataField: 'IsTaxSameAsAddress',
                                    label: { text: 'Same as Shipment Address' },
                                    editorType: 'dxCheckBox',
                                    editorOptions: {
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.IsTaxSameAsAddress(e.value);

                                            var isSameAsBillAddress = customerTaxInfoForm().getEditor('IsTaxSameAsBillAddress');
                                            var isSameAsBillAddressValue = isSameAsBillAddress.option('value');
                                            if (e.value) {
                                                if (isSameAsBillAddressValue)
                                                    isSameAsBillAddress.option('value', false);
                                                                                                
                                                data.IsTaxSameAsBillAddress(!e.value);
                                                setTaxInfo(data, true);
                                            } else if (!isSameAsBillAddressValue)                                                
                                                setTaxInfo(data, true);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                    colSpan: 2
                                }, {
                                    dataField: 'IsTaxSameAsBillAddress',
                                    label: { text: 'Same as Billing Address' },
                                    editorType: 'dxCheckBox',
                                    editorOptions: {
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.IsTaxSameAsBillAddress(e.value);

                                            var isSameAsAddress = customerTaxInfoForm().getEditor('IsTaxSameAsAddress');
                                            var isSameAsAddressValue = isSameAsAddress.option('value');
                                            if (e.value) {                                                
                                                if (isSameAsAddressValue)
                                                    isSameAsAddress.option('value', false);
                                                                                                
                                                data.IsTaxSameAsAddress(!e.value);
                                                setTaxInfo(data, true);
                                            } else if (!isSameAsAddressValue)                                                
                                                setTaxInfo(data, true);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                    colSpan: 2
                                }, {
                                    dataField: 'Name',
                                    label: { text: 'Name' },
                                    validationRules: [{ type: 'required' }],
                                    colSpan: 2,
                                    editorOptions: {
                                        maxLength: 50,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxName(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'Address1',
                                    label: { text: 'Address' },
                                    validationRules: [{ type: 'required' }],
                                    colSpan: 2,
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxAddress1(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'Address2',
                                    label: { text: ' ' },
                                    colSpan: 2,
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxAddress2(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'Address3',
                                    label: { text: ' ' },
                                    colSpan: 2,
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxAddress3(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'City',
                                    label: { text: 'City' },
                                    validationRules: [{ type: 'required' }],
                                    editorOptions: {
                                        maxLength: 50,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxCity(e.value);
                                        }
                                    }
                                }, {
                                    dataField: 'StateProvince',
                                    label: { text: 'Province' },
                                    validationRules: [{ type: 'required' }],
                                    editorOptions: {
                                        maxLength: 50,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxStateProvince(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'CountryID', caption: 'Country', width: '120px',
                                    editorType: 'dxSelectBox',
                                    validationRules: [{ type: 'required' }],
                                    editorOptions: {
                                        dataSource: DataUtility.GetLookupCountryDataSource(null),
                                        displayExpr: 'Name',
                                        valueExpr: 'ID',
                                        searchEnabled: true,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxCountryID(e.value);
                                        }
                                    }
                                }, {
                                    dataField: 'ZipCode',
                                    label: { text: 'Zip Code' },
                                    validationRules: [{ type: 'required' }, { type: 'numeric' }],
                                    editorOptions: {
                                        maxLength: 10,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxZipCode(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'Phone1',
                                    validationRules: [{ type: 'required' }, { type: 'numeric' }],
                                    label: { text: 'Phone 1' },
                                    editorOptions: {
                                        maxLength: 20,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxPhone1(e.value);
                                        }
                                    }
                                }, {
                                    dataField: 'Phone2',
                                    label: { text: 'Phone 2' },
                                    validationRules: [{ type: 'numeric' }],
                                    editorOptions: {
                                        maxLength: 20,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxPhone2(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'Phone3',
                                    label: { text: 'Phone 3' },
                                    validationRules: [{ type: 'numeric' }],
                                    editorOptions: {
                                        maxLength: 20,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxPhone3(e.value);
                                        }
                                    }
                                }, {
                                    dataField: 'Fax',
                                    label: { text: 'Fax' },
                                    validationRules: [{ type: 'numeric' }],
                                    editorOptions: {
                                        maxLength: 20,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxFax(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }, {
                                    dataField: 'Email',
                                    label: { text: 'Email' },
                                    validationRules: [{ type: 'email' }],
                                    editorOptions: {
                                        maxLength: 256,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                                        onValueChanged: function (e) {
                                            var data = commonPopupEdit.popupEditData();
                                            data.TaxEmail(e.value);
                                        }
                                    }
                                }, {
                                    itemType: 'empty',
                                }]
                            }]
                        }));
                        break;
                    case 4: // Additional Information
                        container.append($('<div id="vCustomers_additionalInfoForm">').dxForm({
                            deferRendering: false,
                            colCount: 2,
                            showColonAfterLabel: false,
                            labelLocation: 'left',
                            items: [{
                                itemType: 'group',
                                cssClass: 'form-group-padding',
                                colCount: 2,
                                colSpan: 2,
                                items: [{
                                    dataField: 'AdditionalInfo1',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo1') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo2',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo2') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo3',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo3') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo4',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo4') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo5',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo5') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo6',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo6') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo7',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo7') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo8',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo8') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo9',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo9') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }, {
                                    dataField: 'AdditionalInfo10',
                                    label: { text: getValueFromSystemParameter('Customer.AdditionalInfo10') },
                                    editorOptions: {
                                        maxLength: 100,
                                        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
                                    }
                                }]
                            }]
                        }));
                        break;
                }

                e.itemElement.append(container);
            }
        });

        content.append(tabPanel);

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Site',
                         ['Area', 'Region', 'Territory'],
                         []);

                    if (e.selectedItem) {
                        commonPopupEdit.form().getEditor('Company').option('value', e.selectedItem.Company());
                        commonPopupEdit.form().getEditor('Code').option('value', previewCustomerCode(e.selectedItem.Code()));
                    } else if (e.previousValue != null)
                        commonPopupEdit.form().getEditor('Company').option('value', null);

                    updateSiteChildEditor(commonPopupEdit.form(), e.value);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Customer',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'Code',
            //validationRules: [{ type: 'required' }],

            label: { text: 'Code' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
            }
        }, {
            dataField: 'Name',
            validationRules: [{ type: 'required' }],
            label: { text: 'Name' },
            colSpan: 3,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var data = commonPopupEdit.popupEditData();
                    data.Name(e.value);

                    if (data.IsBillSameAsAddress())
                        customerBillingInfoForm().getEditor('Name').option('value', e.value);

                    if (data.IsTaxSameAsAddress())
                        customerTaxInfoForm().getEditor('Name').option('value', e.value);
                }
            }
        }, {
            itemType: 'empty'
        }]
    }];

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing();
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: '/Images/customer_32px.png',

        dataSource_vDiscountGroup: dataSource_vDiscountGroup,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        customerInfoTabPanel: customerInfoTabPanel,
        customerGeneralInfoForm: customerGeneralInfoForm,
        customerShipmentInfoForm: customerShipmentInfoForm,
        customerBillingInfoForm: customerBillingInfoForm,
        customerTaxInfoForm: customerTaxInfoForm,
        customerAdditionalInfoForm: customerAdditionalInfoForm
    };
};

Dismoyo_Ciptoning_Client.vCustomerCategories = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var parentID = -1;

    function handlevCustomerCategoriesModification() { shouldReload = true; }

    function checkContainer() {
        if ($('#vCustomerCategories_commonGridView').is(':visible')) {
            $('#vCustomerCategories_viewContent').layout({
                name: 'vCustomerCategoriesViewContent',
                north: {
                    paneSelector: '#vCustomerCategories_viewContentHeader',
                    resizable: false,
                    spacing_open: 0,
                    spacing_closed: 0
                },
                center: {
                    paneSelector: '#vCustomerCategories_viewSubContent',
                    onresize: $.layout.callbacks.resizeTabLayout,
                    children: {
                        //north: {
                        //    paneSelector: '#vCustomerCategories_collapsibleFilter',
                        //    resizable: false,
                        //    spacing_open: 0,
                        //    spacing_closed: 0
                        //},
                        west: {
                            paneSelector: '#vCustomerCategories_commonTreeView',
                            width: '300px'
                        },
                        center: {
                            paneSelector: '#vCustomerCategories_commonGridView'
                        }
                    }
                }
            });

            refreshTreeView();
        }
        else
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        dataSource.filter(['ParentID', '=', parentID]);

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        } else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vCustomerCategories.off('modified', handlevCustomerCategoriesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vCustomerCategories,        
        map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerCategoryViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vCustomerCategories.on('modified', handlevCustomerCategoriesModification);



    var dataSource_vCustomerCategory = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vCustomerCategories,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerCategoryViewModel(item); }
    });

    function refreshTreeView() {
        commonTreeView.showLoadingPanel();

        commonTreeView.treeView().option('dataSource', null);
        dataSource_vCustomerCategory.load()
            .done(function (result) {
                commonTreeView.treeView().option('dataSource', dataSource_vCustomerCategory);
                commonTreeView.hideLoadingPanel();
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load data.'), 'Load Failed');
                commonTreeView.hideLoadingPanel();
            });
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'Category',
        dataField: '',
        label: { text: 'Category' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];

    

    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // CustomerCategory
        value = collapsibleFilter.form().getEditor('Category').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonTreeView
    // ------------------------------------------------------------------------------------------------
    var commonTreeView = new Dismoyo_Ciptoning_Client.CommonTreeView();
    commonTreeView.treeViewOptions.dataStructure = 'plain';
    commonTreeView.treeViewOptions.keyExpr = 'ID';
    commonTreeView.treeViewOptions.parentIdExpr = 'ParentID';
    commonTreeView.treeViewOptions.displayExpr = 'Name';
    
    commonTreeView.loadingPanelOptions.position = { of: '#vCustomerCategories_commonTreeView' };

    commonTreeView.treeViewOptions.itemTemplate = function (itemData, itemIndex, itemElement) {
        return '<div/><img src="Images/file_32px.png" class="dx-icon"><b>' +
            HtmlUtility.htmlEncode(DXUtility.getValue(itemData, 'Group')) + ':</b> ' +
            HtmlUtility.htmlEncode(DXUtility.getValue(itemData, 'Name')) + '</div>';
    };

    
    
    // ------------------------------------------------------------------------------------------------
    // Event handler when tree view item is clicked.
    // ------------------------------------------------------------------------------------------------
    commonTreeView.events.itemClick = function (e) {
        parentID = DXUtility.getValue(e.itemData, 'ID');
        commonGridView.newRow().option('disabled',
            !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('CustomerCategories.AddNewCustomerCategory'));

        var dataGrid = commonGridView.dataGrid();

        dataGrid.clearFilter();
        dataGrid.filter(['ParentID', '=', parentID]);
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = true;
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('CustomerCategories.EditCustomerCategory');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('CustomerCategories.DeleteCustomerCategory');

    commonGridView.dataGridOptions.onInitNewRow = function (info) {
        info.data.ParentID = parentID;
    };

    commonGridView.dataGridOptions.onEditorPreparing = function (info) {
        if (info.parentType == 'data') {
            if (info.row && info.row.inserted) {
                switch (info.dataField) {
                    case 'ParentID':
                        info.editorOptions.value = parentID;
                        break;
                }
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Code', caption: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vCustomerCategories_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Category' + '</td>';
                //tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', width: '180px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'ParentID', width: '70px', visible: false
    }, {
        dataField: 'Group', width: '140px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    
    
    // ------------------------------------------------------------------------------------------------
    // Event handler when grid view row is added/updated/removed.
    // ------------------------------------------------------------------------------------------------
    commonGridView.events.rowInserted = function (info) {
        refreshTreeView();
    };

    commonGridView.events.rowUpdated = function (info) {
        refreshTreeView();
    };

    commonGridView.events.rowRemoved = function (info) {
        refreshTreeView();
    };

    commonGridView.events.rowsRemoved = function () {
        refreshTreeView();
    };





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/territory_32px.png',

        commonTreeView: commonTreeView,
        
        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vCustomerMasterReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function handlevCustomerMasterReportsModification() { shouldReload = true; }

    var pane;
    var _reportDateFrom = null;
    var _reportDateTo = null;
    
    function checkContainer() {
        pane = CommonUtility.configureCommonIFrameLayout('vCustomerMasterReports');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            var form = collapsibleFilter.form();
            form.getEditor('ReportPeriod').option('value', 2);
            form.getEditor('ReportDateFrom').option('value', DateTimeUtility.getFirstDayOfMonth(new Date()));
        }
    }

    function handleViewShowing() {
        checkContainer();

        isReady.resolve();
    }

    function refreshIFrame(filter) {
        var iframe = commonIFrame.iframe();

        commonIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.CustomerMasterReport.url(filter));
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Customer Master Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'ReportPeriod',
            label: { text: 'Period' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Daily' },
                    { ID: 2, Name: 'Monthly' },
                    { ID: 9, Name: 'All' },
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportPeriodValueChanged(e, form, true);
                    _reportDateFrom = null;
                    _reportDateTo = null;
                }
            }
        }, {
            dataField: 'ReportDateFrom',
            label: { text: 'Report Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                min: new Date(1900, 0, 1),
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    _reportDateFrom = e.value;
                    if (form.itemOption('CustomerMasterReports.ReportDateTo').visible) {
                        CommonUtility.reportDateFromValueChanged(e, form);

                        _reportDateTo = form.getEditor('ReportDateTo').option('value');                        
                    } else
                        _reportDateTo = (e.value) ? new Date(e.value.getFullYear(), e.value.getMonth() + 1, 0) : null;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportDateTo',
            label: { text: 'Report Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportDateToValueChanged(e, form);

                    _reportDateFrom = form.getEditor('ReportDateFrom').option('value');
                    _reportDateTo = e.value;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'StatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'ReportCustomerStatus']),                    
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var form = collapsibleFilter.form();

        var ctlReportDateFrom = form.getEditor('ReportDateFrom');
        if (ctlReportDateFrom && ctlReportDateFrom.option('visible')) {
            if ((_reportDateFrom == null) || (_reportDateTo == null)) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Report Date/Month.'), 'Search Failed');
                return;
            }

            if ((_reportDateFrom.getFullYear() != _reportDateTo.getFullYear()) ||
                (_reportDateFrom.getMonth() != _reportDateTo.getMonth())) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Report Date From and To must be in the same month.'),
                    'Search Failed');
                return;
            }
        }

        var filterExpr = [];
        var value;

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID        
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // StatusID
        value = form.getEditor('StatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'StatusID', '=', value, 'and');

        // ReportDateFrom
        value = _reportDateFrom;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateFrom', '>=', value, 'and');

        // ReportDateTo
        value = _reportDateTo;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateTo', '<=', value, 'and');

        refreshIFrame(filterExpr);
    };

    // ------------------------------------------------------------------------------------------------
    // Perform clear search criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performClear = function () {
        var form = collapsibleFilter.form();

        form.getEditor('ReportDateFrom').option('value', null);
        if (form.itemOption('CustomerMasterReports.ReportDateTo').visible)
            form.getEditor('ReportDateTo').option('value', null);

        _reportDateFrom = null;
        _reportDateTo = null;
    }





    // ------------------------------------------------------------------------------------------------
    // commonIFrame
    // ------------------------------------------------------------------------------------------------
    var commonIFrame = new Dismoyo_Ciptoning_Client.CommonIFrame();





    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/customer_master_report_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonIFrame: commonIFrame
    };
};

Dismoyo_Ciptoning_Client.vDailySalesmanReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function handlevDailySalesmanReportsModification() { shouldReload = true; }

    var pane;
    
    function checkContainer() {
        pane = CommonUtility.configureCommonIFrameLayout('vDailySalesmanReports');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            var form = collapsibleFilter.form();
            form.getEditor('ReportDate').option('value', DateTimeUtility.getFirstTimeOfDay(new Date()));
        }
    }

    function handleViewShowing() {
        checkContainer();
                
        isReady.resolve();
    }

    function refreshIFrame(filter) {
        var iframe = commonIFrame.iframe();

        commonIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.DailySalesmanReport.url(filter));
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Daily Salesman Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'ReportDate',
            label: { text: 'Report Date' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                formatString: 'MM/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],                
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var form = collapsibleFilter.form();

        if ((form.getEditor('ReportDate').option('value') == null) ||
            (form.getEditor('SalesmanID').option('value') == null)) {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Report Date and Salesman.'), 'Search Failed');
            return;
        }

        var filterExpr = [];
        var value;

        // ReportDateFrom & ReportDateTo
        value = form.getEditor('ReportDate').option('value');
        DXUtility.addFilterExpression(filterExpr, 'ReportDateFrom', '>=', value, 'and');
        DXUtility.addFilterExpression(filterExpr, 'ReportDateTo', '<=', value, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        refreshIFrame(filterExpr);
    };





    // ------------------------------------------------------------------------------------------------
    // commonIFrame
    // ------------------------------------------------------------------------------------------------
    var commonIFrame = new Dismoyo_Ciptoning_Client.CommonIFrame();





    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/daily_salesman_report_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonIFrame: commonIFrame
    };
};

Dismoyo_Ciptoning_Client.vDailySalesReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function handlevDailySalesReportsModification() { shouldReload = true; }

    var pane;
    var _reportDateFrom = null;
    var _reportDateTo = null;

    function checkContainer() {
        pane = CommonUtility.configureCommonIFrameLayout('vDailySalesReports');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            var form = collapsibleFilter.form();
            form.getEditor('ReportPeriod').option('value', 2);
            form.getEditor('ReportDateFrom').option('value', DateTimeUtility.getFirstDayOfMonth(new Date()));
        }
    }

    function handleViewShowing() {
        checkContainer();

        isReady.resolve();
    }

    function refreshIFrame(filter) {
        var iframe = commonIFrame.iframe();

        commonIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.DailySalesReport.url(filter));
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Daily Sales Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'ReportPeriod',
            label: { text: 'Period' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Daily' },
                    { ID: 2, Name: 'Monthly' }
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportPeriodValueChanged(e, form, true);
                    _reportDateFrom = null;
                    _reportDateTo = null;
                }
            }
        }, {
            dataField: 'ReportDateFrom',
            label: { text: 'Report Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                min: new Date(2016, 6, 1),
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    _reportDateFrom = e.value;
                    if (form.itemOption('DailySalesReports.ReportDateTo').visible) {
                        CommonUtility.reportDateFromValueChanged(e, form);

                        _reportDateTo = form.getEditor('ReportDateTo').option('value');
                    } else
                        _reportDateTo = (e.value) ? new Date(e.value.getFullYear(), e.value.getMonth() + 1, 0) : null;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportDateTo',
            label: { text: 'Report Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportDateToValueChanged(e, form);

                    _reportDateFrom = form.getEditor('ReportDateFrom').option('value');
                    _reportDateTo = e.value;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var form = collapsibleFilter.form();

        var ctlReportDateFrom = form.getEditor('ReportDateFrom');
        if (ctlReportDateFrom && ctlReportDateFrom.option('visible')) {
            if ((_reportDateFrom == null) || (_reportDateTo == null)) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Report Date/Month.'), 'Search Failed');
                return;
            }

            if ((_reportDateFrom.getFullYear() != _reportDateTo.getFullYear()) ||
                (_reportDateFrom.getMonth() != _reportDateTo.getMonth())) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Report Date From and To must be in the same month.'),
                    'Search Failed');
                return;
            }
        }

        var filterExpr = [];
        var value;

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID        
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // ReportDateFrom
        value = _reportDateFrom;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateFrom', '>=', value, 'and');

        // ReportDateTo
        value = _reportDateTo;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateTo', '<=', value, 'and');

        refreshIFrame(filterExpr);
    };

    // ------------------------------------------------------------------------------------------------
    // Perform clear search criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performClear = function () {
        var form = collapsibleFilter.form();

        form.getEditor('ReportDateFrom').option('value', null);
        if (form.itemOption('DailySalesReports.ReportDateTo').visible)
            form.getEditor('ReportDateTo').option('value', null);

        _reportDateFrom = null;
        _reportDateTo = null;
    }





    // ------------------------------------------------------------------------------------------------
    // commonIFrame
    // ------------------------------------------------------------------------------------------------
    var commonIFrame = new Dismoyo_Ciptoning_Client.CommonIFrame();





    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/daily_sales_report_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonIFrame: commonIFrame
    };
};

var vDiscountGroupsViewInstance;

Dismoyo_Ciptoning_Client.vDiscountGroups = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;

    function handlevDiscountGroupsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vDiscountGroups');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        vDiscountGroupsViewInstance = this;

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vDiscountGroups.off('modified', handlevDiscountGroupsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vDiscountGroups,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountGroupViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vDiscountGroups.on('modified', handlevDiscountGroupsModification);



    var dataSource_vDiscountStrata = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vDiscountStratas,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountStrataViewModel(item); }
    });

    var dataSource_vProduct = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vProducts,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
    });



    function createDiscountGroupProductsArrayDataSource(products) {
        return new DevExpress.data.DataSource({
            store: {
                type: 'array',
                key: 'ProductID',
                data: ko.toJS(products)
            },
            map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountGroupProductViewModel(item); }
        });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vDiscountGroupViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Discount Group');
        commonPopupEdit.popupEditOptions.editingKey = data.ID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);
        
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);
        
        if (newData) {
            data.StatusID(1);
        }

        // Set editor values
        form.getEditor('Code').option('value', data.Code());
        form.getEditor('Name').option('value', data.Name());
        form.getEditor('Description').option('value', data.Description());
        
        form.getEditor('Code').option('readOnly', !newData);

        if (newData) {
            DXUtility.resetFormValidation(form);
        }

        form.getEditor('StatusID').option('value', data.StatusID());

        // Set grid datasource for products
        var productDataGrid = discountGroupProductDataGrid();
        productDataGrid.cancelEditData();
        productDataGrid.option('dataSource',
            createDiscountGroupProductsArrayDataSource(data.ChildProducts()));
    }

    function saveEditing() {
        showLoadingPanel();

        var isValid = commonPopupEdit.form().validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var productsDataSource = discountGroupProductDataGrid().option('dataSource');
        var products = [];
        for (var i = 0; i < productsDataSource.store()._array.length; i++)
            products.push(new Dismoyo_Ciptoning_Client.vDiscountGroupProductViewModel(productsDataSource.store()._array[i]));

        if (isValid) {
            if (products.length == 0) {
                errorMsg = 'Please specify at least one product discount data.';
                isValid = false;
            }
        }

        if (isValid) {
            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            data.Code(form.getEditor('Code').option('value'));
            data.Name(form.getEditor('Name').option('value'));
            data.Description(form.getEditor('Description').option('value'));
            data.StatusID(form.getEditor('StatusID').option('value'));

            data.ChildProducts(products);
            var dataJS = ko.toJS(data);
            dataSource.store().insert(dataJS)
                .done(function (result) {
                    hideLoadingPanel();

                    commonPopupEdit.popupEditOptions.visible(false);
                    dataGrid.refresh();
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'DiscountGroup',
        dataField: '',
        label: { text: 'Discount Group' },
        editorOptions: {
            placeholder: 'Code/Name/Description',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        commonGridView.dataGrid().clearFilter();

        var filterExpr = [];
        var value;

        // DiscountGroup
        value = collapsibleFilter.form().getEditor('DiscountGroup').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Description', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            commonGridView.dataGrid().filter(filterExpr);
        else
            commonGridView.dataGrid().refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Code', caption: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            commands.append($('<a class="dx-link">').text(options.data.Code()).on('dxclick', function () {
                Dismoyo_Ciptoning_Client.DB.vDiscountGroups.byKey(
                    options.data.ID(), { expand: ['ChildProducts'] })
                    .done(function (result) {
                        var data = new Dismoyo_Ciptoning_Client.vDiscountGroupViewModel(result);
                        openEditing(data);
                    });
            }));
            commands.append('&nbsp;');

            container.append(commands);
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vDiscountGroups_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Discount Group' + '</td>'
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', caption: 'Name', width: '180px'
    }, {
        dataField: 'Description', caption: 'Description', width: '250px'
    }, {
        dataField: 'StatusName', caption: 'Status', width: '100px'
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        alignment: 'center',
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: center;">');

            commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                Dismoyo_Ciptoning_Client.DB.vDiscountGroups.byKey(
                    options.data.ID(), { expand: ['ChildProducts'] })
                    .done(function (result) {
                        var data = new Dismoyo_Ciptoning_Client.vDiscountGroupViewModel(result);
                        openEditing(data);
                    });
            }));
            commands.append('&nbsp;');

            commands.append($('<a class="dx-link">').text('Delete').on('dxclick', function () {
                commonGridView.dataGrid().deleteRow(options.rowIndex);
            }));
            commands.append('&nbsp;');

            container.append(commands);
        }
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var discountGroupProductDataGrid = function () { return DXUtility.getDXInstance(null, '#vDiscountGroups_discountGroupProductDataGrid', 'dxDataGrid'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Product Discounts'));

        content.append($('<div id="vDiscountGroups_discountGroupProductDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],            
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: true,
            columnAutoWidth: false,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: true,
                allowUpdating: true,
                allowDeleting: true,
            },
            onEditorPreparing: function (e) {
                if ((e.parentType == 'dataRow') &&
                    ((e.dataField == 'DiscountStrata1ID') ||
                    (e.dataField == 'DiscountStrata2ID') ||
                    (e.dataField == 'DiscountStrata3ID') ||
                    (e.dataField == 'DiscountStrata4ID') ||
                    (e.dataField == 'DiscountStrata5ID'))) {
                    e.editorElement.dxLookup({
                        dataSource: DataUtility.GetLookupDiscountStrataDataSource(null),
                        displayExpr: 'DiscountStrata',
                        valueExpr: 'ID',
                        searchExpr: ['Code', 'Name'],
                        searchPlaceholder: 'Code/Name',
                        popupWidth: '482px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        showClearButton: true,
                        value: e.value,
                        onContentReady: function (e) {
                            var id = 'vDiscountGroups_discountStrataIDLookup';
                            var colHeader = e.element.find('#' + id);
                            if (colHeader.length == 0) {
                                var div = '<div id="' + id + '" class="dx-datagrid datagrid-columnheader">';
                                div += '       <table class="dx-datagrid-headers dx-datagrid-nowrap">';
                                div += '           <colgroup>';
                                div += '               <col style="width: 200px;">';
                                div += '               <col style="width: 140px;">';
                                div += '               <col style="width: 140px;">';
                                div += '           </colgroup><tbody>';
                                div += '           <tr class="dx-row dx-header-row dx-column-lines">';
                                div += '               <td class="dx-datagrid-action" style="border-left-style: none !important;">';
                                div += '' + '</td>';
                                div += '               <td class="dx-datagrid-action" style="text-align: left;" colSpan="2">';
                                div += 'Valid Date' + '</td>';
                                div += '</tr>';

                                div += '           <tr class="dx-row dx-header-row dx-column-lines">';
                                div += '               <td class="dx-datagrid-action" style="border-left-style: none !important;">';
                                div += 'Discount Strata' + '</td>';
                                div += '               <td class="dx-datagrid-action" style="text-align: center; border-top: 1px solid #D3D3D3;">';
                                div += 'From' + '</td>';
                                div += '               <td class="dx-datagrid-action" style="text-align: center; border-top: 1px solid #D3D3D3;">';
                                div += 'To' + '</td>';
                                div += '</tr></tbody></table></div>';

                                var list = e.element.find('.dx-list');
                                list.attr('style', 'top: 59px !important');
                                list.before($(div));
                            }
                        },
                        itemTemplate: function (data, index, element) {
                            var title = '';
                            var div = '<div class="dx-datagrid dx-datagrid-rowsview dx-datagrid-nowrap" style="background-color: inherit;">';
                            div += '       <table class="dx-datagrid-table dx-datagrid-table-fixed" style="border-collapse: initial !important;">';
                            div += '           <colgroup>';
                            div += '               <col style="width: 200px;">';
                            div += '               <col style="width: 140px;">';
                            div += '               <col style="width: 140px;">';
                            div += '           </colgroup><tbody>';
                            div += '           <tr class="dx-row dx-data-row dx-column-lines">';
                            div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.DiscountStrata()) + '"';
                            div += '                   style="text-align: left; border-left-style: none !important;">';
                            div += HtmlUtility.htmlEncode(data.DiscountStrata()) + '</td>';

                            title = HtmlUtility.htmlEncode(DateTimeUtility.convertToLocal(data.ValidDateFrom()).toISOString().substring(0, 10));
                            div += '                <td class="dx-datagrid-action" title="' + title + '" style="text-align: center;">';
                            div += title + '</td>';

                            title = HtmlUtility.htmlEncode(DateTimeUtility.convertToLocal(data.ValidDateTo()).toISOString().substring(0, 10));
                            div += '                <td class="dx-datagrid-action" title="' + title + '" style="text-align: center;">';
                            div += title + '</td>';

                            div += '</tr></tbody></table></div>';

                            element.attr('style', 'padding: 0px');

                            return div;
                        },
                        onValueChanged: function (ea) {
                            e.setValue(ea.value);
                        }
                    });

                    e.cancel = true;
                }

                if ((e.parentType == 'dataRow') && (e.dataField == 'ProductID')) {
                    if (!e.row.inserted) {
                        e.allowEditing = false;
                        e.editorElement.append($('<td style="padding: 5px;">').text(e.row.cells[0].text));
                        e.cancel = true;
                    }
                }
            },
            onDataErrorOccurred: function (e) {
                debugger;
                var rIndex = e.component._controllers.editing._editRowIndex;
                var errorValue = e.component._controllers.data._items[rIndex].cells[1].text;
                if (e.error.__id == "E4008")
                    e.error.message = "Product value '" + errorValue + "' is already exist.";
                //else if (e.error.__id == "E4017")
                //    e.error = null;
            },
            onRowInserted: function (info) {
                $(".dx-error-row").remove();
            },
            columns: [{
                dataField: 'DiscountGroupID', visible: false
            }, {
                dataField: 'ProductID', caption: 'Product', width: '300px',
                validationRules: [{ type: 'required' }],
                lookup: {
                    dataSource: dataSource_vProduct.store(),
                    displayExpr: 'Product',
                    valueExpr: 'ID',
                    allowClearing: true
                },
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(vDiscountGroupsViewInstance.discountGroupProductDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + ' ' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colspan="5">' + 'Discount Strata' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'DiscountStrata1ID', caption: '1', width: '200px',
                validationRules: [{ type: 'required' }],
                lookup: {
                    dataSource: DataUtility.vDiscountStratas.dataSource(null),
                    displayExpr: 'DiscountStrata',
                    valueExpr: 'ID',
                    allowClearing: true
                }
            }, {
                dataField: 'DiscountStrata2ID', caption: '2', width: '200px',
                lookup: {
                    dataSource: DataUtility.vDiscountStratas.dataSource(null),
                    displayExpr: 'DiscountStrata',
                    valueExpr: 'ID',
                    allowClearing: true
                }
            }, {
                dataField: 'DiscountStrata3ID', caption: '3', width: '200px',
                lookup: {
                    dataSource: DataUtility.vDiscountStratas.dataSource(null),
                    displayExpr: 'DiscountStrata',
                    valueExpr: 'ID',
                    allowClearing: true
                }
            }, {
                dataField: 'DiscountStrata4ID', caption: '4', width: '200px',
                lookup: {
                    dataSource: DataUtility.vDiscountStratas.dataSource(null),
                    displayExpr: 'DiscountStrata',
                    valueExpr: 'ID',
                    allowClearing: true
                }
            }, {
                dataField: 'DiscountStrata5ID', caption: '5', width: '200px',
                lookup: {
                    dataSource: DataUtility.vDiscountStratas.dataSource(null),
                    displayExpr: 'DiscountStrata',
                    valueExpr: 'ID',
                    allowClearing: true
                }
            }]
        }));

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing();
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Discount Group',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'Code',
            validationRules: [{ type: 'required' }],
            label: { text: 'Code' },
            colSpan: 2,
            editorOptions: {
                maxLength: 10,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }                
            }
        }, {
            dataField: 'Name',
            validationRules: [{ type: 'required' }],
            label: { text: 'Name' },
            colSpan: 3,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'Description',
            validationRules: [{ type: 'required' }],
            label: { text: 'Description' },
            colSpan: 3,
            editorOptions: {
                maxLength: 200,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'StatusID',
            label: { text: 'Status' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.vSystemLookups.dataSource(['Group', '=', 'DiscountGroupStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty'
        }]
    }];



    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/discount_group_32px.png',

        dataSource_vDiscountStrata: dataSource_vDiscountStrata,
        dataSource_vProduct: dataSource_vProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,

        discountGroupProductDataGrid: discountGroupProductDataGrid
    };
};

var vDiscountStratasViewInstance;

Dismoyo_Ciptoning_Client.vDiscountStratas = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevDiscountStratasModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vDiscountStratas');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        vDiscountStratasViewInstance = this;

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vDiscountStratas.off('modified', handlevDiscountStratasModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vDiscountStratas,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountStrataViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vDiscountStratas.on('modified', handlevDiscountStratasModification);



    var dataSource_vDiscountStrataDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vDiscountStrataDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountStrataDetailsViewModel(item); }
    });



    function createDiscountStrataDetailsArrayDataSource(details) {
        return new DevExpress.data.DataSource({
            store: {
                type: 'array',
                key: 'ID',
                data: ko.toJS(details)
            },
            map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountStrataDetailsViewModel(item); }
        });
    }

    function getDiscountStrataDetailsTempID(items) {
        var id = -1;
        for (var i = 0; i < items.length; i++) {
            var existingID = DXUtility.getValue(items[i], 'ID');
            if (existingID <= id)
                id = existingID - 1;
        };

        return id;
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vDiscountStrataViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Discount Strata');
        commonPopupEdit.popupEditOptions.editingKey = data.ID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        if (newData) {
            data.StatusID(1);
        }

        // Set editor values
        form.getEditor('Code').option('value', data.Code());
        form.getEditor('Name').option('value', data.Name());
        form.getEditor('ValidDateFrom').option('value', data.ValidDateFrom());
        form.getEditor('ValidDateTo').option('value', data.ValidDateTo());
        
        form.getEditor('Code').option('readOnly', !newData);

        if (newData) {
            DXUtility.resetFormValidation(form);
        }

        form.getEditor('StatusID').option('value', data.StatusID());

        // Set grid datasource for details
        var detailsDataGrid = discountStrataDetailsDataGrid();
        detailsDataGrid.cancelEditData();
        detailsDataGrid.option('dataSource',
            createDiscountStrataDetailsArrayDataSource(data.ChildDetails()));
    }

    function saveEditing() {
        showLoadingPanel();

        var isValid = commonPopupEdit.form().validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var detailsDataSource = discountStrataDetailsDataGrid().option('dataSource');
        var details = [];
        for (var i = 0; i < detailsDataSource.store()._array.length; i++)
            details.push(new Dismoyo_Ciptoning_Client.vDiscountStrataDetailsViewModel(detailsDataSource.store()._array[i]));

        if (isValid) {
            if (details.length == 0) {
                errorMsg = 'Please specify at least one strata details data.';
                isValid = false;
            }
        }

        if (isValid) {
            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            data.Code(form.getEditor('Code').option('value'));
            data.Name(form.getEditor('Name').option('value'));
            data.ValidDateFrom(form.getEditor('ValidDateFrom').option('value'));
            data.ValidDateTo(form.getEditor('ValidDateTo').option('value'));
            data.StatusID(form.getEditor('StatusID').option('value'));

            data.ChildDetails(details);
            var dataJS = ko.toJS(data);
            dataSource.store().insert(dataJS)
                .done(function (result) {
                    hideLoadingPanel();

                    commonPopupEdit.popupEditOptions.visible(false);
                    dataGrid.refresh();
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'DiscountStrata',
        dataField: '',
        label: { text: 'Discount Strata' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = vDiscountStratasViewInstance.commonGridView.dataGrid();
        var form = vDiscountStratasViewInstance.collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // Product
        value = collapsibleFilter.form().getEditor('DiscountStrata').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Code', width: '70px',
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            commands.append($('<a class="dx-link">').text(options.data.Code()).on('dxclick', function () {
                Dismoyo_Ciptoning_Client.DB.vDiscountStratas.byKey(
                    options.data.ID(), { expand: ['ChildDetails'] })
                    .done(function (result) {
                        var data = new Dismoyo_Ciptoning_Client.vDiscountStrataViewModel(result);
                        openEditing(data);
                    });
            }));
            commands.append('&nbsp;');

            container.append(commands);
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vDiscountStratas_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Discount Strata' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Validity Period' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', caption: 'Name', width: '180px'
    }, {
        dataField: 'ValidDateFrom', caption: 'From', width: '140px',
        dataType: "date"
    }, {
        dataField: 'ValidDateTo', caption: 'To', width: '140px',
        dataType: "date"
    }, {
        dataField: 'StatusName', caption: 'Status', width: '100px'
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        width: 100,
        alignment: 'center',
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: center;">');

            commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                Dismoyo_Ciptoning_Client.DB.vDiscountStratas.byKey(
                    options.data.ID(), { expand: ['ChildDetails'] })
                    .done(function (result) {
                        var data = new Dismoyo_Ciptoning_Client.vDiscountStrataViewModel(result);
                        openEditing(data);
                    });
            }));
            commands.append('&nbsp;');

            commands.append($('<a class="dx-link">').text('Delete').on('dxclick', function () {
                commonGridView.dataGrid().deleteRow(options.rowIndex);
            }));
            commands.append('&nbsp;');

            container.append(commands);
        }
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var discountStrataDetailsDataGrid = function () { return DXUtility.getDXInstance(null, '#vDiscountStratas_discountStrataDetailsDataGrid', 'dxDataGrid'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        var maxRange = 1000;
        var minRange = 0;
        var maxValue = 0;

        content.append(DXUtility.createFormItemLabelTop('Strata Details'));

        content.append($('<div id="vDiscountStratas_discountStrataDetailsDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            height: '200px',
            editing: {
                editMode: 'row',
                allowAdding: true,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                var dataSource = info.component.option('dataSource');

                info.data.ID = getDiscountStrataDetailsTempID(dataSource.items());
            },
            onRowValidating: function (e) {
                var removeErrorMessage = function () {
                    $(".dx-error-row").remove();
                }

                removeErrorMessage();

                var showErrorMessage = function (message) {
                    removeErrorMessage();
                    var table = $(".dx-datagrid-table.dx-datagrid-table-fixed", "#vDiscountStratas_discountStrataDetailsDataGrid").first();
                    var trMessage = "<tr class='dx-error-row'><td colspan='" + $("col", $(table).first()).length + "' role='presentation'><div class='dx-closebutton dx-datagrid-action' onclick='javascript: $(this).parent().parent().remove();'></div><div class='dx-error-message'>";
                    trMessage += message;
                    trMessage += "</div></td></tr>";
                    $("tbody", $(table).first()).append(trMessage);
                };

                if (e.brokenRules.length > 0) {
                    showErrorMessage(e.brokenRules[0].message);
                    valid = false;
                    return;
                }

                var discountGrid = discountStrataDetailsDataGrid();
                var items = discountGrid.option("dataSource").items();

                //if (e.oldData == undefined) {
                //    // if insert new row
                //    e.oldData = { ID: function () { return -1; } };
                //}

                var compare2Obj = function (a, b) {
                    if (a === undefined)
                        return false;

                    return a.ID() == b.ID()
                        && a.Maximum() == b.Maximum()
                        && a.Minimum() == b.Minimum()
                        && a.DiscountPercentage() == b.DiscountPercentage();
                }
                var valid = true;
                for (var i in items) {
                    if (!compare2Obj(e.oldData, items[i])) {
                        if ((e.newData.Minimum >= (typeof items[i].Minimum == 'function' ? items[i].Minimum() : items[i].Minimum)
                            && e.newData.Minimum <= (typeof items[i].Maximum == 'function' ? items[i].Maximum() : items[i].Maximum))) {
                            showErrorMessage("Minimum '" + e.newData.Minimum + "' is already in range");
                            valid = false;
                        }
                        if ((e.newData.Maximum >= (typeof items[i].Minimum == 'function' ? items[i].Minimum() : items[i].Minimum)
                            && e.newData.Maximum <= (typeof items[i].Maximum == 'function' ? items[i].Maximum() : items[i].Maximum))) {
                            showErrorMessage("Maximum '" + e.newData.Maximum + "' is already in range");
                            valid = false;
                        }

                        if ((typeof items[i].Minimum == 'function' ? items[i].Minimum() : items[i].Minimum) > e.newData.Minimum
                            && (typeof items[i].Minimum == 'function' ? items[i].Minimum() : items[i].Minimum) < e.newData.Maximum
                            && (typeof items[i].Maximum == 'function' ? items[i].Maximum() : items[i].Maximum) > e.newData.Minimum
                            && (typeof items[i].Maximum == 'function' ? items[i].Maximum() : items[i].Maximum) < e.newData.Maximum) {
                            showErrorMessage("The new data range shouldn't be contain the existing data range");
                            valid = false;
                        }
                    }
                }

                var rIndex = e.component._controllers.editing._editRowIndex;
                var minEdit = e.component._controllers.data._items[rIndex].cells[0].value;
                var maxEdit = e.component._controllers.data._items[rIndex].cells[1].value;

                if (minEdit > maxEdit) {
                    debugger;
                    showErrorMessage("Minimum value must be less than Maximum");
                    valid = false;
                }

                e.isValid = valid;
            },
            //onOptionChanged: function (e) {
            //    var dataGrid = discountStrataDetailsDataGrid();
            //    var rowIndex = e.component._controllers.data._editingController._editRowIndex;

            //    if (e.fullName == "columns[2].validationRules[1].min")
            //        dataGrid.cellValue(rowIndex, "Minimum", e.value);

            //    if (e.fullName == "columns[1].validationRules[1].max")
            //        dataGrid.cellValue(rowIndex, "Maximum", e.value);

            //},
            columns: [{
                dataField: 'ID', visible: false
            }, {
                dataField: 'Minimum', caption: 'Minimum', width: '120px',
                dataType: 'number',
                validationRules: [{ type: 'required' }],
                editorOptions: {
                    onKeyDown: DXUtility.preventInputCharacters
                }
            }, {
                dataField: 'Maximum', caption: 'Maximum', width: '120px',
                dataType: 'number',
                validationRules: [{ type: 'required' }],
                editorOptions: {
                    onKeyDown: DXUtility.preventInputCharacters
                }
            }, {
                dataField: 'DiscountPercentage', caption: 'Percentage (%)', width: '150px',
                dataType: 'number',
                validationRules: [{
                    type: 'required'
                }, {
                    type: "range",
                    min: 0.01,
                    message: "Percentage must be greater than 0."
                }]
            }]
        }));

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing();
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Discount Strata',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'Code',
            validationRules: [{ type: 'required' }],
            label: { text: 'Code' },
            colSpan: 2,
            editorOptions: {
                maxLength: 10,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'Name',
            validationRules: [{ type: 'required' }],
            label: { text: 'Name' },
            colSpan: 3,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'ValidDateFrom',
            label: { text: 'Valid Date From' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('ValidDateTo').option('min', data.value);
                },
                max: undefined
            }
        }, {
            dataField: 'ValidDateTo',
            label: { text: 'To' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('ValidDateFrom').option('max', data.value);
                },
                max: undefined
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'StatusID',
            label: { text: 'Status' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'DiscountStrataStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/discount_strata_32px.png',

        dataSource_vDiscountStrataDetails: dataSource_vDiscountStrataDetails,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,

        discountStrataDetailsDataGrid: discountStrataDetailsDataGrid
    };
};

Dismoyo_Ciptoning_Client.vPermissionObjects = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isUserRolePermissionsDataGridRefreshRequired;

    function handlevPermissionObjectsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vPermissionObjects');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vPermissionObjects.off('modified', handlevPermissionObjectsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vPermissionObjects,
        select: [
            'ID',
            'Description',
            'CreatedDate',
            'CreatedByUserName',
            'ChildUserRolePermissions.PermissionObjectID',
            'ChildUserRolePermissions.UserRoleID',
            'ChildUserRolePermissions.IsUser'
        ],
        expand: 'ChildUserRolePermissions',
        map: function (item) { return new Dismoyo_Ciptoning_Client.vPermissionObjectViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vPermissionObjects.on('modified', handlevPermissionObjectsModification);

    var dataSource_vUserRolePermission = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vUserRolePermissions,
        select: [
            'PermissionObjectID',
            'UserRoleID',
            'IsUser',
            'UserRoleName',
            'IsUserHeadOffice',
            'UserTerritory',
            'UserRegion',
            'UserArea',
            'UserCompany',
            'UserSite'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vUserRolePermissionViewModel(item); }
    });

    var dataSource_vUserRoleAll = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vUserRoleAlls,
        select: [
            'UserRoleID',
            'IsUser',
            'UserRoleName',
            'IsUserHeadOffice',
            'UserTerritory',
            'UserRegion',
            'UserArea',
            'UserCompany',
            'UserSite'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vUserRoleAllViewModel(item); }
    });

    var selectedPermissionObjectID;

    function userRoleCellTemplate(container, options) {
        var icon = 'dx-icon dx-icon-icons8-role';
        var title = 'Group';
        if (options.data.IsUser()) {
            icon = 'dx-icon dx-icon-icons8-user';
            title = 'User';
        }

        container.append($('<span class="' + icon + '" title="' + title + '" style="width: 16px; height: 16px; background-size: contain;">&nbsp;</span>'));
    };



    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'PermissionObject',
        dataField: '',
        label: { text: 'Permission' },
        editorOptions: {
            placeholder: 'Name/Description',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // Permission
        value = form.getEditor('PermissionObject').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'ID', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Description', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.newRowOptions.visible = false;
    commonGridView.deleteRowsOptions.visible = false;

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', caption: 'Permission Name', width: '180px',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vPermissionObjects_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Description', caption: 'Description', width: '250px',
    }, {
        dataField: 'UserRoleCount', caption: 'Groups/Users', width: '100px', allowEditing: false,
        alignment: 'center',
        calculateCellValue: function (e) {
            return (e.ChildUserRolePermissions) ? e.ChildUserRolePermissions().length : 0;
        },
        cellTemplate: function (container, options) {
            container.append($('<a>').addClass('dx-link').text(options.value)
                .on('dxclick', function () {
                    dataGridEvents.performShowUsers(options);
                })
            );
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];



    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    var userRolePermissionsPopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_userRolePermissionsPopupEdit_dataGrid', 'dxDataGrid'); };
    var userRolePermissionsPopupEditNew = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_userRolePermissionsPopupEdit_new', 'dxButton'); };
    var userRolePermissionsPopupEditDelete = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_userRolePermissionsPopupEdit_delete', 'dxButton'); };

    commonPopupEdit.popupEditOptions.title = 'Permission Groups/Users';

    commonPopupEdit.okOptions.visible = false;
    commonPopupEdit.cancelOptions.text = 'Close';
    commonPopupEdit.cancelOptions.onClick = function () { userRolePermissionsPopupEditEvents.performCancel(); };

    commonPopupEdit.popupEditOptions.onHiding = function (options) {
        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append($('<div id="vPermissionObjects_userRolePermissionsPopupEdit_new" style="margin: 7px 4px 7px 0;">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () { userRolePermissionsPopupEditEvents.performNewRow(); }
        }));

        content.append($('<div id="vPermissionObjects_userRolePermissionsPopupEdit_delete" style="margin: 7px 0 7px 0;">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                userRolePermissionsPopupEditEvents.performDeleteRows();
            }
        }));

        content.append($('<div id="vPermissionObjects_userRolePermissionsPopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            editing: {
                editMode: 'row',
                allowUpdating: false,
                allowDeleting: true,

                editEnabled: false,
                removeEnabled: true
            },
            onSelectionChanged: function (info) {
                userRolePermissionsPopupEditDelete().option('disabled', (info.selectedRowsData.length <= 0));
            },
            onRowRemoved: function (info) {
                isDataGridRefreshRequired = true;
            },
            columns: [{
                dataField: 'PermissionObjectID', visible: false
            }, {
                dataField: 'UserRoleID', visible: false
            }, {
                dataField: 'IsUser', caption: 'Type', width: '60px',
                cellTemplate: userRoleCellTemplate
            }, {
                dataField: 'UserRoleName', caption: 'Name', width: '300px'
            }, {
                dataField: 'IsUserHeadOffice', caption: 'Head Office', width: '100px', dataType: 'boolean'
            }, {
                dataField: 'UserTerritory', caption: 'Territory', width: '200px'
            }, {
                dataField: 'UserRegion', caption: 'Region', width: '200px'
            }, {
                dataField: 'UserArea', caption: 'Area', width: '200px'
            }, {
                dataField: 'UserCompany', caption: 'Company', width: '200px'
            }, {
                dataField: 'UserSite', caption: 'Site', width: '200px'
            }]
        }));

        extContent.append(content);
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        colCount: 5,
        colSpan: 3,
        items: [{
            dataField: 'PermissionObjectID',
            label: { text: 'Permission Name' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: Dismoyo_Ciptoning_Client.DB.vPermissionObjects,
                displayExpr: 'ID',
                valueExpr: 'ID',
                readOnly: true
            }
        }, {
            dataField: 'PermissionObjectDescription',
            label: { text: 'Description' },
            colSpan: 3,
            editorOptions: {
                readOnly: true
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // New User Role Popup Edit
    // ------------------------------------------------------------------------------------------------
    var newUserRolePopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    newUserRolePopupEdit.popupEdit = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_newUserRolePopupEdit', 'dxPopup'); }
    newUserRolePopupEdit.popupContent = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_newUserRolePopupEdit_popupContent', 'dxScrollView'); }
    newUserRolePopupEdit.form = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_newUserRolePopupEdit_form', 'dxForm'); }
    newUserRolePopupEdit.extContent = function () { return $('#vPermissionObjects_newUserRolePopupEdit_extContent'); }
    newUserRolePopupEdit.ok = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_newUserRolePopupEdit_ok', 'dxButton'); }
    newUserRolePopupEdit.cancel = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_newUserRolePopupEdit_cancel', 'dxButton'); }

    var newUserRolePopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vPermissionObjects_newUserRolePopupEdit_dataGrid', 'dxDataGrid'); };

    newUserRolePopupEdit.popupEditOptions.title = 'New Permission Groups/Users';

    newUserRolePopupEdit.popupEditOptions.fullScreen = false;
    newUserRolePopupEdit.popupEditOptions.width = 1200;
    newUserRolePopupEdit.popupEditOptions.height = 600;

    newUserRolePopupEdit.okOptions.disabled = true;
    newUserRolePopupEdit.okOptions.text = 'Save';
    newUserRolePopupEdit.okOptions.onClick = function () { newUserRolePopupEditEvents.performSave(); };
    newUserRolePopupEdit.cancelOptions.onClick = function () { newUserRolePopupEditEvents.performCancel(); };

    newUserRolePopupEdit.popupEditOptions.onHiding = function (options) {
        if (isUserRolePermissionsDataGridRefreshRequired) {
            userRolePermissionsPopupEditDataGrid().refresh();
            isUserRolePermissionsDataGridRefreshRequired = false;
            isDataGridRefreshRequired = true;
        }
    }

    newUserRolePopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#vPermissionObjects_newUserRolePopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop(''));

        content.append($('<div id="vPermissionObjects_newUserRolePopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            onSelectionChanged: function (e) {
                newUserRolePopupEdit.ok().option('disabled', (e.selectedRowsData.length <= 0));
            },
            columns: [{
                dataField: 'UserRoleID', visible: false
            }, {
                dataField: 'IsUser', caption: 'Type', width: '60px',
                cellTemplate: userRoleCellTemplate
            }, {
                dataField: 'UserRoleName', caption: 'Name', width: '300px'
            }, {
                dataField: 'IsUserHeadOffice', caption: 'Head Office', width: '100px', dataType: 'boolean'
            }, {
                dataField: 'UserTerritory', caption: 'Territory', width: '200px'
            }, {
                dataField: 'UserRegion', caption: 'Region', width: '200px'
            }, {
                dataField: 'UserArea', caption: 'Area', width: '200px'
            }, {
                dataField: 'UserCompany', caption: 'Company', width: '200px'
            }, {
                dataField: 'UserSite', caption: 'Site', width: '200px'
            }]
        }));

        extContent.append(content);
    };
        
    // ------------------------------------------------------------------------------------------------
    // New User Role Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    newUserRolePopupEdit.formOptions.items = [{
        dataField: 'Search',
        label: { visible: false },
        colSpan: 3,
        editorOptions: {
            placeholder: 'Group/User Name/Territory/Region/Area/Company/Site',
            mode: 'search',
            onEnterKey: function () { newUserRolePopupEditEvents.performSearch(); }
        }
    }];





    var dataGridEvents = {
        performShowUsers: function (options) {
            commonPopupEdit.popupEditData(options.data);
            commonPopupEdit.popupEditOptions.visible(true);
            commonPopupEdit.popupContent().scrollTo(0);

            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            selectedPermissionObjectID = data.ID();

            form.getEditor('PermissionObjectID').option('value', selectedPermissionObjectID);
            form.getEditor('PermissionObjectDescription').option('value', data.Description());

            var filter = ['PermissionObjectID', '=', selectedPermissionObjectID];

            var userRolePermissionsDataGrid = userRolePermissionsPopupEditDataGrid();

            userRolePermissionsDataGrid.option('dataSource', []);
            userRolePermissionsDataGrid.pageIndex(0);
            userRolePermissionsDataGrid.refresh().done(function (result) {
                userRolePermissionsDataGrid.option('dataSource', dataSource_vUserRolePermission);
                userRolePermissionsDataGrid.filter(filter);
            });
        }
    };

    var userRolePermissionsPopupEditEvents = {
        performNewRow: function () {
            newUserRolePopupEdit.popupEditOptions.visible(true);
            newUserRolePopupEdit.popupContent().scrollTo(0);

            newUserRolePopupEdit.form().getEditor('Search').option('value', null);
            newUserRolePopupEditEvents.performSearch();
        },
        performDeleteRows: function () {
            DevExpress.ui.dialog.confirm(
                'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                    if (dialogResult) {
                        DXUtility.deleteSelectedRows(userRolePermissionsPopupEditDataGrid(), commonGridView);
                        isDataGridRefreshRequired = true;
                    }
                });
        },
        performCancel: function () {
            commonPopupEdit.popupEditOptions.visible(false);
        }
    };

    var newUserRolePopupEditEvents = {
        performSave: function () {
            var selectedData = newUserRolePopupEditDataGrid().getSelectedRowsData();
            for (var i = 0; i < selectedData.length; i++) {
                var data = new Dismoyo_Ciptoning_Client.vUserRolePermissionViewModel();

                data.PermissionObjectID(selectedPermissionObjectID);
                data.UserRoleID(DXUtility.getValue(selectedData[i], 'UserRoleID'));
                data.IsUser(DXUtility.getValue(selectedData[i], 'IsUser'));

                dataSource_vUserRolePermission.store().insert(data.toJS()).done(function (result) {
                    isDataGridRefreshRequired = true;
                    isUserRolePermissionsDataGridRefreshRequired = true;

                    newUserRolePopupEditEvents.performCancel();
                });
            }
        },
        performCancel: function () {
            newUserRolePopupEdit.popupEditOptions.visible(false);
        },
        performSearch: function () {
            var newUserRoleForm = newUserRolePopupEdit.form();

            var searchValue = newUserRoleForm.getEditor('Search').option('value');
            if (searchValue == undefined)
                searchValue = null;

            var filter = null;

            if (searchValue != null) {
                filter = [
                    ['UserRoleName', 'contains', searchValue], 'or',
                    ['UserTerritory', 'contains', searchValue], 'or',
                    ['UserRegion', 'contains', searchValue], 'or',
                    ['UserArea', 'contains', searchValue], 'or',
                    ['UserCompany', 'contains', searchValue], 'or',
                    ['UserSite', 'contains', searchValue]
                ];
            }

            var newUserRoleDataGrid = newUserRolePopupEditDataGrid();

            newUserRoleDataGrid.option('dataSource', []);
            newUserRoleDataGrid.pageIndex(0);
            newUserRoleDataGrid.refresh().done(function (result) {
                newUserRoleDataGrid.option('dataSource', dataSource_vUserRoleAll);
                newUserRoleDataGrid.filter(filter);
            });
        }
    };





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/permission_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        newUserRolePopupEdit: newUserRolePopupEdit
    };
};

Dismoyo_Ciptoning_Client.vProducts = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevProductsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vProducts');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vProducts.off('modified', handlevProductsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vProducts,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vProducts.on('modified', handlevProductsModification);

    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }

    
    
    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        dataField: 'BrandID',
        label: { text: 'Brand' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vProductBrands.dataSource(),
            displayExpr: 'Brand',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        name: 'Product',
        dataField: '',
        label: { text: 'Product' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        commonGridView.dataGrid().clearFilter();

        var filterExpr = [];
        var value;

        // BrandID
        value = collapsibleFilter.form().getEditor('BrandID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'BrandID', '=', value, 'and');

        // Product
        value = collapsibleFilter.form().getEditor('Product').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            commonGridView.dataGrid().filter(filterExpr);
        else
            commonGridView.dataGrid().refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;
    
    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Products.AddNewProduct');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Products.EditProduct');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Products.DeleteProduct');

    commonGridView.events.rowChanged = function (info) {
        Dismoyo_Ciptoning_Client.LocalStore.vProducts.loadWithSort('Product');
    };

    // commented by asep, if you want to use default value for some field(s), use defaultValue attribute on column item
    //commonGridView.events.initRow = function (info) {
    //    info.Weight = 0;
    //    info.DimensionL = 0;
    //    info.DimensionW = 0;
    //    info.DimensionH = 0;
    //    info.data.StatusID = 1; // Active
    //};

    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow' && e.dataField == 'Code') {
            if (!e.row.inserted) {
                e.allowEditing = false;
                e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                e.cancel = true;
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'BrandID', caption: 'Brand', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vProductBrands.dataSource().store(),
            displayExpr: "Brand",
            valueExpr: "ID",
            allowClearing: true,
            sortOrder: "asc"
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Brand == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Brand + "'>" + data.Brand + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'Code', width: '70px',
        editorOptions: {
            maxLength: 10
        },
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vProducts_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Product' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'UOM' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Conversion' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Dimension' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="10">' + 'Additional Info' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                var allowUpdating = user.isAuthorized('Products.EditProduct');
                var allowDeleting = user.isAuthorized('Products.DeleteProduct');
                if (allowUpdating || allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', width: '180px',
        editorOptions: {
            maxLength: 50
        },
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'ShortName', caption: 'Short Name', width: '100px',
        editorOptions: {
            maxLength: 30
        },
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'Weight', format: 'fixedPoint', precision: 2, caption: 'Weight (g)', width: '100px',
        defaultValue: 0,
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'UOMLID', caption: 'Large', width: '100px',
        lookup: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductUOM']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Name == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Name + "'>" + data.Name + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'UOMMID', caption: 'Medium', width: '100px',
        lookup: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductUOM']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Name == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Name + "'>" + data.Name + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'UOMSID', caption: 'Small', width: '100px',
        lookup: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductUOM']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Name == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Name + "'>" + data.Name + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'ConversionL', caption: 'Large', width: '70px',
        dataType: 'number'
    }, {
        dataField: 'ConversionM', caption: 'Medium', width: '70px',
        dataType: 'number'
    }, {
        dataField: 'ConversionS', caption: 'Small', width: '70px',
        dataType: 'number'
    }, {
        dataField: 'DimensionL', caption: 'Long', width: '70px',
        defaultValue: 0,
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DimensionW', caption: 'Width', width: '70px',
        defaultValue: 0,
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DimensionH', caption: 'Height', width: '70px',
        defaultValue: 0,
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'AdditionalInfo1', caption: getValueFromSystemParameter('Product.AdditionalInfo1'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo2', caption: getValueFromSystemParameter('Product.AdditionalInfo2'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo3', caption: getValueFromSystemParameter('Product.AdditionalInfo3'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo4', caption: getValueFromSystemParameter('Product.AdditionalInfo4'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo5', caption: getValueFromSystemParameter('Product.AdditionalInfo5'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo6', caption: getValueFromSystemParameter('Product.AdditionalInfo6'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo7', caption: getValueFromSystemParameter('Product.AdditionalInfo7'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo8', caption: getValueFromSystemParameter('Product.AdditionalInfo8'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo9', caption: getValueFromSystemParameter('Product.AdditionalInfo9'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'AdditionalInfo10', caption: getValueFromSystemParameter('Product.AdditionalInfo10'), width: '100px',
        editorOptions: {
            maxLength: 100
        }
    }, {
        dataField: 'StatusID', caption: 'Status', width: '100px',
        defaultValue: 1,
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource:  Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductStatus']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Name == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Name + "'>" + data.Name + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];



    
    
    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: "Images/product_32px.png",

        dataSource_vSystemLookup:  Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductStatus']),
        dataSource_vProductBrand: Dismoyo_Ciptoning_Client.LocalStore.vProductBrands.data,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vProductBrands = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    
    function handlevProductBrandsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vProductBrands');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vProductBrands.off('modified', handlevProductBrandsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vProductBrands,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vProductBrandViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vProductBrands.on('modified', handlevProductBrandsModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'Brand',
        dataField: '',
        label: { text: 'Brand' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        commonGridView.dataGrid().clearFilter();

        var filterExpr = [];
        var value;

        // ProductBrand
        value = collapsibleFilter.form().getEditor('Brand').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            commonGridView.dataGrid().filter(filterExpr);
        else
            commonGridView.dataGrid().refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('ProductBrands.AddNewProductBrand');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('ProductBrands.EditProductBrand');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('ProductBrands.DeleteProductBrand');
    
    commonGridView.events.rowChanged = function (info) {
        // debugger;
        Dismoyo_Ciptoning_Client.LocalStore.vProductBrands.loadWithSort('Brand');
    };
    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Code', caption: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        sortOrder: 'asc',
        editorOptions: {
            maxLength: 10
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vProductBrands_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                                
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Brand' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                var allowUpdating = user.isAuthorized('ProductBrands.EditProductBrand');
                var allowDeleting = user.isAuthorized('ProductBrands.DeleteProductBrand');
                if (allowUpdating || allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', width: '180px',
        editorOptions: {
            maxLength: 50
        },
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    



    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/product_brand_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vProductPrices = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevProductPricesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vProductPrices');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vProductPrices.off('modified', handlevProductPricesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vProductPrices,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vProductPriceViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vProductPrices.on('modified', handlevProductPricesModification);



    var dataSource_vSystemLookup = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSystemLookups,
        paginate: false,
        map: function (item) {
            return new Dismoyo_Ciptoning_Client.vSystemLookupViewModel(item);
        }
    });

    //var dataSource_vProductBrand = new DevExpress.data.DataSource({
    //    store: Dismoyo_Ciptoning_Client.DB.vProductBrands,
    //    map: function (item) { return new Dismoyo_Ciptoning_Client.vProductBrandViewModel(item); }
    //});

    //var dataSource_vProduct = new DevExpress.data.DataSource({
    //    store: Dismoyo_Ciptoning_Client.DB.vProducts,
    //    map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
    //});





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        dataField: 'ProductBrandID',
        label: { text: 'Brand' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vProductBrands.dataSource(),
            displayExpr: 'Brand',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () {
                collapsibleFilter.events.performSearch();
            },
            onValueChanged: function (e) {
                var childEditor = collapsibleFilter.form().getEditor('ProductID');
                var childSelectedItem = childEditor.option('selectedItem');
                if (childSelectedItem && (childSelectedItem['BrandID']() != e.value))
                    childEditor.option('value', null);

                if(e.selectedItem)
                    childEditor.option('dataSource',
                        Dismoyo_Ciptoning_Client.LocalStore.vProducts.dataByFilter(['BrandID', '=', e.value]));
                else {
                    collapsibleFilter.form().getEditor('ProductID').option('dataSource',
                        Dismoyo_Ciptoning_Client.LocalStore.vProducts.dataSource());
                }
            }
        }
    }, {
        dataField: 'ProductID',
        label: { text: 'Product' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vProducts.dataSource(),
            displayExpr: 'Product',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () {
                collapsibleFilter.events.performSearch();
            },
            onValueChanged: function (e) {
                if (e.selectedItem) {
                    collapsibleFilter.form().getEditor('ProductBrandID').option('value', e.selectedItem.BrandID());
                }else
                    collapsibleFilter.form().getEditor('ProductBrandID').option('value', null);

                e.component.option('value', e.value);
            }
        }
    }, {
        name: 'Code',
        dataField: '',
        label: { text: 'Code' },
        editorOptions: {
            onEnterKey: function () {
                collapsibleFilter.events.performSearch();
            }
        }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        commonGridView.dataGrid().clearFilter();

        var filterExpr = [];
        var value;

        // ProductBrandID
        value = collapsibleFilter.form().getEditor('ProductBrandID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'ProductBrandID', '=', value, 'and');

        // ProductID
        value = collapsibleFilter.form().getEditor('ProductID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'ProductID', '=', value, 'and');

        // Code
        value = collapsibleFilter.form().getEditor('Code').option('value');
        DXUtility.addFilterExpression(filterExpr, 'Code', 'contains', value, 'and');

        if (filterExpr.length > 0)
            commonGridView.dataGrid().filter(filterExpr);
        else
            commonGridView.dataGrid().refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('ProductPrices.AddNewProductPrice');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('ProductPrices.EditProductPrice');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('ProductPrices.DeleteProductPrice');

    commonGridView.dataGridOptions.onOptionChanged = function (e) {
        var dataGrid = commonGridView.dataGrid();
        var rowIndex = e.component._controllers.data._editingController._editRowIndex;

        if (e.fullName == "columns[5].editorOptions.min")
            dataGrid.cellValue(rowIndex, "ValidDateFrom", e.value);

        //if (e.fullName == "columns[4].editorOptions.max")
        //    dataGrid.cellValue(rowIndex, "ValidDateTo", e.value);

    };
    commonGridView.events.editingStart = function (info) {
        info.component.columnOption("ValidDateTo", "editorOptions", {min: info.data.ValidDateFrom()});
    }

    // commented by asep, if you want to use default value for some field(s), use defaultValue attribute on column item
    //commonGridView.dataGridOptions.onInitNewRow = function (info) {
    //    info.data.StatusID = 1; // Active
    //};

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'ProductBrand', caption: 'Brand', width: '200px', allowEditing: false
    }, {
        dataField: 'ProductID', caption: 'Product', width: '200px', onlyAllowAdd: true,
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource:  Dismoyo_Ciptoning_Client.LocalStore.vProducts.dataSource().store(),
            displayExpr: "Product",
            valueExpr: "ID",
            sortOrder: "asc"
        },
        editorOptions:{
            onValueChanged: function (e) {
                var rowIndex = commonGridView.dataGrid()._controllers.data._editingController._editRowIndex;
                commonGridView.dataGrid().cellValue(rowIndex, "ProductBrand", e.itemData.Brand);
                commonGridView.dataGrid().cellValue(rowIndex, "ProductID", e.value);
            },
            itemTemplate: function (data, index, element) {
                var div = "<p title='" + data.Product + "'>" + data.Product + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'Code', width: '120px', onlyAllowAdd: true,
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 20
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vProductPrices_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Validity Period' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                var allowUpdating = user.isAuthorized('ProductPrices.EditProductPrice');
                var allowDeleting = user.isAuthorized('ProductPrices.DeleteProductPrice');
                if (allowUpdating || allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'ValidDateFrom', caption: 'From', width: '140px',
        dataType: "date", validationRules: [{ type: 'required' }],
        editorOptions: {
            onValueChanged: function (data) {
                var dataGrid = commonGridView.dataGrid();
                var rowIndex = dataGrid._controllers.data._editingController._editRowIndex

                var validateto = dataGrid.cellValue(rowIndex, "ValidDateTo");
                if (data.value > validateto) {
                    dataGrid.cellValue(rowIndex, "ValidDateTo", null);
                }

                if (data.value != null)
                    dataGrid.option('columns[5].editorOptions.min', data.value);
                else
                    dataGrid.option('columns[5].editorOptions.min', undefined);
            }
        }
    }, {
        dataField: 'ValidDateTo', caption: 'To', width: '140px',
        dataType: "date", validationRules: [{ type: 'required' }],
        editorOptions: {
            //onValueChanged: function (data) {
            //    var dataGrid = commonGridView.dataGrid();
            //    if (data.value != null)
            //        dataGrid.option('columns[4].editorOptions.max', data.value);
            //    else
            //        dataGrid.option('columns[4].editorOptions.max', undefined);
            //},
            min: undefined
        }
    }, {
        dataField: 'PriceGroupID', caption: 'Group', width: '120px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductPriceGroup']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32'
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Name == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Name + "'>" + data.Name + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'GrossPrice', caption: 'Gross Price (Rp)', width: '100px',
        dataType: 'number', format: 'fixedPoint', precision: 2, validationRules: [{ type: 'required' }, { type: 'numeric' }],
        editorOptions: {
            onValueChanged: function (data) {
                var dataGrid = commonGridView.dataGrid();
                var rowIndex = dataGrid._controllers.data._editingController._editRowIndex;
                var tax = dataGrid.cellValue(rowIndex, "TaxPercentage");
                var price = data.value + (data.value * tax / 100);
                dataGrid.cellValue(rowIndex, "Price", price.toFixed(2));
                dataGrid.cellValue(rowIndex, "GrossPrice", data.value);
            }
        }
    }, {
        dataField: 'TaxPercentage', caption: 'Tax (%)', width: '70px',
        dataType: 'number', format: 'fixedPoint', precision: 2, validationRules: [{ type: 'required' }, { type: 'numeric' }],
        editorOptions: {
            onValueChanged: function (data) {
                //var dataGrid = commonGridView.dataGrid();
                //var rowIndex = dataGrid._controllers.data._editingController._editRowIndex;
                //var grossPrice = dataGrid.cellValue(rowIndex, "GrossPrice");
                //if (grossPrice) {
                //    var percentage = (data.value * grossPrice) / 100;
                //    dataGrid.cellValue(rowIndex, "Price", grossPrice + percentage);
                //}

                //dataGrid.cellValue(rowIndex, "TaxPercentage", data.value);
            },
            readOnly: true
        },
        defaultValue: 10
    }, {
        dataField: 'Price', caption: 'Price (Rp)', width: '100px',
        dataType: 'number', format: 'fixedPoint', precision: 2, validationRules: [{ type: 'required' }, { type: 'numeric' }],
        editorOptions: {
            onValueChanged: function (data) {
                var dataGrid = commonGridView.dataGrid();
                var rowIndex = dataGrid._controllers.data._editingController._editRowIndex;
                var tax = dataGrid.cellValue(rowIndex, "TaxPercentage");
                var grossPrice = data.value / ((tax + 100) / 100);

                dataGrid.cellValue(rowIndex, "GrossPrice", grossPrice.toFixed(2));
                dataGrid.cellValue(rowIndex, "Price", data.value);
            }
        }
    }, {
        dataField: 'StatusID', caption: 'Status', width: '80px',
        validationRules: [{ type: 'required' }],
        defaultValue: 1, // added by Asep
        lookup: {
            dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSystemLookups.dataByFilter(['Group', '=', 'ProductPriceStatus']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        },
        editorOptions: {
            itemTemplate: function (data, index, element) {
                if (typeof data.Name == "function")
                    data = data.toJS();

                var div = "<p title='" + data.Name + "'>" + data.Name + "</p>";
                return div;
            }
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: "Images/product_price_32px.png",

        dataSource_vSystemLookup: dataSource_vSystemLookup,
        dataSource_vProductBrand: Dismoyo_Ciptoning_Client.LocalStore.vProductBrands.data,
        dataSource_vProduct: Dismoyo_Ciptoning_Client.LocalStore.vProducts.data,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vRegions = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevRegionsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vRegions');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vRegions.off('modified', handlevRegionsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vRegions,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vRegionViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vRegions.on('modified', handlevRegionsModification);

    



    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{

        dataField: 'TerritoryID',
        label: { text: 'Territory' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupTerritoryDataSource(),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        name: 'Region',
        dataField: '',
        label: { text: 'Region' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // TerritoryID
        value = form.getEditor('TerritoryID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', value, 'and');

        // Region
        value = form.getEditor('Region').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Regions.AddNewRegion');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Regions.EditRegion');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Regions.DeleteRegion');

    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow' && e.dataField == 'Code') {
            if (!e.row.inserted) {
                e.allowEditing = false;
                e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                e.cancel = true;
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'TerritoryID', caption: 'Territory', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vTerritories.dataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            allowClearing: true
        },
    }, {
        dataField: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vRegions_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Region' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        editorOptions: {
            maxLength: 10
        }
    }, {
        dataField: 'Name', width: '180px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 50
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/region_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vRoles = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isUserRolesDataGridRefreshRequired;

    function handlevRolesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vRoles');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vRoles.off('modified', handlevRolesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vRoles,
        select: [
            'ID',
            'Name',
            'Description',
            'CreatedDate',
            'CreatedByUserName',
            'ModifiedDate',
            'ModifiedByUserName',
            'ChildUserRoles.RoleID',
            'ChildUserRoles.UserID'
        ],
        expand: 'ChildUserRoles',
        map: function (item) { return new Dismoyo_Ciptoning_Client.vRoleViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vRoles.on('modified', handlevRolesModification);

    var dataSource_vUserRole = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vUserRoles,
        select: [
            'RoleID',
            'UserID',
            'UserName',
            'IsUserHeadOffice',
            'UserTerritory',
            'UserRegion',
            'UserArea',
            'UserCompany',
            'UserSite'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vUserRoleViewModel(item); }
    });

    var dataSource_vUser = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vUsers,
        select:[
            'ID',
            'Name',
            'IsHeadOffice',
            'Territory',
            'Region',
            'Area',
            'Company',
            'Site'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vUserViewModel(item); }
    });

    var selectedRoleID;



    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'Role',
        dataField: '',
        label: { text: 'Group' },
        editorOptions: {
            placeholder: 'Name/Description',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // Group
        value = form.getEditor('Role').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Description', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Name', caption: 'Group Name', width: '180px',
        validationRules: [{ type: 'required' }],
        editorOptions: {
            maxLength: 256
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vRoles_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Description', caption: 'Description', width: '250px',
        editorOptions: {
            maxLength: 512
        },
    }, {
        dataField: 'UserCount', caption: 'Users', width: '60px', allowEditing: false,
        alignment: 'center',
        calculateCellValue: function (e) {
            return (e.ChildUserRoles) ? e.ChildUserRoles().length : 0;
        },
        cellTemplate: function (container, options) {
            if (!options.row.inserted) {
                container.append($('<a>').addClass('dx-link').text(options.value)
                    .on('dxclick', function () {
                        dataGridEvents.performShowUsers(options);
                    })
                );
            }
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];



    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    var userRolesPopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vRoles_userRolesPopupEdit_dataGrid', 'dxDataGrid'); };
    var userRolesPopupEditNew = function () { return DXUtility.getDXInstance(null, '#vRoles_userRolesPopupEdit_new', 'dxButton'); };
    var userRolesPopupEditDelete = function () { return DXUtility.getDXInstance(null, '#vRoles_userRolesPopupEdit_delete', 'dxButton'); };

    commonPopupEdit.popupEditOptions.title = 'Group Users';

    commonPopupEdit.okOptions.visible = false;
    commonPopupEdit.cancelOptions.text = 'Close';
    commonPopupEdit.cancelOptions.onClick = function () { userRolesPopupEditEvents.performCancel(); };

    commonPopupEdit.popupEditOptions.onHiding = function (options) {
        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append($('<div id="vRoles_userRolesPopupEdit_new" style="margin: 7px 4px 7px 0;">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () { userRolesPopupEditEvents.performNewRow(); }
        }));

        content.append($('<div id="vRoles_userRolesPopupEdit_delete" style="margin: 7px 0 7px 0;">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                userRolesPopupEditEvents.performDeleteRows();
            }
        }));

        content.append($('<div id="vRoles_userRolesPopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            editing: {
                editMode: 'row',
                allowUpdating: false,
                allowDeleting: true,

                editEnabled: false,
                removeEnabled: true
            },
            onSelectionChanged: function (info) {
                userRolesPopupEditDelete().option('disabled', (info.selectedRowsData.length <= 0));
            },
            onRowRemoved: function (info) {
                isDataGridRefreshRequired = true;
            },
            columns: [{
                dataField: 'RoleID', visible: false
            }, {
                dataField: 'UserID', visible: false
            }, {
                dataField: 'UserName', caption: 'User Name', width: '300px'
            }, {
                dataField: 'IsUserHeadOffice', caption: 'Head Office', width: '100px', dataType: 'boolean'
            }, {
                dataField: 'UserTerritory', caption: 'Territory', width: '200px'
            }, {
                dataField: 'UserRegion', caption: 'Region', width: '200px'
            }, {
                dataField: 'UserArea', caption: 'Area', width: '200px'
            }, {
                dataField: 'UserCompany', caption: 'Company', width: '200px'
            }, {
                dataField: 'UserSite', caption: 'Site', width: '200px'
            }]
        }));

        extContent.append(content);
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        colCount: 5,
        colSpan: 3,
        items: [{
            dataField: 'RoleID',
            label: { text: 'Group Name' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: Dismoyo_Ciptoning_Client.DB.vRoles,
                displayExpr: 'Name',
                valueExpr: 'ID',
                readOnly: true
            }
        }, {
            dataField: 'RoleDescription',
            label: { text: 'Description' },
            colSpan: 3,
            editorOptions: {
                readOnly: true
            }
        }]
    }];

    



    // ------------------------------------------------------------------------------------------------
    // New User Popup Edit
    // ------------------------------------------------------------------------------------------------
    var newUserPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    newUserPopupEdit.popupEdit = function () { return DXUtility.getDXInstance(null, '#vRoles_newUserPopupEdit', 'dxPopup'); }
    newUserPopupEdit.popupContent = function () { return DXUtility.getDXInstance(null, '#vRoles_newUserPopupEdit_popupContent', 'dxScrollView'); }
    newUserPopupEdit.form = function () { return DXUtility.getDXInstance(null, '#vRoles_newUserPopupEdit_form', 'dxForm'); }
    newUserPopupEdit.extContent = function () { return $('#vRoles_newUserPopupEdit_extContent'); }
    newUserPopupEdit.ok = function () { return DXUtility.getDXInstance(null, '#vRoles_newUserPopupEdit_ok', 'dxButton'); }
    newUserPopupEdit.cancel = function () { return DXUtility.getDXInstance(null, '#vRoles_newUserPopupEdit_cancel', 'dxButton'); }

    var newUserPopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vRoles_newUserPopupEdit_dataGrid', 'dxDataGrid'); };

    newUserPopupEdit.popupEditOptions.title = 'New Group Users';

    newUserPopupEdit.popupEditOptions.fullScreen = false;
    newUserPopupEdit.popupEditOptions.width = 1200;
    newUserPopupEdit.popupEditOptions.height = 600;

    newUserPopupEdit.okOptions.disabled = true;
    newUserPopupEdit.okOptions.text = 'Save';
    newUserPopupEdit.okOptions.onClick = function () { newUserPopupEditEvents.performSave(); };
    newUserPopupEdit.cancelOptions.onClick = function () { newUserPopupEditEvents.performCancel(); };

    newUserPopupEdit.popupEditOptions.onHiding = function (options) {
        if (isUserRolesDataGridRefreshRequired) {
            userRolesPopupEditDataGrid().refresh();
            isUserRolesDataGridRefreshRequired = false;
            isDataGridRefreshRequired = true;
        }
    }

    newUserPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#vRoles_newUserPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop(''));

        content.append($('<div id="vRoles_newUserPopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            onSelectionChanged: function (e) {
                newUserPopupEdit.ok().option('disabled', (e.selectedRowsData.length <= 0));
            },
            columns: [{
                dataField: 'ID', visible: false
            }, {
                dataField: 'Name', caption: 'User Name', width: '300px'
            }, {
                dataField: 'IsHeadOffice', caption: 'Head Office', width: '100px', dataType: 'boolean'
            }, {
                dataField: 'Territory', caption: 'Territory', width: '200px'
            }, {
                dataField: 'Region', caption: 'Region', width: '200px'
            }, {
                dataField: 'Area', caption: 'Area', width: '200px'
            }, {
                dataField: 'Company', caption: 'Company', width: '200px'
            }, {
                dataField: 'Site', caption: 'Site', width: '200px'
            }]
        }));

        extContent.append(content);
    };

    // ------------------------------------------------------------------------------------------------
    // New User Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    newUserPopupEdit.formOptions.items = [{
        dataField: 'Search',
        label: { visible: false },
        colSpan: 3,
        editorOptions: {
            placeholder: 'User Name/Territory/Region/Area/Company/Site',
            mode: 'search',
            onEnterKey: function () { newUserPopupEditEvents.performSearch(); }
        }
    }];





    var dataGridEvents = {
        performShowUsers: function (options) {
            commonPopupEdit.popupEditData(options.data);
            commonPopupEdit.popupEditOptions.visible(true);
            commonPopupEdit.popupContent().scrollTo(0);

            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            selectedRoleID = data.ID();

            form.getEditor('RoleID').option('value', selectedRoleID);
            form.getEditor('RoleDescription').option('value', data.Description());

            var filter = ['RoleID', '=', selectedRoleID];

            var userRolesDataGrid = userRolesPopupEditDataGrid();

            userRolesDataGrid.option('dataSource', []);
            userRolesDataGrid.pageIndex(0);
            userRolesDataGrid.refresh().done(function (result) {
                userRolesDataGrid.option('dataSource', dataSource_vUserRole);
                userRolesDataGrid.filter(filter);
            });
        }
    };

    var userRolesPopupEditEvents = {
        performNewRow: function () {
            newUserPopupEdit.popupEditOptions.visible(true);
            newUserPopupEdit.popupContent().scrollTo(0);

            newUserPopupEdit.form().getEditor('Search').option('value', null);
            newUserPopupEditEvents.performSearch();
        },
        performDeleteRows: function () {
            DevExpress.ui.dialog.confirm(
                'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                    if (dialogResult) {
                        DXUtility.deleteSelectedRows(userRolesPopupEditDataGrid(), commonGridView);
                        isDataGridRefreshRequired = true;
                    }
                });
        },
        performCancel: function () {
            commonPopupEdit.popupEditOptions.visible(false);
        }
    };

    var newUserPopupEditEvents = {
        performSave: function () {
            var selectedData = newUserPopupEditDataGrid().getSelectedRowsData();
            for (var i = 0; i < selectedData.length; i++) {
                var data = new Dismoyo_Ciptoning_Client.vUserRoleViewModel();

                data.RoleID(selectedRoleID);
                data.UserID(DXUtility.getValue(selectedData[i], 'ID'));

                dataSource_vUserRole.store().insert(data.toJS()).done(function (result) {
                    isDataGridRefreshRequired = true;
                    isUserRolesDataGridRefreshRequired = true;

                    newUserPopupEditEvents.performCancel();
                });
            }
        },
        performCancel: function () {
            newUserPopupEdit.popupEditOptions.visible(false);
        },
        performSearch: function () {
            var newUserForm = newUserPopupEdit.form();

            var searchValue = newUserForm.getEditor('Search').option('value');
            if (searchValue == undefined)
                searchValue = null;

            var filter = null;

            if (searchValue != null) {
                filter = [
                    ['Name', 'contains', searchValue], 'or',
                    ['Territory', 'contains', searchValue], 'or',
                    ['Region', 'contains', searchValue], 'or',
                    ['Area', 'contains', searchValue], 'or',
                    ['Company', 'contains', searchValue], 'or',
                    ['Site', 'contains', searchValue]
                ];
            }

            var newUserDataGrid = newUserPopupEditDataGrid();

            newUserDataGrid.option('dataSource', []);
            newUserDataGrid.pageIndex(0);
            newUserDataGrid.refresh().done(function (result) {
                newUserDataGrid.option('dataSource', dataSource_vUser);
                newUserDataGrid.filter(filter);
            });
        }
    };





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/role_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        newUserPopupEdit: newUserPopupEdit
    };
};

Dismoyo_Ciptoning_Client.vRoutePlans = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isCustomerCallsDataGridRefreshRequired;

    function handlevRoutePlansModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vRoutePlans');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vRoutePlans.off('modified', handlevRoutePlansModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vRoutePlanSalesmen,
        select: [
            'SalesmanID',
            'Salesman',
            'Territory',
            'Region',
            'Area',
            'Company',
            'SiteID',
            'Site',
            'OddWeek1',
            'OddWeek2',
            'OddWeek3',
            'OddWeek4',
            'OddWeek5',
            'OddWeek6',
            'OddWeek7',
            'EvenWeek1',
            'EvenWeek2',
            'EvenWeek3',
            'EvenWeek4',
            'EvenWeek5',
            'EvenWeek6',
            'EvenWeek7'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vRoutePlanSalesmanViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vRoutePlans.on('modified', handlevRoutePlansModification);

    var dataSource_vRoutePlan = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vRoutePlans,
        select: [
            'SalesmanID',
            'CustomerID',
            'WeekID',
            'DayID',
            'Salesman',
            'Customer',
            'CustomerAddress',
            'SortIndex'
        ],
        sort: 'SortIndex',
        map: function (item) { return new Dismoyo_Ciptoning_Client.vRoutePlanViewModel(item); }
    });

    var dataSource_vRoutePlanCustomer = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vRoutePlanCustomers,
        select: [
            'CustomerID',
            'SalesmanID',
            'Customer',
            'CustomerAddress',
            'Salesman',
            'Territory',
            'Region',
            'Area',
            'Company',
            'Site',
            'OddWeek1',
            'OddWeek2',
            'OddWeek3',
            'OddWeek4',
            'OddWeek5',
            'OddWeek6',
            'OddWeek7',
            'EvenWeek1',
            'EvenWeek2',
            'EvenWeek3',
            'EvenWeek4',
            'EvenWeek5',
            'EvenWeek6',
            'EvenWeek7',
            'SortIndex'
        ],
        sort: 'SortIndex',
        map: function (item) { return new Dismoyo_Ciptoning_Client.vRoutePlanCustomerViewModel(item); }
    });
        
    var weekDay = [];
    weekDay[1] = 'Su';
    weekDay[2] = 'Mo';
    weekDay[3] = 'Tu';
    weekDay[4] = 'We';
    weekDay[5] = 'Th';
    weekDay[6] = 'Fr';
    weekDay[7] = 'Sa';

    var selectedDate = DateTimeUtility.getFirstTimeOfDay(new Date());
    var selectedSalesmanID;
    var selectedWeekID;
    var selectedDayID;
    var selectedSiteID;



    function updateMoveCustomersSiteChildEditor(form, siteID, companyID) {
        if (!siteID)
            siteID = null;

        var oldSalesmanDataSource = DataUtility.GetLookupSalesmanDataSource(['SiteID', '=', siteID]);

        form.getEditor('OldSalesmanID').option('value', null);
        form.getEditor('OldSalesmanID').option('dataSource', []);
        oldSalesmanDataSource.load()
            .done(function (result) {
                form.getEditor('OldSalesmanID').option('dataSource', oldSalesmanDataSource);
            });

        var newSiteDataSource = DataUtility.GetLookupSiteDataSource(['CompanyID', '=', companyID]);

        form.getEditor('NewSiteID').option('value', null);
        form.getEditor('NewSiteID').option('dataSource', []);
        newSiteDataSource.load()
            .done(function (result) {
                form.getEditor('NewSiteID').option('dataSource', newSiteDataSource);
            });
    }

    function updateMoveCustomersSalesmanEditor(form, salesmanID, newSiteID) {
        if (!salesmanID)
            salesmanID = null;

        if (!newSiteID)
            newSiteID = null;

        var newSalesmanDataSource = DataUtility.GetLookupSalesmanDataSource([
            ['ID', '<>', salesmanID], 'and',
            ['SiteID', '=', newSiteID]
        ]);

        form.getEditor('NewSalesmanID').option('value', null);
        form.getEditor('NewSalesmanID').option('dataSource', []);
        newSalesmanDataSource.load()
            .done(function (result) {
                form.getEditor('NewSalesmanID').option('dataSource', newSalesmanDataSource);
            });
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------     
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Route Plan',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                    select: ['ID', 'Customer', 'SiteID'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); },
                    filter: (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                }),
                displayExpr: 'Customer',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // CustomerID
        value = form.getEditor('CustomerID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CustomerID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };


    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.dataGridOptions.onSelectionChanged = function (e) {
        commonGridView.deleteRows().option('disabled', (e.selectedRowsData.length <= 0));
    }

    commonGridView.newRowOptions.text = 'Move Customers'; // New button is used as Move Customers.
    commonGridView.newRowOptions.icon = null;

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'SalesmanID', visible: false
    }, {
        dataField: 'Salesman', caption: 'Salesman',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vRoutePlans_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="7">' + 'Odd Week' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="7">' + 'Even Week' + '</td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }];

    for (var index = 1; index <= 14; index++) {
        var weekID = (index <= 7) ? 1 : 2;
        var dayID = ((index - 1) % 7) + 1;

        commonGridView.dataGridOptions.columns.push({
            dataField: ((weekID == 1) ? 'Odd' : 'Even') + 'Week' + dayID.toString(),
            caption: weekDay[dayID],
            weekID: weekID,
            dayID: dayID,
            width: '36px',
            alignment: 'center',
            cellTemplate: function (container, options) {
                new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vSystemParameters,
                    filter: ['ID', '=', 'RoutePlan.CurrentWeek'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vSystemParameterViewModel(item); }
                }).load()
                    .done(function (result) {
                        if (result.length > 0) {
                            var curWeek = parseInt(result[0].Value());

                            var value = (!options.value) ? '0' : options.value;

                            var date = DateTimeUtility.getFirstTimeOfDay(new Date());
                            if (curWeek == options.column.weekID) {
                                var curDay = date.getDay() + 1;
                                if (curDay == options.column.dayID)
                                    container.css('background', '#92D08C');
                            }

                            container.append($('<a>').addClass('dx-link').text(value)
                                .on('dxclick', function () {
                                    dataGridEvents.performShowCustomerCalls(options);
                                })
                            );
                        }
                    })
                    .fail(function (error) {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load current week data.'), 'Load Failed');                        
                    });                
            }
        });
    }



    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    var customerCallsPopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_customerCallsPopupEdit_dataGrid', 'dxDataGrid'); };
    var customerCallsPopupEditNew = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_customerCallsPopupEdit_new', 'dxButton'); };
    var customerCallsPopupEditDelete = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_customerCallsPopupEdit_delete', 'dxButton'); };

    commonPopupEdit.popupEditOptions.title = 'Customer Calls';

    commonPopupEdit.okOptions.visible = false;
    commonPopupEdit.cancelOptions.text = 'Close';
    commonPopupEdit.cancelOptions.onClick = function () { customerCallsPopupEditEvents.performCancel(); };

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append($('<div id="vRoutePlans_customerCallsPopupEdit_new" style="margin: 7px 4px 7px 0;">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () { customerCallsPopupEditEvents.performNewRow(); }
        }));

        content.append($('<div id="vRoutePlans_customerCallsPopupEdit_delete" style="margin: 7px 0 7px 0;">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                customerCallsPopupEditEvents.performDeleteRows();
            }
        }));

        content.append($('<div id="vRoutePlans_customerCallsPopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            editing: {
                editMode: 'row',
                allowUpdating: false,
                allowDeleting: true,

                editEnabled: false,
                removeEnabled: true
            },
            onSelectionChanged: function (info) {
                customerCallsPopupEditDelete().option('disabled', (info.selectedRowsData.length <= 0));
            },
            onRowPrepared: function (info) {
                if ((info.rowType == 'data') && (info.data.SortIndex() == 1)) {
                    info.rowElement.css('background', '#FFD966');
                }
            },
            onRowRemoved: function (info) {
                isDataGridRefreshRequired = true;
            },
            columns: [{
                dataField: 'CustomerID', visible: false
            }, {
                dataField: 'Customer', caption: 'Customer', width: '300px'
            }, {
                dataField: 'CustomerAddress', caption: 'Address'
            }, {
                dataField: 'SortIndex', visible: false,
                sortIndex: 0
            }]
        }));

        extContent.append(content);
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        colCount: 5,
        colSpan: 3,
        items: [{
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                readOnly: true
            }
        }, {
            dataField: 'WeekID',
            label: { text: 'Week' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'Week']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                readOnly: true
            }
        }, {
            dataField: 'DayID',
            label: { text: 'Day' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'Day']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                readOnly: true
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // New Customer Call Popup Edit
    // ------------------------------------------------------------------------------------------------
    var newCustomerCallPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    newCustomerCallPopupEdit.popupEdit = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_newCustomerCallPopupEdit', 'dxPopup'); }
    newCustomerCallPopupEdit.popupContent = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_newCustomerCallPopupEdit_popupContent', 'dxScrollView'); }
    newCustomerCallPopupEdit.form = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_newCustomerCallPopupEdit_form', 'dxForm'); }
    newCustomerCallPopupEdit.extContent = function () { return $('#vRoutePlans_newCustomerCallPopupEdit_extContent'); }
    newCustomerCallPopupEdit.ok = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_newCustomerCallPopupEdit_ok', 'dxButton'); }
    newCustomerCallPopupEdit.cancel = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_newCustomerCallPopupEdit_cancel', 'dxButton'); }

    var newCustomerCallPopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_newCustomerCallPopupEdit_dataGrid', 'dxDataGrid'); };

    newCustomerCallPopupEdit.popupEditOptions.title = 'New Customer Calls';

    newCustomerCallPopupEdit.popupEditOptions.fullScreen = false;
    newCustomerCallPopupEdit.popupEditOptions.width = 1200;
    newCustomerCallPopupEdit.popupEditOptions.height = 600;

    newCustomerCallPopupEdit.okOptions.disabled = true;
    newCustomerCallPopupEdit.okOptions.text = 'Save';
    newCustomerCallPopupEdit.okOptions.onClick = function () { newCustomerCallPopupEditEvents.performSave(); };
    newCustomerCallPopupEdit.cancelOptions.onClick = function () { newCustomerCallPopupEditEvents.performCancel(); };

    newCustomerCallPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#vRoutePlans_newCustomerCallPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop(''));

        var columns = [{
            dataField: 'CustomerID', visible: false
        }, {
            dataField: 'Customer', caption: 'Customer', width: '300px',
            headerCellTemplate: function (columnHeader, headerInfo) {
                var dataGrid = $(newCustomerCallPopupEditDataGrid().element());
                if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                    var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                    tr += '       <td class="dx-datagrid-action" colspan="7">' + 'Odd Week' + '</td>';
                    tr += '       <td class="dx-datagrid-action" colspan="7">' + 'Even Week' + '</td>';
                    tr += '</tr>'

                    var table = dataGrid.find('.dx-header-row:first-child');
                    $(tr).insertBefore(table[0].parentElement);
                    $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                }
            }
        }, {
            dataField: 'CustomerAddress', caption: 'Address'
        }, {
            dataField: 'SortIndex', visible: false,
            sortIndex: 0
        }];

        for (var index = 1; index <= 14; index++) {
            var weekID = (index <= 7) ? 1 : 2;
            var dayID = ((index - 1) % 7) + 1;

            columns.push({
                dataField: ((weekID == 1) ? 'Odd' : 'Even') + 'Week' + dayID.toString(),
                caption: weekDay[dayID],
                width: '36px',
                alignment: 'center',
                customizeText: function (options) {
                    return (options.value) ? 'X' : '';
                }
            });
        }

        content.append($('<div id="vRoutePlans_newCustomerCallPopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            editing: {
                editMode: 'row',
                allowUpdating: false,
                allowDeleting: false,

                editEnabled: false,
                removeEnabled: false
            },
            onSelectionChanged: function (info) {
                newCustomerCallPopupEdit.ok().option('disabled', (info.selectedRowsData.length <= 0));
            },
            onRowPrepared: function (info) {
                if ((info.rowType == 'data') && (info.data.SortIndex() == 1)) {
                    info.rowElement.css('background', '#FFD966');
                }
            },
            columns: columns
        }));

        extContent.append(content);
    };

    // ------------------------------------------------------------------------------------------------
    // New Customer Call Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    newCustomerCallPopupEdit.formOptions.items = [{
        name: 'Search',
        dataField: '',
        label: { visible: false },
        colSpan: 2,
        editorOptions: {
            placeholder: 'Customer/Address',
            mode: 'search',
            onEnterKey: function () { newCustomerCallPopupEditEvents.performSearch(); }
        }
    }, {
        name: 'CustomerRouteStatus',
        dataField: '',        
        label: { text: 'Route Status' },
        editorType: 'dxSelectBox',
        colSpan: 1,
        editorOptions: {
            dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'CustomerRouteStatus']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { newCustomerCallPopupEditEvents.performSearch(); }
        }
    }];





    // ------------------------------------------------------------------------------------------------
    // Move Customer Popup Edit
    // ------------------------------------------------------------------------------------------------
    var moveCustomersPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    moveCustomersPopupEdit.popupEdit = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_moveCustomersPopupEdit', 'dxPopup'); }
    moveCustomersPopupEdit.popupContent = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_moveCustomersPopupEdit_popupContent', 'dxScrollView'); }
    moveCustomersPopupEdit.form = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_moveCustomersPopupEdit_form', 'dxForm'); }
    moveCustomersPopupEdit.extContent = function () { return $('#vRoutePlans_moveCustomersPopupEdit_extContent'); };
    moveCustomersPopupEdit.ok = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_moveCustomersPopupEdit_ok', 'dxButton'); }
    moveCustomersPopupEdit.cancel = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_moveCustomersPopupEdit_cancel', 'dxButton'); }

    var moveCustomersPopupEditDataGrid = function () { return DXUtility.getDXInstance(null, '#vRoutePlans_moveCustomersPopupEdit_dataGrid', 'dxDataGrid'); };

    moveCustomersPopupEdit.popupEditOptions.title = 'Move Customers';

    moveCustomersPopupEdit.okOptions.text = 'Move';
    moveCustomersPopupEdit.okOptions.onClick = function () { moveCustomersPopupEditEvents.performMove(); };
    moveCustomersPopupEdit.cancelOptions.onClick = function () { moveCustomersPopupEditEvents.performCancel(); };

    moveCustomersPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#vRoutePlans_moveCustomersPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop(''));

        content.append($('<div id="vRoutePlans_moveCustomersPopupEdit_dataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            paging: {
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [5, 10, 20],
                showInfo: true,
                showNavigationButtons: true
            },
            selection: {
                mode: 'multiple'
            },
            onSelectionChanged: function (e) {
                moveCustomersPopupEdit.ok().option('disabled', (e.currentSelectedRowKeys.length <= 0));
            },
            columns: [{
                dataField: 'ID', visible: false,
            }, {
                dataField: 'Customer', caption: 'Customer', width: '300px'
            }, {
                dataField: 'Address', caption: 'Address'
            }]
        }));

        extContent.append(content);
    };

    // ------------------------------------------------------------------------------------------------
    // Move Customers Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    moveCustomersPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(moveCustomersPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(moveCustomersPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(moveCustomersPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); },
                onValueChanged: function (e) {
                    var form = moveCustomersPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var company = null;
                    var companyID = null;

                    if (e.selectedItem) {
                        company = e.selectedItem.Company();
                        companyID = e.selectedItem.CompanyID();
                    }

                    form.getEditor('Company').option('value', company);

                    updateMoveCustomersSiteChildEditor(form, e.value, companyID);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Move Customer',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'OldSalesmanID',
            label: { text: 'Old Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); },
                onValueChanged: function (e) {
                    var form = moveCustomersPopupEdit.form();

                    var customerDataSource = new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                        select: [
                            'ID',
                            'Customer',
                            'Address'
                        ],
                        filter: ['SalesmanID', '=', (e.value) ? e.value : null],
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
                    });

                    var customersDataGrid = moveCustomersPopupEditDataGrid();

                    customersDataGrid.beginCustomLoading();

                    customersDataGrid.option('dataSource', []);
                    customerDataSource.load()
                        .done(function (result) {
                            customersDataGrid.endCustomLoading();

                            customersDataGrid.option('dataSource', customerDataSource);
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download customers data.'), 'Download Customers Failed');

                            customersDataGrid.endCustomLoading();
                        });

                    updateMoveCustomersSalesmanEditor(form, e.value, form.getEditor('NewSiteID').option('value'));
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'NewSiteID',
            label: { text: 'New Site' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); },
                onValueChanged: function (e) {
                    var form = moveCustomersPopupEdit.form();

                    updateMoveCustomersSalesmanEditor(form, form.getEditor('OldSalesmanID').option('value'), e.value);
                }
            }
        }, {
            dataField: 'NewSalesmanID',
            label: { text: 'New Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { moveCustomersPopupEditEvents.performMove(); }
            }
        }]
    }];





    // New button is used as Move Customers.
    commonGridView.events.performNewRow = function () {
        moveCustomersPopupEdit.popupEditOptions.visible(true);
        moveCustomersPopupEdit.popupContent().scrollTo(0);

        var moveDataGrid = moveCustomersPopupEditDataGrid();

        moveDataGrid.option('dataSource', []);
        moveDataGrid.clearSorting();
                
        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = moveCustomersPopupEdit.form();
        DXUtility.resetFormValidation(form);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', territoryID);
            form.getEditor('RegionID').option('value', regionID);
            form.getEditor('AreaID').option('value', areaID);
            if (form.getEditor('CompanyID'))
                form.getEditor('CompanyID').option('value', companyID);

            form.getEditor('SiteID').option('value', siteID);
        }

        moveCustomersPopupEdit.ok().option('disabled', true);

        updateMoveCustomersSiteChildEditor(form, siteID, companyID);
    };

    commonGridView.events.performDeleteRows = function (dataGrid, selectedRows) {
        showLoadingPanel();

        var selectedKeys = dataGrid.getSelectedRowKeys();
        var salesmanFilter = [];
        for (var i = 0; i < selectedKeys.length; i++) {
            if (i > 0)
                salesmanFilter.push('or');

            salesmanFilter.push(['SalesmanID', '=', selectedKeys[i]]);
        }

        if (salesmanFilter.length > 0) {
            dataSource_vRoutePlan.filter(salesmanFilter);
            dataSource_vRoutePlan.load().then(function (e) {
                if (e.length == 0)
                    hideLoadingPanel();

                for (var i = 0; i < e.length; i++) {
                    dataSource_vRoutePlan.store().remove(e[i].ID())
                        .done(function (result) {
                            if (i >= (e.length - 1)) {
                                hideLoadingPanel();
                                dataSource_vRoutePlan.load().done(function (result) { commonGridView.dataGrid().refresh(); });
                            }
                        })
                        .fail(function (error) {
                            if (i >= (e.length - 1)) {
                                hideLoadingPanel();
                                dataSource_vRoutePlan.load().done(function (result) { commonGridView.dataGrid().refresh(); });
                            }
                        });
                }
            });
        } else {
            moveCustomersPopupEdit.popupEditOptions.visible(false);
            hideLoadingPanel();
        }
    };

    var dataGridEvents = {
        performShowCustomerCalls: function (options) {
            commonPopupEdit.popupEditData(options.data);
            commonPopupEdit.popupEditOptions.visible(true);
            commonPopupEdit.popupContent().scrollTo(0);

            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            selectedSalesmanID = data.SalesmanID();
            selectedWeekID = options.column.weekID;
            selectedDayID = options.column.dayID;
            selectedSiteID = data.SiteID();

            form.getEditor('SalesmanID').option('value', selectedSalesmanID);
            form.getEditor('WeekID').option('value', selectedWeekID);
            form.getEditor('DayID').option('value', selectedDayID);

            var filter = [
                ['SalesmanID', '=', selectedSalesmanID], 'and',
                ['WeekID', '=', selectedWeekID], 'and',
                ['DayID', '=', selectedDayID], 'and',
                ['OrderBySalesmanID', '=', selectedSalesmanID]
            ];

            var callsDataGrid = customerCallsPopupEditDataGrid();

            callsDataGrid.option('dataSource', []);
            callsDataGrid.clearSorting();
            dataSource_vRoutePlan.sort('SortIndex');

            callsDataGrid.pageIndex(0);
            callsDataGrid.refresh().done(function (result) {
                callsDataGrid.option('dataSource', dataSource_vRoutePlan);
                callsDataGrid.filter(filter);
            });
        }
    }

    var customerCallsPopupEditEvents = {
        performNewRow: function () {
            newCustomerCallPopupEdit.popupEditOptions.visible(true);
            newCustomerCallPopupEdit.popupContent().scrollTo(0);

            var callDataGrid = newCustomerCallPopupEditDataGrid();

            callDataGrid.option('dataSource', []);
            callDataGrid.clearSorting();
            dataSource_vRoutePlanCustomer.sort('SortIndex');

            newCustomerCallPopupEdit.form().getEditor('Search').option('value', null);
            newCustomerCallPopupEditEvents.performSearch();
        },
        performDeleteRows: function () {
            DevExpress.ui.dialog.confirm(
                'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                    if (dialogResult) {
                        DXUtility.deleteSelectedRows(customerCallsPopupEditDataGrid(), commonGridView);
                        isDataGridRefreshRequired = true;
                    }
                });
        },
        performCancel: function () {
            commonPopupEdit.popupEditOptions.visible(false);

            if (isDataGridRefreshRequired) {
                commonGridView.dataGrid().refresh();
                isDataGridRefreshRequired = false;
            }
        }
    };

    var newCustomerCallPopupEditEvents = {
        performSave: function () {
            var selectedData = newCustomerCallPopupEditDataGrid().getSelectedRowsData();
            for (var i = 0; i < selectedData.length; i++) {
                var data = new Dismoyo_Ciptoning_Client.vRoutePlanViewModel();

                data.SalesmanID(selectedSalesmanID);
                data.CustomerID(selectedData[i].CustomerID());
                data.WeekID(selectedWeekID);
                data.DayID(selectedDayID);

                dataSource_vRoutePlan.store().insert(data.toJS()).done(function (result) {
                    isDataGridRefreshRequired = true;
                    isCustomerCallsDataGridRefreshRequired = true;

                    newCustomerCallPopupEditEvents.performCancel();
                });
            }
        },
        performCancel: function () {
            newCustomerCallPopupEdit.popupEditOptions.visible(false);

            if (isCustomerCallsDataGridRefreshRequired) {
                customerCallsPopupEditDataGrid().refresh();
                isCustomerCallsDataGridRefreshRequired = false;
            }
        },
        performSearch: function () {
            var newCallForm = newCustomerCallPopupEdit.form();
            
            var searchValue = newCallForm.getEditor('Search').option('value');
            if (searchValue == undefined)
                searchValue = null;
                        
            var filter = [
                ['SiteID', '=', selectedSiteID], 'and',
                ['OrderBySalesmanID', '=', selectedSalesmanID], 'and',
                ['FilterByKeywords', '=', searchValue]
            ];

            var customerRouteStatusValue = newCallForm.getEditor('CustomerRouteStatus').option('value');
            if ((customerRouteStatusValue != undefined) && (customerRouteStatusValue != null)) {
                filter.push('and');
                switch (customerRouteStatusValue) {
                    case 1:                        
                        filter.push([
                            ['OddWeek1', '=', 1], 'or',
                            ['OddWeek2', '=', 1], 'or',
                            ['OddWeek3', '=', 1], 'or',
                            ['OddWeek4', '=', 1], 'or',
                            ['OddWeek5', '=', 1], 'or',
                            ['OddWeek6', '=', 1], 'or',
                            ['OddWeek7', '=', 1], 'or',
                            ['EvenWeek1', '=', 1], 'or',
                            ['EvenWeek2', '=', 1], 'or',
                            ['EvenWeek3', '=', 1], 'or',
                            ['EvenWeek4', '=', 1], 'or',
                            ['EvenWeek5', '=', 1], 'or',
                            ['EvenWeek6', '=', 1], 'or',
                            ['EvenWeek7', '=', 1], 'or'
                        ]);
                        break;
                    case 2:
                        filter.push([
                            ['OddWeek1', '<>', 1], 'and',
                            ['OddWeek2', '<>', 1], 'and',
                            ['OddWeek3', '<>', 1], 'and',
                            ['OddWeek4', '<>', 1], 'and',
                            ['OddWeek5', '<>', 1], 'and',
                            ['OddWeek6', '<>', 1], 'and',
                            ['OddWeek7', '<>', 1], 'and',
                            ['EvenWeek1', '<>', 1], 'and',
                            ['EvenWeek2', '<>', 1], 'and',
                            ['EvenWeek3', '<>', 1], 'and',
                            ['EvenWeek4', '<>', 1], 'and',
                            ['EvenWeek5', '<>', 1], 'and',
                            ['EvenWeek6', '<>', 1], 'and',
                            ['EvenWeek7', '<>', 1], 'and'
                        ]);
                        break;
                }
                
            }

            var newCallDataGrid = newCustomerCallPopupEditDataGrid();

            newCallDataGrid.option('dataSource', []);
            newCallDataGrid.pageIndex(0);
            newCallDataGrid.refresh().done(function (result) {
                newCallDataGrid.option('dataSource', dataSource_vRoutePlanCustomer);
                newCallDataGrid.filter(filter);
            });
        }
    };

    var moveCustomersPopupEditEvents = {
        performMove: function () {
            var isValid = moveCustomersPopupEdit.form().validate().isValid;
            var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

            if (isValid) {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to Move the selected customers?', 'Move Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            showLoadingPanel();

                            var form = moveCustomersPopupEdit.form();
                            var dataGrid = moveCustomersPopupEditDataGrid();

                            var newSalesmanID = form.getEditor('NewSalesmanID').option('value');
                            var _dataSource = dataGrid.option('dataSource');
                            var selectedKeys = dataGrid.getSelectedRowKeys();

                            for (var i = 0; i < selectedKeys.length; i++) {
                                var customer = _dataSource.store().byKey(selectedKeys[i])
                                    .done(function (result) {
                                        result.SalesmanID = newSalesmanID;

                                        var dataJS = ko.toJS(result);

                                        _dataSource.store().insert(dataJS)
                                            .done(function (result) {
                                                if (i >= (selectedKeys.length - 1)) {
                                                    hideLoadingPanel();
                                                    _dataSource.load().done(function (result) { dataGrid.clearSelection(); dataGrid.refresh(); });
                                                    dataSource.load().done(function (result) { commonGridView.dataGrid().refresh(); });
                                                }
                                            })
                                            .fail(function (error) {
                                                DevExpress.ui.dialog.alert(error.message, 'Move Failed');

                                                if (i >= (selectedKeys.length - 1)) {
                                                    hideLoadingPanel();
                                                    _dataSource.load().done(function (result) { dataGrid.clearSelection(); dataGrid.refresh(); });
                                                    dataSource.load().done(function (result) { commonGridView.dataGrid().refresh(); });
                                                }
                                            });
                                    })
                                    .fail(function (error) {
                                        DevExpress.ui.dialog.alert(error.message, 'Move Failed');
                                        hideLoadingPanel();
                                    });
                            }
                        }
                    }
                );
            }

            if (errorMsg != '') {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Move Failed');
            }
        },
        performCancel: function () {
            moveCustomersPopupEdit.popupEditOptions.visible(false);
        }
    };


    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: "/Images/route_plan_32px.png",

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        newCustomerCallPopupEdit: newCustomerCallPopupEdit,
        moveCustomersPopupEdit: moveCustomersPopupEdit        
    };
};

Dismoyo_Ciptoning_Client.vSalesByChannelReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function handlevSalesByChannelReportsModification() { shouldReload = true; }

    var pane;
    var _reportDateFrom = null;
    var _reportDateTo = null;

    function checkContainer() {
        pane = CommonUtility.configureCommonIFrameLayout('vSalesByChannelReports');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            var form = collapsibleFilter.form();
            form.getEditor('ReportGroupBy').option('value', 1);
            form.getEditor('ReportPeriod').option('value', 2);
            form.getEditor('ReportDateFrom').option('value', DateTimeUtility.getFirstDayOfMonth(new Date()));
        }
    }

    function handleViewShowing() {
        checkContainer();

        isReady.resolve();
    }

    function refreshIFrame(filter) {
        var iframe = commonIFrame.iframe();

        commonIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.SalesByChannelReport.url(filter));
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales by Channel Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'ReportPeriod',
            label: { text: 'Period' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Daily' },
                    { ID: 2, Name: 'Monthly' }
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportPeriodValueChanged(e, form, true);
                    _reportDateFrom = null;
                    _reportDateTo = null;
                }
            }
        }, {
            dataField: 'ReportDateFrom',
            label: { text: 'Report Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                min: new Date(2016, 6, 1),
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    _reportDateFrom = e.value;
                    if (form.itemOption('SalesByChannelReports.ReportDateTo').visible) {
                        CommonUtility.reportDateFromValueChanged(e, form);

                        _reportDateTo = form.getEditor('ReportDateTo').option('value');                        
                    } else
                        _reportDateTo = (e.value) ? new Date(e.value.getFullYear(), e.value.getMonth() + 1, 0) : null;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportDateTo',
            label: { text: 'Report Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportDateToValueChanged(e, form);

                    _reportDateFrom = form.getEditor('ReportDateFrom').option('value');
                    _reportDateTo = e.value;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportGroupBy',
            label: { text: 'Group by' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Product' },
                    { ID: 2, Name: 'Brand' }
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var form = collapsibleFilter.form();

        var ctlReportDateFrom = form.getEditor('ReportDateFrom');
        if (ctlReportDateFrom && ctlReportDateFrom.option('visible')) {
            if ((_reportDateFrom == null) || (_reportDateTo == null)) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Report Date/Month.'), 'Search Failed');
                return;
            }

            if ((_reportDateFrom.getFullYear() != _reportDateTo.getFullYear()) ||
                (_reportDateFrom.getMonth() != _reportDateTo.getMonth())) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Report Date From and To must be in the same month.'),
                    'Search Failed');
                return;
            }
        }

        var filterExpr = [];
        var value;

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID        
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // ReportGroupBy
        value = form.getEditor('ReportGroupBy').option('value');
        DXUtility.addFilterExpression(filterExpr, 'ReportGroupBy', '=', value, 'and');

        // ReportDateFrom
        value = _reportDateFrom;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateFrom', '>=', value, 'and');

        // ReportDateTo
        value = _reportDateTo;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateTo', '<=', value, 'and');

        refreshIFrame(filterExpr);
    };

    // ------------------------------------------------------------------------------------------------
    // Perform clear search criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performClear = function () {
        var form = collapsibleFilter.form();

        form.getEditor('ReportDateFrom').option('value', null);
        if (form.itemOption('SalesByChannelReports.ReportDateTo').visible)
            form.getEditor('ReportDateTo').option('value', null);

        _reportDateFrom = null;
        _reportDateTo = null;
    }





    // ------------------------------------------------------------------------------------------------
    // commonIFrame
    // ------------------------------------------------------------------------------------------------
    var commonIFrame = new Dismoyo_Ciptoning_Client.CommonIFrame();





    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_by_channel_report_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonIFrame: commonIFrame
    };
};

Dismoyo_Ciptoning_Client.vSalesByOrderReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function handlevSalesByOrderReportsModification() { shouldReload = true; }

    var pane;
    var _reportDateFrom = null;
    var _reportDateTo = null;
    
    function checkContainer() {
        pane = CommonUtility.configureCommonIFrameLayout('vSalesByOrderReports');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            var form = collapsibleFilter.form();
            form.getEditor('ReportPeriod').option('value', 1);
            form.getEditor('ReportDateFrom').option('value', DateTimeUtility.getFirstTimeOfDay(new Date()));
            form.getEditor('ReportDateTo').option('value', DateTimeUtility.getFirstTimeOfDay(new Date()));
        }
    }

    function handleViewShowing() {
        checkContainer();

        isReady.resolve();
    }

    function refreshIFrame(filter) {
        var iframe = commonIFrame.iframe();

        commonIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.SalesByOrderReport.url(filter));
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales by Order Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'ReportPeriod',
            label: { text: 'Period' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Daily' },
                    { ID: 2, Name: 'Monthly' }
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportPeriodValueChanged(e, form, true);
                    _reportDateFrom = null;
                    _reportDateTo = null;
                }
            }
        }, {
            dataField: 'ReportDateFrom',
            label: { text: 'Report Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                min: new Date(2016, 6, 1),
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    _reportDateFrom = e.value;
                    if (form.itemOption('SalesByOrderReports.ReportDateTo').visible) {
                        CommonUtility.reportDateFromValueChanged(e, form);

                        _reportDateTo = form.getEditor('ReportDateTo').option('value');                        
                    } else
                        _reportDateTo = (e.value) ? new Date(e.value.getFullYear(), e.value.getMonth() + 1, 0) : null;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportDateTo',
            label: { text: 'Report Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportDateToValueChanged(e, form);

                    _reportDateFrom = form.getEditor('ReportDateFrom').option('value');
                    _reportDateTo = e.value;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var form = collapsibleFilter.form();

        var ctlReportDateFrom = form.getEditor('ReportDateFrom');
        if (ctlReportDateFrom && ctlReportDateFrom.option('visible')) {
            if ((_reportDateFrom == null) || (_reportDateTo == null)) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Report Date/Month.'), 'Search Failed');
                return;
            }

            if ((_reportDateFrom.getFullYear() != _reportDateTo.getFullYear()) ||
                (_reportDateFrom.getMonth() != _reportDateTo.getMonth())) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Report Date From and To must be in the same month.'),
                    'Search Failed');
                return;
            }
        }

        var filterExpr = [];
        var value;

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID        
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // ReportDateFrom
        value = _reportDateFrom;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateFrom', '>=', value, 'and');

        // ReportDateTo
        value = _reportDateTo;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateTo', '<=', value, 'and');

        refreshIFrame(filterExpr);
    };

    // ------------------------------------------------------------------------------------------------
    // Perform clear search criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performClear = function () {
        var form = collapsibleFilter.form();

        form.getEditor('ReportDateFrom').option('value', null);
        if (form.itemOption('SalesByOrderReports.ReportDateTo').visible)
            form.getEditor('ReportDateTo').option('value', null);

        _reportDateFrom = null;
        _reportDateTo = null;
    }





    // ------------------------------------------------------------------------------------------------
    // commonIFrame
    // ------------------------------------------------------------------------------------------------
    var commonIFrame = new Dismoyo_Ciptoning_Client.CommonIFrame();





    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_by_order_report_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonIFrame: commonIFrame
    };
};

Dismoyo_Ciptoning_Client.vSalesBySiteReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();

    function handlevSalesBySiteReportsModification() { shouldReload = true; }

    var pane;
    var _reportDateFrom = null;
    var _reportDateTo = null;

    function checkContainer() {
        pane = CommonUtility.configureCommonIFrameLayout('vSalesBySiteReports');
        if (!pane)
            setTimeout(checkContainer, 50);
        else {
            var form = collapsibleFilter.form();
            form.getEditor('ReportGroupBy').option('value', 1);
            form.getEditor('ReportPeriod').option('value', 2);
            form.getEditor('ReportDateFrom').option('value', DateTimeUtility.getFirstDayOfMonth(new Date()));
        }
    }

    function handleViewShowing() {
        checkContainer();

        isReady.resolve();
    }

    function refreshIFrame(filter) {
        var iframe = commonIFrame.iframe();

        commonIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.SalesBySiteReport.url(filter));
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales by Site Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'ReportPeriod',
            label: { text: 'Period' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Daily' },
                    { ID: 2, Name: 'Monthly' }
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportPeriodValueChanged(e, form, true);
                    _reportDateFrom = null;
                    _reportDateTo = null;
                }
            }
        }, {
            dataField: 'ReportDateFrom',
            label: { text: 'Report Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                min: new Date(2016, 6, 1),
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    _reportDateFrom = e.value;
                    if (form.itemOption('SalesBySiteReports.ReportDateTo').visible) {
                        CommonUtility.reportDateFromValueChanged(e, form);

                        _reportDateTo = form.getEditor('ReportDateTo').option('value');
                    } else
                        _reportDateTo = (e.value) ? new Date(e.value.getFullYear(), e.value.getMonth() + 1, 0) : null;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportDateTo',
            label: { text: 'Report Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var form = collapsibleFilter.form();

                    CommonUtility.reportDateToValueChanged(e, form);

                    _reportDateFrom = form.getEditor('ReportDateFrom').option('value');
                    _reportDateTo = e.value;

                    if (_reportDateFrom instanceof Date)
                        _reportDateFrom = DateTimeUtility.getFirstTimeOfDay(_reportDateFrom);

                    if (_reportDateTo instanceof Date)
                        _reportDateTo = DateTimeUtility.getLastTimeOfDay(_reportDateTo);
                }
            }
        }, {
            dataField: 'ReportGroupBy',
            label: { text: 'Group by' },
            editorType: 'dxRadioGroup',
            editorOptions: {
                width: '100%',
                displayExpr: 'Name',
                valueExpr: 'ID',
                items: [
                    { ID: 1, Name: 'Product' },
                    { ID: 2, Name: 'Brand' }
                ],
                layout: 'horizontal',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var form = collapsibleFilter.form();

        var ctlReportDateFrom = form.getEditor('ReportDateFrom');
        if (ctlReportDateFrom && ctlReportDateFrom.option('visible')) {
            if ((_reportDateFrom == null) || (_reportDateTo == null)) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Report Date/Month.'), 'Search Failed');
                return;
            }

            if ((_reportDateFrom.getFullYear() != _reportDateTo.getFullYear()) ||
                (_reportDateFrom.getMonth() != _reportDateTo.getMonth())) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Report Date From and To must be in the same month.'),
                    'Search Failed');
                return;
            }
        }

        var filterExpr = [];
        var value;

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID        
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // ReportGroupBy
        value = form.getEditor('ReportGroupBy').option('value');
        DXUtility.addFilterExpression(filterExpr, 'ReportGroupBy', '=', value, 'and');

        // ReportDateFrom
        value = _reportDateFrom;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateFrom', '>=', value, 'and');

        // ReportDateTo
        value = _reportDateTo;
        DXUtility.addFilterExpression(filterExpr, 'ReportDateTo', '<=', value, 'and');

        refreshIFrame(filterExpr);
    };

    // ------------------------------------------------------------------------------------------------
    // Perform clear search criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performClear = function () {
        var form = collapsibleFilter.form();

        form.getEditor('ReportDateFrom').option('value', null);
        if (form.itemOption('SalesBySiteReports.ReportDateTo').visible)
            form.getEditor('ReportDateTo').option('value', null);

        _reportDateFrom = null;
        _reportDateTo = null;
    }





    // ------------------------------------------------------------------------------------------------
    // commonIFrame
    // ------------------------------------------------------------------------------------------------
    var commonIFrame = new Dismoyo_Ciptoning_Client.CommonIFrame();





    return {
        isReady: isReady.promise(),
        viewShowing: handleViewShowing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_by_site_report_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonIFrame: commonIFrame
    };
};

Dismoyo_Ciptoning_Client.vSalesmen = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;

    function handlevSalesmenModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesmen');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesmen.off('modified', handlevSalesmenModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesmen,
        select: [
            'ID',
            'Territory',
            'Region',
            'Area',
            'Company',
            'Site',
            'Code',
            'Name',
            'Warehouse',
            'GroupName',
            'CategoryName',
            'StatusName',
            'CreatedDate',
            'CreatedByUserName',
            'ModifiedByUserName'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesmen.on('modified', handlevSalesmenModification);



    var dataSource_vSalesmanProduct = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
    });


    function previewSalesmanCode(siteCode) {
        var data = commonPopupEdit.popupEditData();
        if (data.ID())
            return data.Code();

        var form = commonPopupEdit.form();

        var selectedItem = null;
        var categoryCode = null;

        selectedItem = form.getEditor('CategoryID').option('selectedItem');
        if (selectedItem)
            categoryCode = selectedItem.Value_String();

        return ((siteCode) ? siteCode : '(Site Code)') + '-' + ((categoryCode) ? categoryCode : '(Salesman Category Code)') + '(Auto Generated)';
    }

    function createSalesmanProductArrayDataSource(productBrands) {
        var salesmanProducts = ko.toJS(productBrands);
        for (var i = 0; i < salesmanProducts.length; i++) {
            var item = salesmanProducts[i];
            item.key = item.ID;
            item.text = item.Brand;
            item.items = item.ChildProducts;
            for (var j = 0; j < item.items.length; j++) {
                var subItem = item.items[j];
                subItem.key = item.ID + '_' + subItem.ID;
                subItem.text = subItem.Product;
            }
        }

        return salesmanProducts;
    }

    function loadProductTreeview(siteID) {

        if (siteID) {
            var salesmanProducts = [];
            var siteProducts = [];
            var data = commonPopupEdit.popupEditData();
            for (var i = 0; i < data.ChildProducts().length; i++) {
                var item = data.ChildProducts()[i];
                item.key = item.ProductBrandID() + '_' + item.ProductID();
                salesmanProducts.push(item);
            }

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSiteProducts,
                select: [
                    'ProductID',
                    'ProductBrand'
                ],
                filter: ['SiteID', '=', siteID],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSiteProductViewModel(item); }
            }).load()
               .done(function (result) {
                   var filters = [];
                   var groupFilterExpr = [];
                   new DevExpress.data.DataSource({
                       store: Dismoyo_Ciptoning_Client.DB.vProductBrands,
                       select: [
                           'ID',
                           'Brand',
                           'ChildProducts',
                           'ChildProducts.ID',
                           'ChildProducts.Product'
                       ],
                       expand: ['ChildProducts'],
                       paginate: false,
                       map: function (item) { return new Dismoyo_Ciptoning_Client.vProductBrandViewModel(item); }
                   }).load()
                        .done(function (result2) {
                            var product = [];
                            var siteProducts = result;
                            var newCP = [];
                            for (var i = 0; i < result2.length; i++) {
                                newCP = [];
                                for (var j = 0; j < result2[i].ChildProducts().length; j++) {
                                    for (var k = 0; k < siteProducts.length; k++) {
                                        if (result2[i].ChildProducts()[j].ID() == siteProducts[k].ProductID()) {
                                            newCP.push(result2[i].ChildProducts()[j]);
                                        }
                                    }
                                }
                                result2[i].ChildProducts(newCP);
                                if (result2[i].ChildProducts().length < 1) {
                                    result2.splice(i, 1);
                                    i--;
                                }
                            }

                            var salesmanProductDataSource = createSalesmanProductArrayDataSource(result2);
                            DXUtility.setSelectedTreeViewItems(salesmanProductDataSource, salesmanProducts);
                            salesmanProductTreeView().option('dataSource', salesmanProductDataSource);
                        });

               });
        }
    }


    function updateSiteChildEditor(form, siteID) {
        if (!siteID)
            siteID = null;

        var warehouseDataSource = DataUtility.GetLookupWarehouseDataSource([['SiteID', '=', siteID],['StatusID', '=', 1]]);

        form.getEditor('WarehouseID').option('value', null);
        form.getEditor('WarehouseID').option('dataSource', []);
        warehouseDataSource.load()
            .done(function (result) {
                form.getEditor('WarehouseID').option('dataSource', warehouseDataSource);
            });
    }


    function openSelectedEditing(id, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vSalesmen.byKey(id, { expand: ['ChildProducts'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vSalesmanViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
         if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesmanViewModel();
            data.StatusID(1);
            newData = true;
        }
        commonPopupEdit.popupEditData(data);


        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Salesman');
        commonPopupEdit.popupEditOptions.editingKey = data.ID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        var salesmanCode = data.Code();
        if (newData) {
            data.StatusID(1);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            data.SFAFlag(false);
            salesmanCode = previewSalesmanCode(data.SiteCode());
        }

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', !newData);
            form.getEditor('RegionID').option('readOnly', !newData);
            form.getEditor('AreaID').option('readOnly', !newData);
            form.getEditor('SiteID').option('readOnly', !newData);
            form.getEditor('Company').option('readOnly', !newData);
        }

        loadProductTreeview(data.SiteID());

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('Name').option('value', data.Name());
        form.getEditor('Code').option('value', salesmanCode);

        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('GroupID').option('value', data.GroupID());
        form.getEditor('CategoryID').option('value', data.CategoryID());
        form.getEditor('Phone').option('value', data.Phone());
        form.getEditor('SFAFlag').option('value', data.SFAFlag());
        form.getEditor('SFA').option('value', data.SFA());

        form.getEditor('SFA').option('readOnly', !data.SFAFlag());

        if (newData) {
            DXUtility.resetFormValidation(form);
            form.getEditor('Code').option('value', salesmanCode);
        }

        form.getEditor('StatusID').option('value', data.StatusID());
    }

    function saveEditing() {
        showLoadingPanel();

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');

        var data = commonPopupEdit.popupEditData();
        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        if (isValid) {
            if (form.itemOption('Organization').visible) {
                data.SiteID(form.getEditor('SiteID').option('value'));
            }

            data.Code(form.getEditor('Code').option('value'));
            data.Name(form.getEditor('Name').option('value'));

            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.GroupID(form.getEditor('GroupID').option('value'));
            data.CategoryID(form.getEditor('CategoryID').option('value'));
            data.Phone(form.getEditor('Phone').option('value'));
            data.SFAFlag(form.getEditor('SFAFlag').option('value'));
            data.SFA(form.getEditor('SFA').option('value'));
            data.StatusID(form.getEditor('StatusID').option('value'));

            var salesmanProducts = [];
            DXUtility.getSelectedTreeViewItems(salesmanProductTreeView().option('items'), salesmanProducts);
            var i = 0;
            while (i < salesmanProducts.length) {
                var item = salesmanProducts[i];
                if (!item.Product) {
                    salesmanProducts.splice(i, 1);
                    continue;
                }

                i++;
            }
        }

        if (isValid) {
            for (i = 0; i < salesmanProducts.length; i++) {
                var item = salesmanProducts[i];
                salesmanProducts[i] = new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel({
                    SalesmanID: data.ID(),
                    ProductID: item.ID
                });
            }

            if (salesmanProducts.length < 1) {
                DevExpress.ui.dialog.alert("Product is required.", 'Error');
                hideLoadingPanel();
                return;
            }
            if (form.getEditor('CategoryID').option('value') == 1) {
                var dataSource_whs = form.getEditor('WarehouseID').option('dataSource').items();
                for (var i = 0; i < dataSource_whs.length; i++) {
                    if (dataSource_whs[i].ID().toString() == form.getEditor('WarehouseID').option('value').toString()) {
                        if (dataSource_whs[i].Warehouse().indexOf("[MAIN]") >= 0) {
                            DevExpress.ui.dialog.alert("Salesman with Category Direct Sales (DSA) can only choose Warehouse with SALESMAN type", 'Error');
                            hideLoadingPanel();
                            return;
                        }
                    }
                }
            }

            data.ChildProducts(salesmanProducts);
            var dataJS = ko.toJS(data);
            dataSource.store().insert(dataJS)
                .done(function (result) {
                    isDataGridRefreshRequired = true;

                    commonPopupEdit.events.performCancel();
                    hideLoadingPanel();
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Salesman',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },

            }
        }, {
            name: 'Salesman',
            dataField: '',
            label: { text: 'Salesman' },
            editorOptions: {
                placeholder: 'Code/Name',
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: 'GroupID',
            label: { text: 'Group' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SalesmanGroup']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: 'CategoryID',
            label: { text: 'Category' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SalesmanCategory']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }
        ]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // GroupID
        value = form.getEditor('GroupID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'GroupID', '=', (value ? parseInt(value) : value), 'and');

        // CategoryID
        value = form.getEditor('CategoryID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CategoryID', '=', (value ? parseInt(value) : value), 'and');

        // Salesman
        value = form.getEditor('Salesman').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Salesman.AddNewSalesman');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Salesman.EditSalesman');
    commonGridView.dataGridOptions.editing.allowDeleting = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Salesman.DeleteSalesman');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Code', Caption: 'Code', width: '120px',
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesmen_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines data-grid-banded-header-border-top">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Salesman' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating || commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.Code());
            if (commonGridView.dataGridOptions.editing.allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.Code()).on('dxclick', function () {
                    openSelectedEditing(options.data.ID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'Name', width: '180px'
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'GroupName', caption: 'Group', width: '150px'
    }, {
        dataField: 'CategoryName', caption: 'Category', width: '150px'
    }, {
        dataField: 'StatusName', caption: 'Status', width: '100px'
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating ||
        commonGridView.dataGridOptions.editing.allowDeleting) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                if (commonGridView.dataGridOptions.editing.allowUpdating) {
                    commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                        openSelectedEditing(options.data.ID(), false);
                    }));
                    commands.append('&nbsp;');
                }

                if (commonGridView.dataGridOptions.editing.allowDeleting) {
                    commands.append($('<a class="dx-link">').text('Delete').on('dxclick', function () {
                        var dataGrid = commonGridView.dataGrid();
                        var dataSource = dataGrid.option('dataSource');
                        var data = options.data.toJS();
                        var selectedKey = data.ID;

                        dataSource.store().remove(selectedKey).done(function () {
                            dataGrid.refresh();
                        });
                    }));
                    commands.append('&nbsp;');
                }

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();
    commonPopupEdit.popupEditOptions.title = 'Salesman';

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var salesmanProductTreeView = function () { return DXUtility.getDXInstance(null, '#vSalesmen_salesmanProductTreeView', 'dxTreeView'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = $('<div>');

        var table = $('<table width="100%">');
        var tr = $('<tr>');

        tr.append($('<td width="50%" style="vertical-align: top;">')
            .append(DXUtility.createFormItemGroupWithCaption('Products').css('padding', '0px 12px 0px 0px')
            .append(DXUtility.createFormItemGroupContent().css('padding', '16px 12px 0px 0px'))
            .append($('<div id="vSalesmen_salesmanProductTreeView">').dxTreeView({
                dataSource: [],
                dataStructure: 'tree',
                keyExpr: 'key',
                displayExpr: 'text',
                rootValue: null,
                showCheckBoxesMode: 'normal'
            }))));

        tr.append($('<td width="50%" style="vertical-align: top;">'));

        table.append(tr);
        content.append(table);

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Site',
                         ['Area', 'Region', 'Territory'],
                         ['Warehouse']);
                    updateSiteChildEditor(commonPopupEdit.form(), e.value);
                    if (e.selectedItem) {
                        loadProductTreeview(e.value);
                        commonPopupEdit.form().getEditor('Company').option('value', e.selectedItem.Company());
                        commonPopupEdit.form().getEditor('Code').option('value', previewSalesmanCode(e.selectedItem.Code()));
                    } else if (e.previousValue != null) {
                        commonPopupEdit.form().getEditor('Company').option('value', null);
                    }
                    
                    updateSiteChildEditor(commonPopupEdit.form(), e.value);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Salesman',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'Code',
            validationRules: [{ type: 'required' }],
            label: { text: 'Code' },
            colSpan: 2,
            editorOptions: {                
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'Name',
            validationRules: [{ type: 'required' }],
            label: { text: 'Name' },
            colSpan: 3,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                        (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? ['StatusID', '=', 1] : [['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()], ['StatusID', '=', 1]]
                    ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'StatusID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Status' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SalesmanStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'GroupID',
            label: { text: 'Group' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SalesmanGroup']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'CategoryID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Category' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SalesmanCategory']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {                    
                    if (e.selectedItem) {
                        var siteCode = null;
                        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                        if (user.IsHeadOffice()) {
                            var selectedSite = commonPopupEdit.form().getEditor('SiteID').option('selectedItem');
                            if (selectedSite)
                                siteCode = selectedSite.Code();
                        } else
                            siteCode = user.SiteCode();

                        commonPopupEdit.form().getEditor('Code').option('value', previewSalesmanCode(siteCode));
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'Phone',
            label: { text: 'Phone' },
            validationRules: [{ type: "numeric" }],
            colSpan: 2,
            editorOptions: {
                maxLength: 20,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 4
        }, {
            dataField: 'SFAFlag',
            label: { text: 'SFA Flag' },
            editorType: 'dxCheckBox',
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var data = commonPopupEdit.popupEditData();
                    var form = commonPopupEdit.form();
                                        
                    form.itemOption('Salesman.SFA', 'isRequired', e.value);

                    var editorOptions = form.itemOption('Salesman.SFA').editorOptions;
                    editorOptions.readOnly = !e.value;
                    form.itemOption('Salesman.SFA', 'editorOptions', editorOptions);
                }
            }
        }, {
            dataField: 'SFA',
            label: { text: 'SFA Password' },
            editorOptions: {
                mode: 'password',
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing();
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: '/Images/salesman_32px.png',

        dataSource_vSalesmanProduct: dataSource_vSalesmanProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit
    };
};

Dismoyo_Ciptoning_Client.vSalesmanActivityReports = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevSalesmanActivityReportsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesmanActivityReports');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesmanActivityReports.off('modified', handlevSalesmanActivityReportsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesmanActivityReports,
        select: [
            'CustomerID'
		    , 'CallDate'
		    , 'CheckInDate'
		    , 'CheckOutDate'
		    , 'CustomerType'
		    , 'Customer'
            , 'SalesmanID'
		    , 'Latitude'
		    , 'Longitude'
		    , 'RouteTypeID'
		    , 'RouteTypeName'
		    , 'Activity'
		    , 'DocumentCode'
        ],
        sort: ['CallDate', 'Customer']
    });

    Dismoyo_Ciptoning_Client.DB.vSalesmanActivityReports.on('modified', handlevSalesmanActivityReportsModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Salesman Activity Report',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'CallDateFrom',
            label: { text: 'Call Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'CallDateTo',
            label: { text: 'Call Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'RouteTypeID',
            label: { text: 'Route Type' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'RouteType']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var salesmanID = form.getEditor('SalesmanID').option('value');
        var callDateFrom = form.getEditor('CallDateFrom').option('value');
        var callDateTo = form.getEditor('CallDateTo').option('value');

        if ((salesmanID == null) || (callDateFrom == null) || (callDateTo == null)) {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Please specify Salesman and Call Date.'), 'Search Failed');
            return;
        }

        if ((callDateFrom.getFullYear() != callDateTo.getFullYear()) ||
            (callDateFrom.getMonth() != callDateTo.getMonth())) {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Call Date From and To must be in the same month.'),
                'Search Failed');
            return;
        }

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // CallDateFrom
        value = callDateFrom;
        DXUtility.addFilterExpression(filterExpr, 'CallDate', '>=', value, 'and');

        // CallDateTo
        value = callDateTo;
        DXUtility.addFilterExpression(filterExpr, 'CallDate', '<=', value, 'and');

        // RouteTypeID
        value = form.getEditor('RouteTypeID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'RouteTypeID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.selection.mode = 'single';
    commonGridView.dataGridOptions.columnAutoWidth = false;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.newRowOptions.visible = false;
    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.dataGridOptions.grouping = {
        autoExpandAll: false,
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'CallDate', caption: 'Call Date',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesmanActivityReports_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Check' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Location' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'CheckInDate', caption: 'IN', //groupIndex: 0
    }, {
        dataField: 'CheckOutDate', caption: 'OUT', //groupIndex: 1        
    }, {
        dataField: 'CustomerType', caption: 'Customer Type', width: '100px'
    }, {
        dataField: 'Customer', caption: 'Customer', width: '100px'
    }, {
        dataField: 'Latitude', caption: 'Latitude', width: '100px'
    }, {
        dataField: 'Longitude', caption: 'Longitude', width: '100px'
    }, {
        dataField: 'RouteTypeName', caption: 'Route Type', width: '100px'
    }, {
        dataField: 'Activity', caption: 'Activity', width: '100px'
    }, {
        dataField: 'DocumentCode', caption: 'Document No', width: '100px'
    }];

    commonGridView.dataGridOptions.customizeColumns = function (columns) {
        $.each(columns, function (e, element) {
            element.groupCellTemplate = function (groupCell, info) {
                groupCell.append($('<div>').html(info.text).css('font-weight', 'normal').css('font-style', 'normal'));
            };
        });
    };

    //commonGridView.dataGridOptions.summary = {
    //    groupItems: [{
    //        column: 'QtyOnHandGood',
    //        summaryType: 'sum',
    //        displayFormat: '{0}',
    //        showInGroupFooter: false,
    //        alignByColumn: true
    //    }, {
    //        column: 'QtyOnHandHold',
    //        summaryType: 'sum',
    //        displayFormat: '{0}',
    //        showInGroupFooter: false,
    //        alignByColumn: true
    //    }, {
    //        column: 'QtyOnHandBad',
    //        summaryType: 'sum',
    //        displayFormat: '{0}',
    //        showInGroupFooter: false,
    //        alignByColumn: true
    //    }]
    //}





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_view_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vSalesmanTargets = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    
    function handlevSalesmanTargetsModification() { shouldReload = true; }

    var preventChangeSalesmanID = false;
    var preventChangePeriodID = false;
    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesmanTargets');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesmanTargets.off('modified', handlevSalesmanTargetsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesmanTargets,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanTargetViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesmanTargets.on('modified', handlevSalesmanTargetsModification);



    var dataSource_vProducts = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vProducts,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
    });
    
    function updateSalesmanAndPeriodChildEditor(salesmanID, periodID, isEditing) {
        var data = commonPopupEdit.popupEditData();
        var form = commonPopupEdit.form();

        showLoadingPanel();
        
        var targetsDataGrid = productTargetsDataGrid();
        targetsDataGrid.cancelEditData();
        
        form.getEditor('TotalRegisteredCustomer').option('value', 0);
        if (((salesmanID != undefined) || (salesmanID != null)) && (periodID instanceof Date)) {            
            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
                select: [
                    'ProductID',
                    'Product'
                ],
                filter: ['SalesmanID', '=', salesmanID],
                sort: ['Product'],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
            }).load()
                .done(function (result) {
                    new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                        select: ['StatusID'],
                        filter: [
                            ['SalesmanID', '=', salesmanID], 'and',
                            ['StatusID', '>=', 1], 'and',
                            ['RegisteredDate', '<', DateTimeUtility.getFirstDayOfMonth(periodID)]
                        ],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
                    }).load()
                        .done(function (result2) {
                            var registeredCustomerCount = result2.length;
                            form.getEditor('TotalRegisteredCustomer').option('value', registeredCustomerCount);

                            var productTargets = [];
                            for (var i = 0; i < result.length; i++) {
                                productTargets.push(new Dismoyo_Ciptoning_Client.vSalesmanProductTargetViewModel());

                                productTargets[i].ProductID(result[i].ProductID());
                                productTargets[i].Product(result[i].Product());
                                productTargets[i].SalesOrderQty(0);
                                productTargets[i].EffectiveCall(0);
                                productTargets[i].CustomerTransaction(0);

                                productTargets[i].EffectiveCallValue(0);
                                productTargets[i].CustomerTransactionValue(0);
                            }

                            if (!isEditing || (productTargets.length != data.ChildProductTargets().length))
                                data.ChildProductTargets(productTargets);

                            updateSalesmanProductTarget(data.ChildProductTargets(), registeredCustomerCount);
                            targetsDataGrid.option('dataSource',
                                createProductTargetArrayDataSource(data.ChildProductTargets()));

                            hideLoadingPanel();
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download RO.'), 'Download RO Failed');

                            data.ChildProductTargets([]);
                            targetsDataGrid.option('dataSource',
                                createProductTargetArrayDataSource(data.ChildProductTargets()));

                            hideLoadingPanel();
                        });
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download salesman product data.'), 'Download Salesman Product Failed');

                    data.ChildProductTargets([]);
                    targetsDataGrid.option('dataSource',
                        createProductTargetArrayDataSource(data.ChildProductTargets()));

                    hideLoadingPanel();
                });
        } else {
            data.ChildProductTargets([]);
            targetsDataGrid.option('dataSource',
                createProductTargetArrayDataSource(data.ChildProductTargets()));

            hideLoadingPanel();
        }
    }
    
    function calcSalesmanTarget(e) {
        return calcSalesmanTargetBase(
            e.component,
            e.row.rowIndex,
            e.row.data,
            commonPopupEdit.form().getEditor('TotalRegisteredCustomer').option('value')
        );
    }

    function calcSalesmanTargetBase(dataGrid, rowIndex, rowData, registeredCustomerCount) {
        var customerTransaction = DXUtility.getValue(rowData, 'CustomerTransaction');
        var effectiveCall = DXUtility.getValue(rowData, 'EffectiveCall');

        var customerTransactionValue = (customerTransaction / 100) * registeredCustomerCount;
        var effectiveCallValue = effectiveCall * customerTransactionValue;

        DXUtility.setValue(rowData, 'CustomerTransactionValue', customerTransactionValue);
        DXUtility.setValue(rowData, 'EffectiveCallValue', effectiveCallValue);

        dataGrid.cellValue(rowIndex, 'CustomerTransactionValue', customerTransactionValue);
        dataGrid.cellValue(rowIndex, 'EffectiveCallValue', effectiveCallValue);
    }

    function updateSalesmanProductTarget(productTargets, registeredCustomerCount) {
        for (var i = 0; i < productTargets.length; i++) {
            var productTarget = productTargets[i];

            var customerTransactionValue = (productTarget.CustomerTransaction() / 100) * registeredCustomerCount;
            var effectiveCallValue = productTarget.EffectiveCall() * customerTransactionValue;

            productTarget.CustomerTransactionValue(customerTransactionValue);
            productTarget.EffectiveCallValue(effectiveCallValue);
        }
    }


    function updateSiteChildEditor(form, siteID) {
        if (!siteID)
            siteID = null;

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource(['SiteID', '=', siteID]);

        var form = commonPopupEdit.form();

        form.getEditor('SalesmanID').option('value', null);
        form.getEditor('SalesmanID').option('dataSource', []);
        salesmanDataSource.load()
            .done(function (result) {
                form.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
            });
    }


    function createProductTargetArrayDataSource(productTargets) {
        return CommonUtility.createArrayDataSource(
            'vSalesmanProductTargetViewModel',
            ['SalesmanID', 'PeriodID', 'ProductID'],
            productTargets
        );
    }

    function openSelectedEditing(salesmanID, periodID, refreshRequired) {
        showLoadingPanel();

        new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vSalesmanTargets,
            expand: ['ChildProductTargets'],
            filter: [
                ['SalesmanID', '=', salesmanID], 'and',
                ['PeriodID', '=', periodID]
            ],
            paginate: false,
            map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanTargetViewModel(item); }
        }).load()
            .done(function (result) {
                if (result.length > 0) {
                    hideLoadingPanel();

                    isDataGridRefreshRequired = refreshRequired;
                    openEditing(result[0]);
                } else {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected data is not found.'), 'Load Failed');
                    hideLoadingPanel();
                }
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesmanTargetViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Salesman Target');
        commonPopupEdit.popupEditOptions.editingKey = [data.SalesmanID(), data.PeriodID()];
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        if (newData) {
            data.SalesmanID(null);
            data.PeriodID(null);

            data.TerritoryID(user.TerritoryID());
            data.RegionID(user.RegionID());
            data.AreaID(user.AreaID());
            data.SiteID(user.SiteID());
            data.SiteCode(user.SiteCode());
            data.CompanyID(user.CompanyID());
            data.Company(user.Company());
        }

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());
        }

        updateSiteChildEditor(form, data.SiteID());

        preventChangeSalesmanID = true;
        preventChangePeriodID = true;
        form.getEditor('SalesmanID').option('value', data.SalesmanID());
        form.getEditor('PeriodID').option('value', data.PeriodID());
        form.getEditor('SalesOrderAmount').option('value', data.SalesOrderAmount());
        form.getEditor('NewCustomer').option('value', data.NewCustomer());
        form.getEditor('Visibility').option('value', data.Visibility());
        
        form.getEditor('SalesmanID').option('readOnly', !newData);
        form.getEditor('PeriodID').option('readOnly', !newData);

        if (newData) {
            DXUtility.resetFormValidation(form);
        }

        // Set grid datasource for product targets
        var targetsDataGrid = productTargetsDataGrid();
        updateSalesmanAndPeriodChildEditor(form.getEditor('SalesmanID').option('value'),
            form.getEditor('PeriodID').option('value'), true);

        preventChangeSalesmanID = false;
        preventChangePeriodID = false;
    }

    function saveEditing() {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = commonPopupEdit.form().validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var productTargetsDataSource = productTargetsDataGrid().option('dataSource');
        var productTargets = [];
        for (var i = 0; i < productTargetsDataSource.store()._array.length; i++)
            productTargets.push(new Dismoyo_Ciptoning_Client.vSalesmanProductTargetViewModel(productTargetsDataSource.store()._array[i]));
                        
        if (isValid) {
            if (productTargets.length == 0) {
                errorMsg = 'The selected Salesman does not have any reference products.';
                isValid = false;
            }
        }

        if (isValid) {
            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            var salesmanID = form.getEditor('SalesmanID').option('value');
            var periodID = form.getEditor('PeriodID').option('value');

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanTargets,
                select: ['PeriodID'],
                filter: [
                    ['SalesmanID', '=', salesmanID], 'and',
                    ['PeriodID', '=', DateTimeUtility.getFirstDayOfMonth(periodID)],
                ],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanTargetViewModel(item); }
            }).load()
                .done(function (result) {
                    if (((data.SalesmanID() == null) && (data.PeriodID() == null)) && (result.length > 0)) {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected salesman target is already exist.'), 'Save Failed');
                        hideLoadingPanel();
                    } else {                    
                        data.SalesmanID(salesmanID);
                        data.PeriodID(periodID);
                        data.SalesOrderAmount(form.getEditor('SalesOrderAmount').option('value'));
                        data.NewCustomer(form.getEditor('NewCustomer').option('value'));
                        data.Visibility(form.getEditor('Visibility').option('value'));

                        data.ChildProductTargets(productTargets);

                        var dataJS = ko.toJS(data);

                        dataJS.PeriodID = DateTimeUtility.getFirstDayOfMonth(dataJS.PeriodID);

                        for (var i = 0; i < dataJS.ChildProductTargets.length; i++) {
                            delete dataJS.ChildProductTargets[i]['EffectiveCallValue'];
                            delete dataJS.ChildProductTargets[i]['CustomerTransactionValue'];
                        }

                        dataSource.store().insert(dataJS)
                            .done(function (result) {
                                hideLoadingPanel();

                                commonPopupEdit.popupEditOptions.visible(false);
                                dataGrid.refresh();
                            })
                            .fail(function (error) {
                                data.SalesmanID(null);
                                data.PeriodID(null);

                                DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                                hideLoadingPanel();
                            });
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to verify data.'), 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Salesman Target',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'PeriodID',
            label: { text: 'Period' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                placeholder: 'mmm-yyyy',
                formatString: 'MMM-yyyy',
                maxZoomLevel: 'year',
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = collapsibleFilter.form().getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // PeriodID
        value = collapsibleFilter.form().getEditor('PeriodID').option('value');
        if (value instanceof Date)
            DXUtility.addFilterExpression(filterExpr, 'PeriodID', '=', DateTimeUtility.getFirstDayOfMonth(value), 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = false;
    commonGridView.dataGridOptions.editing.editEnabled = false; commonGridView.dataGridOptions.editing.allowUpdating =
        true; //Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesmanTarget.EditSalesmanTarget');
    commonGridView.dataGridOptions.editing.removeEnabled = false; commonGridView.dataGridOptions.editing.allowDeleting =
        true; //Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesmanTarget.DeleteSalesmanTarget');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'SalesmanID', visible: false
    }, {
        dataField: 'Salesman', width: '200px',
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            commands.append($('<a class="dx-link">').text(options.data.Salesman()).on('dxclick', function () {
                openSelectedEditing(options.data.SalesmanID(), options.data.PeriodID(), false);
            }));
            commands.append('&nbsp;');

            container.append(commands);
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesmanTargets_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';                
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Target' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'PeriodID', caption: 'Period', width: '140px',
        customizeText: function (cellInfo) {
            //////////////////////////////////////////////////////////////
            if (cellInfo.value) {
                var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

                var d = cellInfo.value;
                return monthNames[d.getMonth()] + ' ' + d.getFullYear();
            }

            return null;
        }
    }, {
        dataField: 'SalesOrderAmount', caption: 'Amount', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'NewCustomer', caption: 'NOO', width: '80px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 0
    }, {
        dataField: 'Visibility', caption: 'Visibility', width: '80px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 0
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        width: 100,
        alignment: 'center',
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: center;">');

            commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                openSelectedEditing(options.data.SalesmanID(), options.data.PeriodID(), false);
            }));
            commands.append('&nbsp;');

            commands.append($('<a class="dx-link">').text('Delete').on('dxclick', function () {
                commonGridView.dataGrid().deleteRow(options.rowIndex);
            }));
            commands.append('&nbsp;');

            container.append(commands);
        }
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var productTargetsDataGrid = function () { return DXUtility.getDXInstance(null, '#vSalesmanTargets_productTargetsDataGrid', 'dxDataGrid'); }

    var salesmanTargetSave = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var intrvl;

    var isEditorEnabled = function () {
        var dxCommandEdit = $(".dx-command-edit", "[id$=productTargetsDataGrid]");
        for (var i = 0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf('Save') >= 0)
                return true;
        }

        return false;
    }

    var intrvlHandler = function () {
        var disabled = false;

        if (!isEditorEnabled()) {
            salesmanTargetSave().option('disabled', false);
            clearInterval(intrvl);
        }
    };


    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        var maxRange = 1000;
        var minRange = 0;
        var maxValue = 0;

        content.append(DXUtility.createFormItemLabelTop('Product Target', '9px'));

        content.append($('<div id="vSalesmanTargets_productTargetsDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                salesmanTargetSave().option("disabled", true);
                
                intrvl = setInterval(intrvlHandler, 500);

                info.data.SalesOrderQty = 0;
                info.data.EffectiveCall = 0;
                info.data.CustomerTransaction = 0;
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if ((e.row != undefined) && (e.row.rowIndex != undefined))
                        e.component.editRowIndex = e.row.rowIndex;

                    if ((e.dataField == 'EffectiveCall') || (e.dataField == 'CustomerTransaction')) {
                        var prevKeyCode = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            onKeyDown: function (ea) {
                                if (((ea.jQueryEvent.keyCode > 47) && (ea.jQueryEvent.keyCode <= 57)) ||
                                    (ea.jQueryEvent.keyCode == 190) || (ea.jQueryEvent.keyCode == 191) ||
                                    ((ea.jQueryEvent.keyCode > 95) && (ea.jQueryEvent.keyCode <= 105)))
                                    prevKeyCode = ea.jQueryEvent.target.value;
                                else if ((ea.jQueryEvent.keyCode != 8) && (ea.jQueryEvent.keyCode != 46) &&
                                    (ea.jQueryEvent.keyCode != 13) && (ea.jQueryEvent.keyCode != 9))
                                    ea.jQueryEvent.preventDefault();                                
                            },
                            onEnterKey: function (ea) {
                                productTargetsDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                if ((ea.value == null) || (ea.value == ''))
                                    ea.value = 0;

                                ea.component.option('value', ea.value);                                
                                e.setValue(ea.value);

                                DXUtility.setValue(e.row.data, e.dataField, ea.value);
                                calcSalesmanTarget(e);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowUpdated: function (info) {
                var data = commonPopupEdit.popupEditData();

                var store = productTargetsDataGrid().option('dataSource').store();
                var productTargets = [];
                for (var i = 0; i < store._array.length; i++)
                    productTargets.push(new Dismoyo_Ciptoning_Client.vSalesmanProductTargetViewModel(store._array[i]));

                data.ChildProductTargets(productTargets);
            },
            onEditingStart: function (info) {
                salesmanTargetSave().option('disabled', true);
                intrvl = setInterval(intrvlHandler, 500);
            },
            columns: [{
                dataField: 'SalesmanID', visible: false
            }, {
                dataField: 'PeriodID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product', allowEditing: false,
                editorOptions: {
                    readOnly: true
                },
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(productTargetsDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'OT' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'EC' + '</td>';                        
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'SalesOrderQty', caption: 'Qty', width: '80px',
                dataType: 'number',
                validationRules: [{ type: 'required' }],
                editorOptions: {
                    onKeyDown: DXUtility.preventInputCharacters
                }
            }, {
                dataField: 'CustomerTransaction', caption: 'Param (% of RO)', width: '100px',
                dataType: 'number', format: 'fixedPoint', precision: 2,
                validationRules: [{ type: 'required' }]
            }, {
                dataField: 'CustomerTransactionValue', caption: 'Target', width: '70px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'EffectiveCall', caption: 'Param (x of OT)', width: '100px',
                dataType: 'number', format: 'fixedPoint', precision: 2,
                validationRules: [{ type: 'required' }]
            }, {
                dataField: 'EffectiveCallValue', caption: 'Target', width: '70px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }]
        }));

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing();
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                         ['Area', 'Region', 'Territory'],
                         []);

                    if (e.selectedItem)
                        form.getEditor('Company').option('value', e.selectedItem.Company());                        
                    else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Salesman Target',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchEnabled: true,                
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function(e) {
                    var form = commonPopupEdit.form();
                    
                    if (e.value && !preventChangeSalesmanID)
                        updateSalesmanAndPeriodChildEditor(e.value, form.getEditor('PeriodID').option('value'));

                    preventChangeSalesmanID = false;
                }
            }
        }, {
            dataField: 'PeriodID',
            label: { text: 'Period' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',                
                placeholder: 'mmm-yyyy',
                formatString: 'MMM-yyyy',
                maxZoomLevel: 'year',
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();
                    
                    if (e.value && !preventChangePeriodID)
                        updateSalesmanAndPeriodChildEditor(form.getEditor('SalesmanID').option('value'), e.value, true);

                    preventChangePeriodID = false;
                }
            }
        }, {
            dataField: 'TotalRegisteredCustomer',
            label: { text: 'RO' },
            editorType: 'dxNumberBox',
            editorOptions: {
                value: 0,
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'SalesOrderAmount',
            validationRules: [{ type: 'required' }],
            label: { text: 'Amount' },
            editorType: 'dxNumberBox',
            editorOptions: {
                min: 0,
                max: 100000000000,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'NewCustomer',
            validationRules: [{ type: 'required' }],
            label: { text: 'NOO' },
            editorType: 'dxNumberBox',
            editorOptions: {
                min: 0,
                max: 1000,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'Visibility',
            validationRules: [{ type: 'required' }],
            label: { text: 'Visibility' },
            editorType: 'dxNumberBox',
            editorOptions: {
                min: 0,
                max: 1000,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/salesman_target_32px.png',

        dataSource_vProducts: dataSource_vProducts,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,

        productTargetsDataGrid: productTargetsDataGrid
    };
};

Dismoyo_Ciptoning_Client.vSalesOrders = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevSalesOrdersModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesOrders');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesOrders.off('modified', handlevSalesOrdersModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrders,
        select: [
            'DocumentID',
            'DocumentCode',
            'TransactionDate',
            'Territory',
            'Region',
            'Area',
            'Company',
            'Site',
            'Customer',
            'Salesman',
            'Warehouse',
            'TotalGross',
            'TotalTax',
            'Total',
            'ReferenceNumber',
            'DocumentStatusName',
            'PostedDate',
            'CreatedDate',
            'CreatedByUserName',
            'ModifiedDate',
            'ModifiedByUserName'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesOrders.on('modified', handlevSalesOrdersModification);

    var dataSource_vSalesOrderDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderDetailsViewModel(item); }
    });

    var dataSource_vSalesOrderSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;
    var dataSource_vSelectedProductPrices;
    var dataSource_vSelectedDiscountGroup;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-01-(Auto Generated)';
    }

    function previewDODocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-10-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var customerDataSource = new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vCustomers,
            select: [
                'ID',
                'Customer',
                'Address',
                'Category1',
                'SalesmanID',
                'Salesman',
                'WarehouseID',
                'TermOfPaymentID',
                'PriceGroupID',
                'DiscountGroupID',
                'SiteID'
            ],
            filter: [
                ['IsDeleted', '=', false], 'and',
                ['StatusID', '=', 1], 'and',
                ['SiteID', '=', siteID]
            ],
            map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
        });

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource([
            ['IsDeleted', '=', false], 'and',
            ['StatusID', '=', 1], 'and',
            ['SiteID', '=', siteID]
        ]);

        form.getEditor('CustomerID').option('value', null);
        form.getEditor('CustomerID').option('dataSource', customerDataSource);
        customerDataSource.load();

        form.getEditor('SalesmanID').option('value', null);
        form.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
        salesmanDataSource.load();
    }

    function updateTermOfPaymentEditor(form, termOfPaymentID) {
        var filter = [
            ['Group', '=', 'CustomerTermOfPayment']
        ];

        if ((termOfPaymentID != undefined) && (termOfPaymentID != null)) {
            filter.push('and');
            filter.push(['Value_Int32', '<=', termOfPaymentID]);
        }

        var termOfPaymentDataSource = DataUtility.GetLookupSystemLookupDataSource(filter);

        form.getEditor('TermOfPaymentID').option('value', null);
        form.getEditor('TermOfPaymentID').option('dataSource', termOfPaymentDataSource);
        form.getEditor('TermOfPaymentID').option('value', termOfPaymentID);
        termOfPaymentDataSource.load();
    }


    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }

    function calcProductPriceAndDiscount(e) {
        return CommonUtility.calcProductPriceAndDiscount(
            commonPopupEdit.form().getEditor('TransactionDate').option('value'),
            e.component,
            e.row.rowIndex,
            e.row.data,
            dataSource_vSelectedProductPrices,
            dataSource_vSelectedDiscountGroup,
            false
        );
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            salesOrderSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            salesOrderSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummaryArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            salesOrderSummaryDataGrid().option('dataSource').store(),
            'vSalesOrderSummaryViewModel',
            summary
        );
    }

    function createSummaryDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vSalesOrderSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyOrderConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyOrderConvColumn]()));
        commands.append('&nbsp;');

        if (isLotNumberEntryRequired) {
            var column = qtyOrderConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyOrderConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = salesOrderSummaryDataGrid().option('editing');
        var selection = salesOrderSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        salesOrderSummaryDataGrid().option('editing', option);
        salesOrderSummaryDataGrid().option('selection', selection);
        salesOrderSummaryNewRow().option('disabled', !allowed);
        salesOrderSummaryDeleteRows().option('disabled', true);
        salesOrderSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vSalesOrders.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vSalesOrderViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesOrderViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Sales Order');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        var summaryForm = salesOrderSummaryForm();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var doDocumentCode = data.DODocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            documentCode = previewDocumentCode(data.SiteCode());
            doDocumentCode = previewDODocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if ((data.DocumentStatusID() == 1) && !isLotNumberEntryRequired) { // Draft
                //dataSource_vStockOnHandAvailable = [];
                //dataSource_vStockOnHandAvailableByProduct = [];
                ////downloadProductLot(function () {
                //    for (var i = 0; i < summaries.length; i++) {
                //        var e = {
                //            data: summaries[i].toJS()
                //        };
                //        addDummyData(e, summaries);
                //    }
                //});
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) ||
                (data.DocumentStatusID() == 4)) // Posted, Discarded or Voided
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        salesOrderPrintDO().option('disabled', newData);
        salesOrderPost().option('disabled', newData || disabled);
        salesOrderDiscard().option('disabled', newData || disabled);
        salesOrderVoid().option('disabled', (data.DocumentStatusID() != 2));
        salesOrderSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        var priceGroupID = data.PriceGroupID();
        var discountGroupID = data.DiscountGroupID();

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());
        updateTermOfPaymentEditor(form, data.TermOfPaymentID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('CustomerID').option('value', data.CustomerID());
        form.getEditor('SalesmanID').option('value', data.SalesmanID());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('TermOfPaymentID').option('value', data.TermOfPaymentID());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());
        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        //summaryForm.getEditor('DocumentStatusReason').option('value', data.DocumentStatusReason());

        form.getEditor('PODocumentCode').option('value', data.PODocumentCode());
        form.getEditor('POTransactionDate').option('value', data.POTransactionDate());

        form.getEditor('DODocumentCode').option('value', doDocumentCode);
        form.getEditor('DOShipmentDate').option('value', data.DOShipmentDate());
        form.getEditor('DOReceivedDate').option('value', data.DOReceivedDate());
        form.getEditor('DOPrintedCount').option('value', data.DOPrintedCount());
        form.getEditor('DOLastPrintedDate').option('value', data.DOLastPrintedDate());

        summaryForm.getEditor('TotalGross').option('value', CommonUtility.getNumberFormat(data.TotalGross()));
        summaryForm.getEditor('TotalTax').option('value', CommonUtility.getNumberFormat(data.TotalTax()));
        summaryForm.getEditor('Total').option('value', CommonUtility.getNumberFormat(data.Total()));

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('CustomerID').option('readOnly', disabled);
        form.getEditor('SalesmanID').option('readOnly', disabled);
        form.getEditor('TermOfPaymentID').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);

        //summaryForm.getEditor('DocumentStatusReason').option('readOnly', disabled);

        form.getEditor('PODocumentCode').option('readOnly', disabled);
        form.getEditor('POTransactionDate').option('readOnly', disabled);

        form.getEditor('DOShipmentDate').option('readOnly', disabled);
        form.getEditor('DOReceivedDate').option('readOnly', disabled);

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
            form.getEditor('DOShipmentDate').option('value', today);
            //form.getEditor('DOReceivedDate').option('value', today);
        } else {
            if (priceGroupID)
                data.PriceGroupID(priceGroupID);

            if (discountGroupID)
                data.DiscountGroupID(discountGroupID);

            dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                ['PriceGroupID', '=', data.PriceGroupID()]);

            dataSource_vSelectedDiscountGroup =
                Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(data.DiscountGroupID());
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = salesOrderSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();
        var summaryForm = salesOrderSummaryForm();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = salesOrderSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Order Details.';
                isValid = false;
            }
        }

        //var documentStatusReason = summaryForm.getEditor('DocumentStatusReason').option('value');
        //if (isValid && ((documentStatusReason == null) || (documentStatusReason == ''))) {
        //    for (var i = 0; i < summaries.length; i++) {
        //        if (((summaries[i].PriceDate() != undefined) || (summaries[i].PriceDate() != null)) ||
        //            (summaries[i].AddDiscountStrataPercentage() > 0.0)) {
        //            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Price Date/Additional Disc has changed. ' +
        //                'Please specify the Reason for changing Price Date/Additional Disc.'), 'Save Failed');
        //            isValid = false;
        //            break;
        //        }
        //    }
        //}

        var rawTotalGrossPrice = 0;
        var rawTotalPrice = 0;
        var rawTotalDiscountStrata1Amount = 0;
        var rawTotalDiscountStrata2Amount = 0;
        var rawTotalDiscountStrata3Amount = 0;
        var rawTotalDiscountStrata4Amount = 0;
        var rawTotalDiscountStrata5Amount = 0;
        var rawTotalAddDiscountStrataAmount = 0;
        var rawTotalGross = 0;
        var rawTotalTax = 0;
        var rawTotal = 0;
        var totalGrossPrice = 0;
        var totalPrice = 0;
        var totalDiscountStrata1Amount = 0;
        var totalDiscountStrata2Amount = 0;
        var totalDiscountStrata3Amount = 0;
        var totalDiscountStrata4Amount = 0;
        var totalDiscountStrata5Amount = 0;
        var totalAddDiscountStrataAmount = 0;
        var totalGross = 0;
        var totalTax = 0;
        var total = 0;
        var totalWeight = 0;
        var totalDimension = 0;

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyOrder = 0;

                rawTotalGrossPrice += summary.RawSubtotalGrossPrice();
                rawTotalPrice += summary.RawSubtotalPrice();
                rawTotalDiscountStrata1Amount += summary.RawDiscountStrata1Amount();
                rawTotalDiscountStrata2Amount += summary.RawDiscountStrata2Amount();
                rawTotalDiscountStrata3Amount += summary.RawDiscountStrata3Amount();
                rawTotalDiscountStrata4Amount += summary.RawDiscountStrata4Amount();
                rawTotalDiscountStrata5Amount += summary.RawDiscountStrata5Amount();
                rawTotalAddDiscountStrataAmount += summary.RawAddDiscountStrataAmount();
                rawTotalGross += summary.RawSubtotalGross();
                rawTotalTax += summary.RawSubtotalTax();
                rawTotal += summary.RawSubtotal();
                totalGrossPrice += summary.SubtotalGrossPrice();
                totalPrice += summary.SubtotalPrice();
                totalDiscountStrata1Amount += summary.DiscountStrata1Amount();
                totalDiscountStrata2Amount += summary.DiscountStrata2Amount();
                totalDiscountStrata3Amount += summary.DiscountStrata3Amount();
                totalDiscountStrata4Amount += summary.DiscountStrata4Amount();
                totalDiscountStrata5Amount += summary.DiscountStrata5Amount();
                totalAddDiscountStrataAmount += summary.AddDiscountStrataAmount();
                totalGross += summary.SubtotalGross();
                totalTax += summary.SubtotalTax();
                total += summary.Subtotal();
                totalWeight += summary.SubtotalWeight();
                totalDimension += summary.SubtotalDimension();
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];

                    sumQtyOrder += details.QtyOrder();
                }

                if (summary.QtyOrder() != sumQtyOrder) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Order Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();
            
            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.CustomerID(form.getEditor('CustomerID').option('value'));
            data.SalesmanID(form.getEditor('SalesmanID').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.TermOfPaymentID(form.getEditor('TermOfPaymentID').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));
            
            //data.DocumentStatusReason(documentStatusReason);

            data.PODocumentCode(form.getEditor('PODocumentCode').option('value'));
            data.POTransactionDate(form.getEditor('POTransactionDate').option('value'));

            data.DOShipmentDate(form.getEditor('DOShipmentDate').option('value'));
            data.DOReceivedDate(form.getEditor('DOReceivedDate').option('value'));
            data.DOPrintedCount(form.getEditor('DOPrintedCount').option('value'));
            data.DOLastPrintedDate(form.getEditor('DOLastPrintedDate').option('value'));

            data.RawTotalGrossPrice(rawTotalGrossPrice);
            data.RawTotalPrice(rawTotalPrice);
            data.RawTotalDiscountStrata1Amount(rawTotalDiscountStrata1Amount);
            data.RawTotalDiscountStrata2Amount(rawTotalDiscountStrata2Amount);
            data.RawTotalDiscountStrata3Amount(rawTotalDiscountStrata3Amount);
            data.RawTotalDiscountStrata4Amount(rawTotalDiscountStrata4Amount);
            data.RawTotalDiscountStrata5Amount(rawTotalDiscountStrata5Amount);
            data.RawTotalAddDiscountStrataAmount(rawTotalAddDiscountStrataAmount);
            data.RawTotalGross(rawTotalGross);
            data.RawTotalTax(rawTotalTax);
            data.RawTotal(rawTotal);
            data.TotalGrossPrice(totalGrossPrice);
            data.TotalPrice(totalPrice);
            data.TotalDiscountStrata1Amount(totalDiscountStrata1Amount);
            data.TotalDiscountStrata2Amount(totalDiscountStrata2Amount);
            data.TotalDiscountStrata3Amount(totalDiscountStrata3Amount);
            data.TotalDiscountStrata4Amount(totalDiscountStrata4Amount);
            data.TotalDiscountStrata5Amount(totalDiscountStrata5Amount);
            data.TotalAddDiscountStrataAmount(totalAddDiscountStrataAmount);
            data.TotalGross(totalGross);
            data.TotalTax(totalTax);
            data.Total(total);
            data.TotalWeight(totalWeight);
            data.TotalDimension(totalDimension);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            if (dataJS.POTransactionDate)
                dataJS.POTransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.POTransactionDate);

            dataJS.DOShipmentDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOShipmentDate);
            dataJS.DOReceivedDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOReceivedDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyOrder * -1;
                }

                summary.Qty = summary.QtyOrder * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            var dc = $('.dx-popup-normal>.dx-dialog-content');
            if (dc.length == 0)
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printDOEditing(doDocumentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Delivery Order');
        commonPopupIFrame.popupEditOptions.visible(true);

        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.ExtDeliveryOrderReport.url([['DocumentID', '=', doDocumentID]]));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = salesOrderSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option("dataSource").store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length == 0) {
                            items = [ new Dismoyo_Ciptoning_Client.vSalesOrderDetailsViewModel(details) ];
                            dataSourceItems[i].ChildDetails().push(items[0]);
                        }

                        var item = items[0];
                        item.QtyConvL(DXUtility.getValue(dataSourceItems[i], 'QtyConvL'));
                        item.QtyConvM(DXUtility.getValue(dataSourceItems[i], 'QtyConvM'));
                        item.QtyConvS(DXUtility.getValue(dataSourceItems[i], 'QtyConvS'));
                        item.QtyOrder(DXUtility.getValue(dataSourceItems[i], 'QtyOrder'));
                        item.QtyOrderConv(DXUtility.getValue(dataSourceItems[i], 'QtyOrderConv'));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyOrderColumn = 'QtyOrder' + itemStatusName;
        var qtyOrderConvColumn = 'QtyOrderConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyOrderColumn: qtyOrderColumn,
            qtyOrderConvColumn: qtyOrderConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3) ||
            (editData.DocumentStatusID() == 4))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyOrderConv').option('value', data.QtyOrderConv());

        var conversion = CommonUtility.getConversion(
            data.QtyOrderConv(),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyOrder').option('value', conversion.qtyTransaction);

        data = validateSummaryArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vSalesOrderDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyOrder').option('value'),
            'Order',
            'vSalesOrderDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            salesOrderSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();
            var salesmanID = form.getEditor('SalesmanID').option('value');

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
                select: [
                    'ProductID',
                    'ProductCode',
                    'Product',
                    'ProductUOMLID',
                    'ProductUOMMID',
                    'ProductUOMSID',
                    'ProductConversionL',
                    'ProductConversionM',
                    'ProductConversionS'
                ],
                filter: [
                    ['SalesmanID', '=', salesmanID], 'and',
                    ['ProductName', 'notcontains', 'SAMPLE']
                ],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
            }).load()
                .done(function (result) {
                    if (result.length > 0) {
                        var productDataSource = result;

                        var warehouseID = form.getEditor('WarehouseID').option('value');
                        var filters = [];
                        var groupFilterExpr = [];

                        for (var i = 0; i < result.length; i++)
                            DXUtility.addFilterExpression(groupFilterExpr, 'ProductID', '=', result[i].ProductID(), 'or');

                        DXUtility.addGroupFilterExpression(filters, groupFilterExpr, 'and');
                        DXUtility.addFilterExpression(filters, 'WarehouseID', '=', warehouseID, 'and');
                        DXUtility.addFilterExpression(filters, 'QtyOnHandGood', '>', 0, 'and');

                        var dataSource = new DevExpress.data.DataSource({
                            store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                            select: [
                                'ProductID',
                                'ProductLotID',
                                'ProductLotCode',
                                'ProductLot',
                                'ProductLotExpiredDate',
                                'QtyOnHandGood'
                            ],
                            filter: filters,
                            sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                            paginate: false,
                            map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                        });

                        dataSource.load()
                            .done(function (result2) {
                                var product = null;
                                var stockOnHandAvailable = [];
                                var stockOnHandAvailableByProduct = [];
                                for (var i = 0; i < result2.length; i++) {
                                    stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                                    var j = stockOnHandAvailableByProduct.length - 1;
                                    var productID = result2[i].ProductID();
                                    if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                        stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));
                                        j++;
                                        product = $.grep(result, function (e) { return (e.ProductID() == productID); });
                                    } else {
                                        stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                            result2[i].QtyOnHandGood());
                                        stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                            result2[i].QtyOnHandHold());
                                        stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                            result2[i].QtyOnHandBad());
                                    }

                                    stockOnHandAvailable[i].ProductCode(product[0].ProductCode());
                                    stockOnHandAvailable[i].Product(product[0].Product());
                                    stockOnHandAvailable[i].ProductUOMLID(product[0].ProductUOMLID());
                                    stockOnHandAvailable[i].ProductUOMMID(product[0].ProductUOMMID());
                                    stockOnHandAvailable[i].ProductUOMSID(product[0].ProductUOMSID());
                                    stockOnHandAvailable[i].ProductConversionL(product[0].ProductConversionL());
                                    stockOnHandAvailable[i].ProductConversionM(product[0].ProductConversionM());
                                    stockOnHandAvailable[i].ProductConversionS(product[0].ProductConversionS());

                                    stockOnHandAvailableByProduct[j].ProductCode(product[0].ProductCode());
                                    stockOnHandAvailableByProduct[j].Product(product[0].Product());
                                    stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].ProductUOMLID());
                                    stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].ProductUOMMID());
                                    stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].ProductUOMSID());
                                    stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ProductConversionL());
                                    stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ProductConversionM());
                                    stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ProductConversionS());
                                }

                                dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                                dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                                if (dataSource_vStockOnHandAvailable.length == 0)
                                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                        'Product lot stock with item status Good for the selected warehouse is empty.'),
                                        'New Order Details Failed');
                                else
                                    productLotLoaded();

                                hideLoadingPanel();
                            })
                            .fail(function (error) {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                                hideLoadingPanel();
                            });
                    } else {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected Salesman does not have any reference products.'),
                            'New Order Details Failed');
                        hideLoadingPanel();
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman', 'Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order',
        colCount: 3,
        colSpan: 3,
        items: [{
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Salesman',
                    ['Warehouse'],
                    []);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var siteID = null;

                    if (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
                        siteID = collapsibleFilter.form().getEditor('SiteID').option('value');
                    } else {
                        siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
                    }

                    var childEditor = collapsibleFilter.form().getEditor('SalesmanID');
                    var childSelectedItem = childEditor.option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['WarehouseID']() != e.value))
                        childEditor.option('value', null);

                    if (siteID == undefined) {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            ['WarehouseID', '=', e.value] : null));
                    } else {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            [['WarehouseID', '=', e.value], "and",
                            ['SiteID', '=', siteID]] : ['SiteID', '=', siteID]));
                    }
                }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                    select: ['ID', 'Customer', 'SiteID'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); },
                    filter: (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                }),
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // CustomerID
        value = form.getEditor('CustomerID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CustomerID', '=', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrders.AddNewSalesOrder');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrders.EditSalesOrder');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesOrders_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (commonGridView.dataGridOptions.editing.allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Customer', caption: 'Customer', width: '200px'
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px'
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'TotalGross', caption: 'Total DPP', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'TotalTax', caption: 'Total VAT', width: '80px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'Total', caption: 'Total', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px',
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var salesOrderSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderSummaryDataGrid', 'dxDataGrid'); }

    var salesOrderSummaryForm = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderSummaryForm', 'dxForm'); }

    var salesOrderPrintDO = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderPrintDO', 'dxButton'); }
    var salesOrderPost = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderPost', 'dxButton'); }
    var salesOrderDiscard = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderDiscard', 'dxButton'); }
    var salesOrderVoid = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderVoid', 'dxButton'); }
    var salesOrderSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderSaveAsDraftAndNew', 'dxButton'); }
    var salesOrderSave = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var salesOrderSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderSummaryNewRow', 'dxButton'); }
    var salesOrderSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vSalesOrders_salesOrderSummaryDeleteRows', 'dxButton'); }
    var intrvlSO;

    var isEditorEnabledSO = function () {
        var dxCommandEdit = $('.dx-command-edit', '[id$=SummaryDataGrid]');
        for (var i = 0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf("Save") >= 0)
                return true;            
        }

        return false;
    }

    var intrvlHandlerSO = function () {
        var disabled = false;
        var newData = true;
        var data = commonPopupEdit.popupEditData();
        if (data.DocumentStatusID()) {
            newData = false;
        }
        if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) || (data.DocumentStatusID() == 4)) {
            disabled = true;
        }
        if (!isEditorEnabledSO()) {
            if (salesOrderSave() && salesOrderPost() && salesOrderVoid() & salesOrderSaveAsDraftAndNew())
                salesOrderSave().option("disabled", disabled);
            salesOrderSave().option("disabled", disabled);
            salesOrderPost().option("disabled", newData || disabled);
            salesOrderDiscard().option("disabled", newData || disabled);
            salesOrderVoid().option("disabled", (data.DocumentStatusID() != 2));
            salesOrderSaveAsDraftAndNew().option("disabled", disabled);
            clearInterval(intrvlSO);
        }
    };


    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Order Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vSalesOrders_salesOrderSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        salesOrderSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Order Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vSalesOrders_salesOrderSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(salesOrderSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vSalesOrders_salesOrderSummaryDataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                salesOrderSave().option("disabled", true);
                salesOrderPost().option("disabled", true);
                salesOrderDiscard().option("disabled", true);
                salesOrderVoid().option("disabled", true);
                salesOrderSaveAsDraftAndNew().option("disabled", true);

                intrvlSO = setInterval(intrvlHandlerSO, 500);

                info.data.QtyOrder = 0;
                info.data.QtyOrderConv = '0/0/0';
                info.data.AddDiscountStrataPercentage = 0;
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if ((e.row != undefined) && (e.row.rowIndex != undefined))
                        e.component.editRowIndex = e.row.rowIndex;

                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAvailableByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vSalesOrders_productIDLookup', ea.element, 1); // Good
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 1); // Good
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                            calcProductPriceAndDiscount(e);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'PriceDate') {
                        e.editorElement.dxDateBox({
                            showClearButton: true,
                            placeholder: 'Transaction Date',
                            value: e.value,
                            onValueChanged: function (ea) {
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'QtyOrderConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                salesOrderSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                                calcProductPriceAndDiscount(e);

                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'AddDiscountStrataPercentage') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            // Added by Andhika 2016.03.17 Fixing Additional Discount Decimal Input ------------------
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 190 || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            //----------------------------------------------------------------------------------------
                            onValueChanged: function (ea) {
                                if ((ea.value == null) || (ea.value == ''))
                                    ea.value = 0;

                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderSummaryForm(), info.component);
                salesOrderSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderSummaryForm(), info.component);
                salesOrderSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );

                CommonUtility.updateSalesOrderSummaryForm(salesOrderSummaryForm(), info.component);
            },
            onEditingStart: function (info) {
                salesOrderSave().option('disabled', true);
                salesOrderPost().option('disabled', true);
                salesOrderDiscard().option('disabled', true);
                salesOrderVoid().option('disabled', true);
                salesOrderSaveAsDraftAndNew().option('disabled', true);
                intrvlSO = setInterval(intrvlHandlerSO, 500);
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyOrderConv) {
                    var conversion = CommonUtility.getConversion(
                        info.newData.QtyOrderConv,
                        DXUtility.getValue(info.oldData, 'ProductConversionL'),
                        DXUtility.getValue(info.oldData, 'ProductConversionM'),
                        DXUtility.getValue(info.oldData, 'ProductConversionS')
                    );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyOrder = conversion.qtyTransaction;
                }

                info.newData.SubtotalWeight = DXUtility.getValue(info.oldData, 'SubtotalWeight');
                info.newData.SubtotalDimension = DXUtility.getValue(info.oldData, 'SubtotalDimension');
                info.newData.UnitGrossPrice = DXUtility.getValue(info.oldData, 'UnitGrossPrice');

                info.newData.RawSubtotalGrossPrice = DXUtility.getValue(info.oldData, 'RawSubtotalGrossPrice');
                info.newData.RawSubtotalPrice = DXUtility.getValue(info.oldData, 'RawSubtotalPrice');
                info.newData.RawDiscountStrata1Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata1Amount');
                info.newData.RawDiscountStrata2Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata2Amount');
                info.newData.RawDiscountStrata3Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata3Amount');
                info.newData.RawDiscountStrata4Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata4Amount');
                info.newData.RawDiscountStrata5Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata5Amount');
                info.newData.RawAddDiscountStrataAmount = DXUtility.getValue(info.oldData, 'RawAddDiscountStrataAmount');
                info.newData.RawSubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata1');
                info.newData.RawSubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata2');
                info.newData.RawSubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata3');
                info.newData.RawSubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata4');
                info.newData.RawSubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata5');
                info.newData.RawSubtotalGross = DXUtility.getValue(info.oldData, 'RawSubtotalGross');
                info.newData.RawSubtotal = DXUtility.getValue(info.oldData, 'RawSubtotal');

                info.newData.SubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata1');
                info.newData.SubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata2');
                info.newData.SubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata3');
                info.newData.SubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata4');
                info.newData.SubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata5');
                info.newData.TaxPercentage = DXUtility.getValue(info.oldData, 'TaxPercentage');
                info.newData.SubtotalGrossPrice = DXUtility.getValue(info.oldData, 'SubtotalGrossPrice');
                info.newData.SubtotalPrice = DXUtility.getValue(info.oldData, 'SubtotalPrice');

                info.newData.UnitPrice = info.component.cellValue(info.component.editRowIndex, 'UnitPrice');

                //info.newData.DiscountStrata1Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Percentage');
                //info.newData.DiscountStrata1Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Amount');

                //info.newData.DiscountStrata2Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Percentage');
                //info.newData.DiscountStrata2Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Amount');

                //info.newData.DiscountStrata3Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Percentage');
                //info.newData.DiscountStrata3Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Amount');

                //info.newData.DiscountStrata4Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Percentage');
                //info.newData.DiscountStrata4Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Amount');

                //info.newData.DiscountStrata5Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Percentage');
                //info.newData.DiscountStrata5Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Amount');

                info.newData.DiscountStrata1Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata1Percentage');
                info.newData.DiscountStrata1Amount = DXUtility.getValue(info.oldData, 'DiscountStrata1Amount');

                info.newData.DiscountStrata2Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata2Percentage');
                info.newData.DiscountStrata2Amount = DXUtility.getValue(info.oldData, 'DiscountStrata2Amount');

                info.newData.DiscountStrata3Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata3Percentage');
                info.newData.DiscountStrata3Amount = DXUtility.getValue(info.oldData, 'DiscountStrata3Amount');

                info.newData.DiscountStrata4Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata4Percentage');
                info.newData.DiscountStrata4Amount = DXUtility.getValue(info.oldData, 'DiscountStrata4Amount');

                info.newData.DiscountStrata5Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata5Percentage');
                info.newData.DiscountStrata5Amount = DXUtility.getValue(info.oldData, 'DiscountStrata5Amount');


                info.newData.AddDiscountStrataAmount = info.component.cellValue(info.component.editRowIndex, 'AddDiscountStrataAmount');

                info.newData.SubtotalGross = info.component.cellValue(info.component.editRowIndex, 'SubtotalGross');
                info.newData.SubtotalTax = info.component.cellValue(info.component.editRowIndex, 'SubtotalTax');
                info.newData.Subtotal = info.component.cellValue(info.component.editRowIndex, 'Subtotal');

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
                if (qtyOnHand == undefined)
                    qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

                var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
                if (qtyOrder == undefined)
                    qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');
                
                if (qtyOrder <= 0) {
                    e.errorText = 'Order Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && (qtyOrder > qtyOnHand)) {
                    e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(salesOrderSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (salesOrderSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 1' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 2' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 3' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 4' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="1">' + 'Disc 1-5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Additional Disc' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'PriceDate', caption: 'Price Date', width: '140px',
                dataType: 'date'
            }, {
                dataField: 'UnitPrice', caption: 'Unit Price', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
            }, {
                dataField: 'QtyOrderConv', caption: 'Qty (L/M/S)', width: '100px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOrderConv', 1)); // Good
                }
            },
            //{
            //    dataField: 'DiscountStrata1Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata1Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //},
            {
                dataField: 'DiscountStrataDefaultAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
                calculateCellValue: function (data) {
                    var discountStrata1Amount = DXUtility.getValue(data, 'DiscountStrata1Amount');
                    var discountStrata2Amount = DXUtility.getValue(data, 'DiscountStrata2Amount');
                    var discountStrata3Amount = DXUtility.getValue(data, 'DiscountStrata3Amount');
                    var discountStrata4Amount = DXUtility.getValue(data, 'DiscountStrata4Amount');
                    var discountStrata5Amount = DXUtility.getValue(data, 'DiscountStrata5Amount');

                    if (isNaN(discountStrata1Amount)) discountStrata1Amount = 0;
                    if (isNaN(discountStrata2Amount)) discountStrata2Amount = 0;
                    if (isNaN(discountStrata3Amount)) discountStrata3Amount = 0;
                    if (isNaN(discountStrata4Amount)) discountStrata4Amount = 0;
                    if (isNaN(discountStrata5Amount)) discountStrata5Amount = 0;

                    return discountStrata1Amount + discountStrata2Amount + discountStrata3Amount +
                        discountStrata4Amount + discountStrata5Amount;
                }
            }, {
                dataField: 'AddDiscountStrataPercentage', caption: '%', width: '40px',
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'AddDiscountStrataAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalGross', caption: 'DPP', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalTax', caption: 'VAT', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'Subtotal', caption: 'Subtotal', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }]
        }));

        content.append($('<div id="vSalesOrders_salesOrderSummaryForm" style="margin-top: 9px;">').dxForm({
            deferRendering: false,
            colCount: 4,
            showColonAfterLabel: false,
            labelLocation: 'left',
            alignItemLabels: true,
            items: [{
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'TotalGross',
                label: { text: 'Total DPP' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            },
            {
                itemType: 'empty',
                colSpan: 2
            },
            //{
            //    dataField: 'DocumentStatusReason',
            //    label: { location: 'top', text: 'Reason for changing Price Date/Additional Disc' },
            //    colSpan: 2,
            //    editorOptions: {
            //        maxLength: 200,
            //        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            //    }
            //},
            {
                itemType: 'empty',
                colSpan: 1
            }, {
                dataField: 'TotalTax',
                label: { text: 'Total VAT' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'Total',
                label: { text: 'Total' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrintDO = $('<div id="vSalesOrders_salesOrderPrintDO" style="margin-right: 32px;">').dxButton({
            text: 'Print DO', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrintDO(this); }
        });

        var commandPost = $('<div id="vSalesOrders_salesOrderPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vSalesOrders_salesOrderDiscard">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandVoid = $('<div id="vSalesOrders_salesOrderVoid" style="margin-right: 16px;">').dxButton({
            text: 'Void', icon: 'icons8-delete-red',
            onClick: function () { commonPopupEdit.events.performVoid(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vSalesOrders_salesOrderSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrintDO);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandVoid);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrintDO = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printDOEditing(data.DODocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performVoid = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Void this transaction?', 'Void Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(4, 3); // Void and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area', 'Site']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var preDODocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        preDODocumentCode = previewDODocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                    form.getEditor('DODocumentCode').option('value', preDODocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxLookup',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: [
                    'Code',
                    'Name',
                    'Address1',
                    'Address2',
                    'Address3'
                ],
                searchPlaceholder: 'Customer/Address',
                searchEnabled: false,
                popupWidth: '1082px',
                showPopupTitle: false,
                fieldEditEnabled: true,
                onOpened: function (e) { },
                onClosed: function (e) { },
                onContentReady: function (e) {
                    var form = commonPopupEdit.form();
                    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                    CommonUtility.createCustomerLookupHeader('vSalesOrders_customerIDLookup', e.element,
                        getValueFromSystemParameter('Customer.Category1'),
                        user.SiteID(), form);
                },
                itemTemplate: function (data, index, element) {
                    return CommonUtility.createCustomerLookupItem(data, element);
                },
                onValueChanged: function (e) {
                    if (e.value) {
                        var item = e.selectedItem;
                        if (item) {
                            var data = commonPopupEdit.popupEditData();
                            var form = commonPopupEdit.form();
                            var salesmanID = null;
                            var warehouseID = null;
                            var termOfPaymentID = null;

                            dataSource_vSelectedProductPrices = undefined;
                            dataSource_vSelectedDiscountGroup = undefined;

                            data.PriceGroupID(undefined);
                            data.DiscountGroupID(undefined);
                            if (item) {
                                salesmanID = item.SalesmanID();
                                warehouseID = item.WarehouseID();
                                termOfPaymentID = item.TermOfPaymentID();
                                dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                                    ['PriceGroupID', '=', item.PriceGroupID()]);

                                dataSource_vSelectedDiscountGroup =
                                    Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(item.DiscountGroupID());

                                data.PriceGroupID(item.PriceGroupID());
                                data.DiscountGroupID(item.DiscountGroupID());
                            }

                            e.component.option('value', e.value);
                            form.getEditor('SalesmanID').option('value', salesmanID);
                            form.getEditor('WarehouseID').option('value', warehouseID);

                            updateTermOfPaymentEditor(form, termOfPaymentID);
                        }
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();
                    var warehouseID = null;
                    var data = commonPopupEdit.popupEditData();

                    if (e.selectedItem) {
                        warehouseID = e.selectedItem.WarehouseID();
                    }

                    form.getEditor('WarehouseID').option('value', warehouseID);
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];
                    if (e.value) {
                        salesOrderSummaryDataGrid().cancelEditData();
                        data.ChildSummaries([]);
                        salesOrderSummaryDataGrid().option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = salesOrderSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'TermOfPaymentID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Term of Payment' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }                
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }, {
        itemType: 'group',
        caption: 'Purchase Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'PODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'POTransactionDate',
            label: { text: 'Transaction Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    //form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }]
    }, {
        itemType: 'group',
        caption: 'Delivery Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        },
        {
            dataField: 'DOShipmentDate',
            label: { text: 'Shipment Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOReceivedDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'DOPrintedCount',
            label: { text: 'Printed Count' },
            colSpan: 1,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOLastPrintedDate',
            label: { text: 'Last Printed Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOReceivedDate',
            label: { text: 'Received Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyOrder = 0;
        info.data.QtyOrderConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                    var productLotColumns = getProductLotColumns(itemStatusID);

                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vSalesOrders_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyOrderConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    // Added by Andhika 2016.03.17 Fixing Issue Negatif Value -----
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    onEnterKey: function (ea) {
                        salesOrderSummaryDataGrid().saveEditData();
                    },
                    onValueChanged: function (ea) {
                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vSalesOrderDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

        var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
        if (qtyOrder == undefined)
            qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');
        
        if (qtyOrder <= 0) {
            e.errorText = 'Order Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyOrder > qtyOnHand)) {
            e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyOrderConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyOrderConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyOrderConv',
                'QtyOrder');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyOrderConv', caption: 'Order Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyOrder',
            label: { text: 'Order Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOrderConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_order_32px.png',

        dataSource_vSalesOrderDetails: dataSource_vSalesOrderDetails,
        dataSource_vSalesOrderSummary: dataSource_vSalesOrderSummary,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        salesOrderSummaryDataGrid: salesOrderSummaryDataGrid,
        salesOrderPost: salesOrderPost,
        salesOrderDiscard: salesOrderDiscard,
        salesOrderVoid: salesOrderVoid,
        salesOrderSaveAsDraftAndNew: salesOrderSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vSalesOrderFOCs = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevSalesOrderFOCsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesOrderFOCs');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCs.off('modified', handlevSalesOrderFOCsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCs,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderFOCViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCs.on('modified', handlevSalesOrderFOCsModification);



    var dataSource_vSalesOrderFOCDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel(item); }
    });

    var dataSource_vSalesOrderFOCSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;
    var dataSource_vSelectedProductPrices;
    var dataSource_vSelectedDiscountGroup;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-05-(Auto Generated)';
    }

    function previewDODocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-10-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var customerDataSource = new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vCustomers,
            select: [
                'ID',
                'Customer',
                'Address',
                'Category1',
                'SalesmanID',
                'Salesman',
                'WarehouseID',
                'TermOfPaymentID',
                'PriceGroupID',
                'DiscountGroupID',
                'SiteID'
            ],
            filter: [
                ['IsDeleted', '=', false], 'and',
                ['StatusID', '=', 1], 'and',
                ['SiteID', '=', siteID]
            ],
            map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
        });

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource([
            ['IsDeleted', '=', false], 'and',
            ['StatusID', '=', 1], 'and',
            ['SiteID', '=', siteID]
        ]);

        form.getEditor('CustomerID').option('value', null);
        form.getEditor('CustomerID').option('dataSource', customerDataSource);
        customerDataSource.load();

        form.getEditor('SalesmanID').option('value', null);
        form.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
        salesmanDataSource.load();
    }

    function updateTermOfPaymentEditor(form, termOfPaymentID) {
        var filter = [
            ['Group', '=', 'CustomerTermOfPayment']
        ];

        if ((termOfPaymentID != undefined) && (termOfPaymentID != null)) {
            filter.push('and');
            filter.push(['Value_Int32', '<=', termOfPaymentID]);
        }

        var termOfPaymentDataSource = DataUtility.GetLookupSystemLookupDataSource(filter);

        form.getEditor('TermOfPaymentID').option('value', null);
        form.getEditor('TermOfPaymentID').option('dataSource', termOfPaymentDataSource);
        form.getEditor('TermOfPaymentID').option('value', termOfPaymentID);
        termOfPaymentDataSource.load();
    }


    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }

    function calcProductPriceAndDiscount(e) {
        return CommonUtility.calcProductPriceAndDiscount(
            commonPopupEdit.form().getEditor('TransactionDate').option('value'),
            e.component,
            e.row.rowIndex,
            e.row.data,
            dataSource_vSelectedProductPrices,
            dataSource_vSelectedDiscountGroup,
            true
        );
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            salesOrderFOCSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            salesOrderFOCSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummaryArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            salesOrderFOCSummaryDataGrid().option('dataSource').store(),
            'vSalesOrderFOCSummaryViewModel',
            summary
        );
    }

    function createSummaryDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vSalesOrderFOCSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyOrderConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyOrderConvColumn]()));
        commands.append('&nbsp;');

        if (isLotNumberEntryRequired) {
            var column = qtyOrderConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyOrderConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = salesOrderFOCSummaryDataGrid().option('editing');
        var selection = salesOrderFOCSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        salesOrderFOCSummaryDataGrid().option('editing', option);
        salesOrderFOCSummaryDataGrid().option('selection', selection);
        salesOrderFOCSummaryNewRow().option('disabled', !allowed);
        salesOrderFOCSummaryDeleteRows().option('disabled', true);
        salesOrderFOCSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCs,
            select: [
                'DocumentID',
                'DocumentCode',
                'TransactionDate',
                'PODocumentID',
                'PODocumentCode',
                'POTransactionDate',
                'SalesmanID',
                'WarehouseID',
                'SiteID',
                'CompanyID',
                'Company',
                'AreaID',
                'RegionID',
                'TerritoryID',
                'CustomerID',
                'PriceGroupID',
                'DiscountGroupID',
                'TermOfPaymentID',
                'ReferenceNumber',
                'DODocumentID',
                'DODocumentCode',
                'DOShipmentDate',
                'DOReceivedDate',
                'DOPrintedCount',
                'DOLastPrintedDate',
                'RawTotalGrossPrice',
                'RawTotalPrice',
                'RawTotalDiscountStrata1Amount',
                'RawTotalDiscountStrata2Amount',
                'RawTotalDiscountStrata3Amount',
                'RawTotalDiscountStrata4Amount',
                'RawTotalDiscountStrata5Amount',
                'RawTotalAddDiscountStrataAmount',
                'RawTotalGross',
                'RawTotalTax',
                'RawTotal',
                'TotalGrossPrice',
                'TotalPrice',
                'TotalDiscountStrata1Amount',
                'TotalDiscountStrata2Amount',
                'TotalDiscountStrata3Amount',
                'TotalDiscountStrata4Amount',
                'TotalDiscountStrata5Amount',
                'TotalAddDiscountStrataAmount',
                'TotalGross',
                'TotalTax',
                'Total',
                'TotalWeight',
                'TotalDimension',
                'AddDiscountStrataReason',
                'DocumentStatusID',
                'DocumentStatusReason'
            ],
            filter: ['DocumentID', '=', documentID],
            paginate: false,
            map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderFOCViewModel(item); }
        }).load()
            .done(function (result) {
                if (result.length > 0) {
                    new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCSummaries,
                        select: [
                            'DocumentID',
                            'ProductID',
                            'ProductCode',
                            'Product',
                            'ProductUOMLID',
                            'ProductUOMMID',
                            'ProductUOMSID',
                            'ProductWeight',
                            'ProductDimensionL',
                            'ProductDimensionW',
                            'ProductDimensionH',
                            'ProductConversionL',
                            'ProductConversionM',
                            'ProductConversionS',
                            'QtyOnHand',
                            'QtyConvL',
                            'QtyConvM',
                            'QtyConvS',
                            'Qty',
                            'QtyOrderConv',
                            'QtyOrder',
                            'UnitGrossPrice',
                            'UnitPrice',
                            'DiscountStrata1Percentage',
                            'DiscountStrata2Percentage',
                            'DiscountStrata3Percentage',
                            'DiscountStrata4Percentage',
                            'DiscountStrata5Percentage',
                            'AddDiscountStrataPercentage',
                            'TaxPercentage',
                            'RawSubtotalGrossPrice',
                            'RawSubtotalPrice',
                            'RawSubtotalDiscountStrata1',
                            'RawDiscountStrata1Amount',
                            'RawSubtotalDiscountStrata2',
                            'RawDiscountStrata2Amount',
                            'RawSubtotalDiscountStrata3',
                            'RawDiscountStrata3Amount',
                            'RawSubtotalDiscountStrata4',
                            'RawDiscountStrata4Amount',
                            'RawSubtotalDiscountStrata5',
                            'RawDiscountStrata5Amount',
                            'RawAddDiscountStrataAmount',
                            'RawSubtotalGross',
                            'RawSubtotalTax',
                            'RawSubtotal',
                            'SubtotalGrossPrice',
                            'SubtotalPrice',
                            'SubtotalDiscountStrata1',
                            'DiscountStrata1Amount',
                            'SubtotalDiscountStrata2',
                            'DiscountStrata2Amount',
                            'SubtotalDiscountStrata3',
                            'DiscountStrata3Amount',
                            'SubtotalDiscountStrata4',
                            'DiscountStrata4Amount',
                            'SubtotalDiscountStrata5',
                            'DiscountStrata5Amount',
                            'AddDiscountStrataAmount',
                            'SubtotalGross',
                            'SubtotalTax',
                            'Subtotal',
                            'SubtotalWeight',
                            'SubtotalDimension'
                        ],
                        filter: ['DocumentID', '=', documentID],
                        sort: ['ProductID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel(item); }
                    }).load()
                        .done(function (result2) {
                            if (result2.length > 0) {
                                new DevExpress.data.DataSource({
                                    store: Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCDetails,
                                    select: [
                                        'DocumentID',
                                        'ProductID',
                                        'ProductLotID',
                                        'ProductLotCode',
                                        'QtyOnHand',
                                        'QtyConvL',
                                        'QtyConvM',
                                        'QtyConvS',
                                        'Qty',
                                        'QtyOrderConv',
                                        'QtyOrder'
                                    ],
                                    filter: ['DocumentID', '=', documentID],
                                    sort: ['ProductID', 'ProductLotID'],
                                    paginate: false,
                                    map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel(item); }
                                }).load()
                                    .done(function (result3) {
                                        if (result3.length > 0) {
                                            var summaries = result2;
                                            var j = -1;
                                            for (var i = 0; i < result3.length; i++) {
                                                var details = result3[i];
                                                if ((i == 0) || (summaries[j].ProductID() != details.ProductID())) {
                                                    j++;
                                                    summaries[j].ChildDetails = ko.observableArray([]);
                                                }

                                                details.ProductCode(summaries[j].ProductCode());
                                                details.Product(summaries[j].Product());
                                                details.ProductUOMLID(summaries[j].ProductUOMLID());
                                                details.ProductUOMMID(summaries[j].ProductUOMMID());
                                                details.ProductUOMSID(summaries[j].ProductUOMSID());
                                                details.ProductConversionL(summaries[j].ProductConversionL());
                                                details.ProductConversionM(summaries[j].ProductConversionM());
                                                details.ProductConversionS(summaries[j].ProductConversionS());

                                                summaries[j].ChildDetails().push(details);
                                            }

                                            result[0].ChildSummaries(summaries);

                                            hideLoadingPanel();

                                            isDataGridRefreshRequired = refreshRequired;
                                            openEditing(result[0]);
                                        } else {
                                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The details of selected data is not found.'), 'Load Failed');
                                            hideLoadingPanel();
                                        }

                                    })
                                    .fail(function (error) {
                                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load details of selected data.'), 'Load Failed');
                                        hideLoadingPanel();
                                    });
                            } else {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The summary of selected data is not found.'), 'Load Failed');
                                hideLoadingPanel();
                            }
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load summary of selected data.'), 'Load Failed');
                            hideLoadingPanel();
                        });
                } else {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected data is not found.'), 'Load Failed');
                    hideLoadingPanel();
                }
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });

        //Dismoyo_Ciptoning_Client.DB.vSalesOrderFOCs.byKey(
        //    documentID, { expand: ['ChildSummaries/ChildDetails'] })
        //    .done(function (result) {
        //        hideLoadingPanel();

        //        isDataGridRefreshRequired = refreshRequired;
        //        openEditing(new Dismoyo_Ciptoning_Client.vSalesOrderFOCViewModel(result));
        //    })
        //    .fail(function (error) {
        //        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
        //        hideLoadingPanel();
        //    });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesOrderFOCViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Sales Order FOC');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        var summaryForm = salesOrderFOCSummaryForm();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var doDocumentCode = data.DODocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            documentCode = previewDocumentCode(data.SiteCode());
            doDocumentCode = previewDODocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if (data.DocumentStatusID() == 1 && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];
                    form.getEditor('SalesmanID').option('value', data.SalesmanID());

                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) ||
                (data.DocumentStatusID() == 4)) // Posted, Discarded or Voided
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        salesOrderFOCPrintDO().option('disabled', newData);
        salesOrderFOCPost().option('disabled', newData || disabled);
        salesOrderFOCDiscard().option('disabled', newData || disabled);
        salesOrderFOCVoid().option('disabled', (data.DocumentStatusID() != 2));
        salesOrderFOCSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        var priceGroupID = data.PriceGroupID();
        var discountGroupID = data.DiscountGroupID();

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());
        updateTermOfPaymentEditor(form, data.TermOfPaymentID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('CustomerID').option('value', data.CustomerID());
        form.getEditor('SalesmanID').option('value', data.SalesmanID());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('TermOfPaymentID').option('value', data.TermOfPaymentID());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());
        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        //summaryForm.getEditor('DocumentStatusReason').option('value', data.DocumentStatusReason());

        form.getEditor('PODocumentCode').option('value', data.PODocumentCode());
        form.getEditor('POTransactionDate').option('value', data.POTransactionDate());

        form.getEditor('DODocumentCode').option('value', doDocumentCode);
        form.getEditor('DOShipmentDate').option('value', data.DOShipmentDate());
        form.getEditor('DOReceivedDate').option('value', data.DOReceivedDate());
        form.getEditor('DOPrintedCount').option('value', data.DOPrintedCount());
        form.getEditor('DOLastPrintedDate').option('value', data.DOLastPrintedDate());

        summaryForm.getEditor('TotalGross').option('value', CommonUtility.getNumberFormat(data.TotalGross()));
        summaryForm.getEditor('TotalTax').option('value', CommonUtility.getNumberFormat(data.TotalTax()));
        summaryForm.getEditor('Total').option('value', CommonUtility.getNumberFormat(data.Total()));

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('CustomerID').option('readOnly', disabled);
        form.getEditor('SalesmanID').option('readOnly', disabled);
        form.getEditor('TermOfPaymentID').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);

        //summaryForm.getEditor('DocumentStatusReason').option('readOnly', disabled);

        form.getEditor('PODocumentCode').option('readOnly', disabled);
        form.getEditor('POTransactionDate').option('readOnly', disabled);

        form.getEditor('DOShipmentDate').option('readOnly', disabled);
        form.getEditor('DOReceivedDate').option('readOnly', disabled);

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
            form.getEditor('DOShipmentDate').option('value', today);
            //form.getEditor('DOReceivedDate').option('value', today);
        } else {
            if (priceGroupID)
                data.PriceGroupID(priceGroupID);

            if (discountGroupID)
                data.DiscountGroupID(discountGroupID);

            dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                ['PriceGroupID', '=', data.PriceGroupID()]);

            dataSource_vSelectedDiscountGroup =
                Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(data.DiscountGroupID());
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = salesOrderFOCSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();
        var summaryForm = salesOrderFOCSummaryForm();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = salesOrderFOCSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Order Details.';
                isValid = false;
            }
        }

        //var documentStatusReason = summaryForm.getEditor('DocumentStatusReason').option('value');
        //if (isValid && ((documentStatusReason == null) || (documentStatusReason == ''))) {
        //    for (var i = 0; i < summaries.length; i++) {
        //        if (((summaries[i].PriceDate() != undefined) || (summaries[i].PriceDate() != null)) ||
        //            (summaries[i].AddDiscountStrataPercentage() > 0.0)) {
        //            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Price Date/Additional Disc has changed. ' +
        //                'Please specify the Reason for changing Price Date/Additional Disc.'), 'Save Failed');
        //            isValid = false;
        //            break;
        //        }
        //    }
        //}

        var rawTotalGrossPrice = 0;
        var rawTotalPrice = 0;
        var rawTotalDiscountStrata1Amount = 0;
        var rawTotalDiscountStrata2Amount = 0;
        var rawTotalDiscountStrata3Amount = 0;
        var rawTotalDiscountStrata4Amount = 0;
        var rawTotalDiscountStrata5Amount = 0;
        var rawTotalAddDiscountStrataAmount = 0;
        var rawTotalGross = 0;
        var rawTotalTax = 0;
        var rawTotal = 0;
        var totalGrossPrice = 0;
        var totalPrice = 0;
        var totalDiscountStrata1Amount = 0;
        var totalDiscountStrata2Amount = 0;
        var totalDiscountStrata3Amount = 0;
        var totalDiscountStrata4Amount = 0;
        var totalDiscountStrata5Amount = 0;
        var totalAddDiscountStrataAmount = 0;
        var totalGross = 0;
        var totalTax = 0;
        var total = 0;
        var totalWeight = 0;
        var totalDimension = 0;

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyOrder = 0;

                rawTotalGrossPrice += summary.RawSubtotalGrossPrice();
                rawTotalPrice += summary.RawSubtotalPrice();
                rawTotalDiscountStrata1Amount += summary.RawDiscountStrata1Amount();
                rawTotalDiscountStrata2Amount += summary.RawDiscountStrata2Amount();
                rawTotalDiscountStrata3Amount += summary.RawDiscountStrata3Amount();
                rawTotalDiscountStrata4Amount += summary.RawDiscountStrata4Amount();
                rawTotalDiscountStrata5Amount += summary.RawDiscountStrata5Amount();
                rawTotalAddDiscountStrataAmount += summary.RawAddDiscountStrataAmount();
                rawTotalGross += summary.RawSubtotalGross();
                rawTotalTax += summary.RawSubtotalTax();
                rawTotal += summary.RawSubtotal();
                totalGrossPrice += summary.SubtotalGrossPrice();
                totalPrice += summary.SubtotalPrice();
                totalDiscountStrata1Amount += summary.DiscountStrata1Amount();
                totalDiscountStrata2Amount += summary.DiscountStrata2Amount();
                totalDiscountStrata3Amount += summary.DiscountStrata3Amount();
                totalDiscountStrata4Amount += summary.DiscountStrata4Amount();
                totalDiscountStrata5Amount += summary.DiscountStrata5Amount();
                totalAddDiscountStrataAmount += summary.AddDiscountStrataAmount();
                totalGross += summary.SubtotalGross();
                totalTax += summary.SubtotalTax();
                total += summary.Subtotal();
                totalWeight += summary.SubtotalWeight();
                totalDimension += summary.SubtotalDimension();
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];

                    sumQtyOrder += details.QtyOrder();
                }

                if (summary.QtyOrder() != sumQtyOrder) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Order Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }
        
        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.CustomerID(form.getEditor('CustomerID').option('value'));
            data.SalesmanID(form.getEditor('SalesmanID').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.TermOfPaymentID(form.getEditor('TermOfPaymentID').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            //data.DocumentStatusReason(documentStatusReason);

            data.PODocumentCode(form.getEditor('PODocumentCode').option('value'));
            data.POTransactionDate(form.getEditor('POTransactionDate').option('value'));

            data.DOShipmentDate(form.getEditor('DOShipmentDate').option('value'));
            data.DOReceivedDate(form.getEditor('DOReceivedDate').option('value'));
            data.DOPrintedCount(form.getEditor('DOPrintedCount').option('value'));
            data.DOLastPrintedDate(form.getEditor('DOLastPrintedDate').option('value'));

            data.RawTotalGrossPrice(rawTotalGrossPrice);
            data.RawTotalPrice(rawTotalPrice);
            data.RawTotalDiscountStrata1Amount(rawTotalDiscountStrata1Amount);
            data.RawTotalDiscountStrata2Amount(rawTotalDiscountStrata2Amount);
            data.RawTotalDiscountStrata3Amount(rawTotalDiscountStrata3Amount);
            data.RawTotalDiscountStrata4Amount(rawTotalDiscountStrata4Amount);
            data.RawTotalDiscountStrata5Amount(rawTotalDiscountStrata5Amount);
            data.RawTotalAddDiscountStrataAmount(rawTotalAddDiscountStrataAmount);
            data.RawTotalGross(rawTotalGross);
            data.RawTotalTax(rawTotalTax);
            data.RawTotal(rawTotal);
            data.TotalGrossPrice(totalGrossPrice);
            data.TotalPrice(totalPrice);
            data.TotalDiscountStrata1Amount(totalDiscountStrata1Amount);
            data.TotalDiscountStrata2Amount(totalDiscountStrata2Amount);
            data.TotalDiscountStrata3Amount(totalDiscountStrata3Amount);
            data.TotalDiscountStrata4Amount(totalDiscountStrata4Amount);
            data.TotalDiscountStrata5Amount(totalDiscountStrata5Amount);
            data.TotalAddDiscountStrataAmount(totalAddDiscountStrataAmount);
            data.TotalGross(totalGross);
            data.TotalTax(totalTax);
            data.Total(total);
            data.TotalWeight(totalWeight);
            data.TotalDimension(totalDimension);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            if (dataJS.POTransactionDate)
                dataJS.POTransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.POTransactionDate);

            dataJS.DOShipmentDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOShipmentDate);
            dataJS.DOReceivedDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOReceivedDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyOrder * -1;
                }

                summary.Qty = summary.QtyOrder * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            var dc = $('.dx-popup-normal>.dx-dialog-content');
            if (dc.length == 0)
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printDOEditing(doDocumentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Delivery Order');
        commonPopupIFrame.popupEditOptions.visible(true);

        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.ExtDeliveryOrderReport.url([['DocumentID', '=', doDocumentID]]));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = salesOrderFOCSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length == 0) {
                            items = [new Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel(details)];
                            dataSourceItems[i].ChildDetails().push(items[0]);
                        }

                        var item = items[0];
                        item.QtyConvL(DXUtility.getValue(dataSourceItems[i], 'QtyConvL'));
                        item.QtyConvM(DXUtility.getValue(dataSourceItems[i], 'QtyConvM'));
                        item.QtyConvS(DXUtility.getValue(dataSourceItems[i], 'QtyConvS'));
                        item.QtyOrder(DXUtility.getValue(dataSourceItems[i], 'QtyOrder'));
                        item.QtyOrderConv(DXUtility.getValue(dataSourceItems[i], 'QtyOrderConv'));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyOrderColumn = 'QtyOrder' + itemStatusName;
        var qtyOrderConvColumn = 'QtyOrderConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyOrderColumn: qtyOrderColumn,
            qtyOrderConvColumn: qtyOrderConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3) ||
            (editData.DocumentStatusID() == 4))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyOrderConv').option('value', data.QtyOrderConv());

        var conversion = CommonUtility.getConversion(
            data.QtyOrderConv(),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyOrder').option('value', conversion.qtyTransaction);

        data = validateSummaryArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vSalesOrderFOCDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyOrder').option('value'),
            'Order',
            'vSalesOrderFOCDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            salesOrderFOCSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();
            var salesmanID = form.getEditor('SalesmanID').option('value');
            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
                select: [
                    'ProductID',
                    'ProductCode',
                    'Product',
                    'ProductUOMLID',
                    'ProductUOMMID',
                    'ProductUOMSID',
                    'ProductConversionL',
                    'ProductConversionM',
                    'ProductConversionS'
                ],
                filter: [
                    ['SalesmanID', '=', salesmanID], 'and',
                    ['ProductName', 'notcontains', 'SAMPLE']
                ],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
            }).load()
                .done(function (result) {
                    if (result.length > 0) {
                        var productDataSource = result;

                        var warehouseID = form.getEditor('WarehouseID').option('value');
                        var filters = [];
                        var groupFilterExpr = [];

                        for (var i = 0; i < result.length; i++)
                            DXUtility.addFilterExpression(groupFilterExpr, 'ProductID', '=', result[i].ProductID(), 'or');

                        DXUtility.addGroupFilterExpression(filters, groupFilterExpr, 'and');
                        DXUtility.addFilterExpression(filters, 'WarehouseID', '=', warehouseID, 'and');
                        DXUtility.addFilterExpression(filters, 'QtyOnHandGood', '>', 0, 'and');
                        var dataSource = new DevExpress.data.DataSource({
                            store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                            select: [
                                'ProductID',
                                'ProductLotID',
                                'ProductLotCode',
                                'ProductLot',
                                'ProductLotExpiredDate',
                                'QtyOnHandGood'
                            ],
                            filter: filters,
                            sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                            paginate: false,
                            map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                        });

                        dataSource.load()
                            .done(function (result2) {
                                var product = null;
                                var stockOnHandAvailable = [];
                                var stockOnHandAvailableByProduct = [];
                                for (var i = 0; i < result2.length; i++) {
                                    stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                                    var j = stockOnHandAvailableByProduct.length - 1;
                                    var productID = result2[i].ProductID();
                                    if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                        stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));
                                        j++;
                                        product = $.grep(result, function (e) { return (e.ProductID() == productID); });
                                    } else {
                                        stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                            result2[i].QtyOnHandGood());
                                        stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                            result2[i].QtyOnHandHold());
                                        stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                            result2[i].QtyOnHandBad());
                                    }

                                    stockOnHandAvailable[i].ProductCode(product[0].ProductCode());
                                    stockOnHandAvailable[i].Product(product[0].Product());
                                    stockOnHandAvailable[i].ProductUOMLID(product[0].ProductUOMLID());
                                    stockOnHandAvailable[i].ProductUOMMID(product[0].ProductUOMMID());
                                    stockOnHandAvailable[i].ProductUOMSID(product[0].ProductUOMSID());
                                    stockOnHandAvailable[i].ProductConversionL(product[0].ProductConversionL());
                                    stockOnHandAvailable[i].ProductConversionM(product[0].ProductConversionM());
                                    stockOnHandAvailable[i].ProductConversionS(product[0].ProductConversionS());

                                    stockOnHandAvailableByProduct[j].ProductCode(product[0].ProductCode());
                                    stockOnHandAvailableByProduct[j].Product(product[0].Product());
                                    stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].ProductUOMLID());
                                    stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].ProductUOMMID());
                                    stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].ProductUOMSID());
                                    stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ProductConversionL());
                                    stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ProductConversionM());
                                    stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ProductConversionS());
                                }

                                dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                                dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                                if (dataSource_vStockOnHandAvailable.length == 0)
                                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                        'Product lot stock with item status Good for the selected warehouse is empty.'),
                                        'New Order Details Failed');
                                else
                                    productLotLoaded();

                                hideLoadingPanel();
                            })
                            .fail(function (error) {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                                hideLoadingPanel();
                            });
                    } else {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected Salesman does not have any reference products.'),
                            'New Order Details Failed');
                        hideLoadingPanel();
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman', 'Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order FOC',
        colCount: 3,
        colSpan: 3,
        items: [{
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Salesman',
                        ['Warehouse'],
                        []);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var siteID = null;

                    if (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
                        siteID = collapsibleFilter.form().getEditor('SiteID').option('value');
                    } else {
                        siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
                    }

                    var childEditor = collapsibleFilter.form().getEditor('SalesmanID');
                    var childSelectedItem = childEditor.option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['WarehouseID']() != e.value))
                        childEditor.option('value', null);

                    if (siteID == undefined) {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            ['WarehouseID', '=', e.value] : null));
                    } else {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            [['WarehouseID', '=', e.value], "and",
                            ['SiteID', '=', siteID]] : ['SiteID', '=', siteID]));
                    }
                }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                    select: ['ID', 'Customer', 'SiteID'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); },
                    filter: (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                }),
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // CustomerID
        value = form.getEditor('CustomerID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CustomerID', '=', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderFOC.AddNewSalesOrderFOC');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderFOC.EditSalesOrderFOC');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesOrderFOCs_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('SalesOrderFOC.EditSalesOrderFOC');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Customer', caption: 'Customer', width: '200px'
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px'
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'TotalGross', caption: 'Total DPP', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'TotalTax', caption: 'Total VAT', width: '80px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'Total', caption: 'Total', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px',
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var salesOrderFOCSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCSummaryDataGrid', 'dxDataGrid'); }
    var salesOrderFOCSummaryForm = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCSummaryForm', 'dxForm'); }

    var salesOrderFOCPrintDO = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCPrintDO', 'dxButton'); }
    var salesOrderFOCPost = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCPost', 'dxButton'); }
    var salesOrderFOCDiscard = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCDiscard', 'dxButton'); }
    var salesOrderFOCVoid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCVoid', 'dxButton'); }
    var salesOrderFOCSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCSaveAsDraftAndNew', 'dxButton'); }
    var salesOrderFOCSave = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var salesOrderFOCSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCSummaryNewRow', 'dxButton'); }
    var salesOrderFOCSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vSalesOrderFOCs_salesOrderFOCSummaryDeleteRows', 'dxButton'); }
    var intrvlSOFOC;

    var isEditorEnabledSOFOC = function () {
        var dxCommandEdit = $(".dx-command-edit", "[id$=SummaryDataGrid]");
        for (var i = 0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf("Save") >= 0) {
                return true;
            }
        }
        return false;
    }

    var intrvlHandlerSOFOC = function () {
        var disabled = false;
        var newData = true;
        var data = commonPopupEdit.popupEditData();
        if (data.DocumentStatusID()) {
            newData = false;
        }
        if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) || (data.DocumentStatusID() == 4)) {
            disabled = true;
        }
        if (!isEditorEnabledSOFOC()) {
            if (salesOrderFOCSave() && salesOrderFOCPost() && salesOrderFOCVoid() & salesOrderFOCSaveAsDraftAndNew())
                //asdsadsad
                salesOrderFOCSave().option("disabled", disabled);
            salesOrderFOCSave().option("disabled", disabled);
            salesOrderFOCPost().option("disabled", newData || disabled);
            salesOrderFOCDiscard().option("disabled", newData || disabled);
            salesOrderFOCVoid().option("disabled", (data.DocumentStatusID() != 2));
            salesOrderFOCSaveAsDraftAndNew().option("disabled", disabled);
            clearInterval(intrvlSOFOC);
        }
    };


    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Order Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vSalesOrderFOCs_salesOrderFOCSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        salesOrderFOCSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Order Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vSalesOrderFOCs_salesOrderFOCSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(salesOrderFOCSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vSalesOrderFOCs_salesOrderFOCSummaryDataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                salesOrderFOCSave().option("disabled", true);
                salesOrderFOCPost().option("disabled", true);
                salesOrderFOCDiscard().option("disabled", true);
                salesOrderFOCVoid().option("disabled", true);
                salesOrderFOCSaveAsDraftAndNew().option("disabled", true);

                intrvlSOFOC = setInterval(intrvlHandlerSOFOC, 500);
                info.data.QtyOrder = 0;
                info.data.QtyOrderConv = '0/0/0';
                info.data.AddDiscountStrataPercentage = 0;
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if ((e.row != undefined) && (e.row.rowIndex != undefined))
                        e.component.editRowIndex = e.row.rowIndex;

                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAvailableByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vSalesOrderFOCs_productIDLookup', ea.element, 1); // Good
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 1); // Good
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                            calcProductPriceAndDiscount(e);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'PriceDate') {
                        e.editorElement.dxDateBox({
                            showClearButton: true,
                            placeholder: 'Transaction Date',
                            value: e.value,
                            onValueChanged: function (ea) {
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'QtyOrderConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                salesOrderFOCSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                var conversion = CommonUtility.getConversion(
                                (ea.value) ? ea.value : '0/0/0',
                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                            );

                                DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'AddDiscountStrataPercentage') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            // Added by Andhika 2016.03.17 Fixing Additional Discount Decimal Input ------------------
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 190 || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            //----------------------------------------------------------------------------------------
                            onValueChanged: function (ea) {
                                if ((ea.value == null) || (ea.value == ''))
                                    ea.value = 0;

                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderFOCSummaryForm(), info.component);
                salesOrderFOCSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderFOCSummaryForm(), info.component);
                salesOrderFOCSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );

                CommonUtility.updateSalesOrderSummaryForm(salesOrderFOCSummaryForm(), info.component);
            },
            onEditingStart: function (info) {
                salesOrderFOCSave().option('disabled', true);
                salesOrderFOCPost().option('disabled', true);
                salesOrderFOCDiscard().option('disabled', true);
                salesOrderFOCVoid().option('disabled', true);
                salesOrderFOCSaveAsDraftAndNew().option('disabled', true);
                intrvlSOFOC = setInterval(intrvlHandlerSOFOC, 500);
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyOrderConv) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyOrderConv,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyOrder = conversion.qtyTransaction;
                }

                info.newData.SubtotalWeight = DXUtility.getValue(info.oldData, 'SubtotalWeight');
                info.newData.SubtotalDimension = DXUtility.getValue(info.oldData, 'SubtotalDimension');
                info.newData.UnitGrossPrice = DXUtility.getValue(info.oldData, 'UnitGrossPrice');

                info.newData.RawSubtotalGrossPrice = DXUtility.getValue(info.oldData, 'RawSubtotalGrossPrice');
                info.newData.RawSubtotalPrice = DXUtility.getValue(info.oldData, 'RawSubtotalPrice');
                info.newData.RawDiscountStrata1Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata1Amount');
                info.newData.RawDiscountStrata2Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata2Amount');
                info.newData.RawDiscountStrata3Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata3Amount');
                info.newData.RawDiscountStrata4Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata4Amount');
                info.newData.RawDiscountStrata5Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata5Amount');
                info.newData.RawAddDiscountStrataAmount = DXUtility.getValue(info.oldData, 'RawAddDiscountStrataAmount');
                info.newData.RawSubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata1');
                info.newData.RawSubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata2');
                info.newData.RawSubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata3');
                info.newData.RawSubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata4');
                info.newData.RawSubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata5');
                info.newData.RawSubtotalGross = DXUtility.getValue(info.oldData, 'RawSubtotalGross');
                info.newData.RawSubtotal = DXUtility.getValue(info.oldData, 'RawSubtotal');

                info.newData.SubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata1');
                info.newData.SubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata2');
                info.newData.SubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata3');
                info.newData.SubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata4');
                info.newData.SubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata5');
                info.newData.TaxPercentage = DXUtility.getValue(info.oldData, 'TaxPercentage');
                info.newData.SubtotalGrossPrice = DXUtility.getValue(info.oldData, 'SubtotalGrossPrice');
                info.newData.SubtotalPrice = DXUtility.getValue(info.oldData, 'SubtotalPrice');

                info.newData.UnitPrice = info.component.cellValue(info.component.editRowIndex, 'UnitPrice');

                //info.newData.DiscountStrata1Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Percentage');
                //info.newData.DiscountStrata1Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Amount');

                //info.newData.DiscountStrata2Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Percentage');
                //info.newData.DiscountStrata2Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Amount');

                //info.newData.DiscountStrata3Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Percentage');
                //info.newData.DiscountStrata3Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Amount');

                //info.newData.DiscountStrata4Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Percentage');
                //info.newData.DiscountStrata4Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Amount');

                //info.newData.DiscountStrata5Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Percentage');
                //info.newData.DiscountStrata5Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Amount');

                info.newData.DiscountStrata1Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata1Percentage');
                info.newData.DiscountStrata1Amount = DXUtility.getValue(info.oldData, 'DiscountStrata1Amount');

                info.newData.DiscountStrata2Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata2Percentage');
                info.newData.DiscountStrata2Amount = DXUtility.getValue(info.oldData, 'DiscountStrata2Amount');

                info.newData.DiscountStrata3Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata3Percentage');
                info.newData.DiscountStrata3Amount = DXUtility.getValue(info.oldData, 'DiscountStrata3Amount');

                info.newData.DiscountStrata4Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata4Percentage');
                info.newData.DiscountStrata4Amount = DXUtility.getValue(info.oldData, 'DiscountStrata4Amount');

                info.newData.DiscountStrata5Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata5Percentage');
                info.newData.DiscountStrata5Amount = DXUtility.getValue(info.oldData, 'DiscountStrata5Amount');


                info.newData.AddDiscountStrataAmount = info.component.cellValue(info.component.editRowIndex, 'AddDiscountStrataAmount');

                info.newData.SubtotalGross = info.component.cellValue(info.component.editRowIndex, 'SubtotalGross');
                info.newData.SubtotalTax = info.component.cellValue(info.component.editRowIndex, 'SubtotalTax');
                info.newData.Subtotal = info.component.cellValue(info.component.editRowIndex, 'Subtotal');

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
                if (qtyOnHand == undefined)
                    qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

                var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
                if (qtyOrder == undefined)
                    qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

                if (qtyOrder <= 0) {
                    e.errorText = 'Order Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && (qtyOrder > qtyOnHand)) {
                    e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(salesOrderFOCSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (salesOrderFOCSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 1' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 2' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 3' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 4' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="1">' + 'Disc 1-5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Additional Disc' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'PriceDate', caption: 'Price Date', width: '140px',
                dataType: 'date'
            }, {
                dataField: 'UnitPrice', caption: 'Unit Price', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
            }, {
                dataField: 'QtyOrderConv', caption: 'Qty (L/M/S)', width: '100px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOrderConv', 1)); // Good
                }
            },
            //{
            //    dataField: 'DiscountStrata1Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata1Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //},
            {
                dataField: 'DiscountStrataDefaultAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
                calculateCellValue: function (data) {
                    var discountStrata1Amount = DXUtility.getValue(data, 'DiscountStrata1Amount');
                    var discountStrata2Amount = DXUtility.getValue(data, 'DiscountStrata2Amount');
                    var discountStrata3Amount = DXUtility.getValue(data, 'DiscountStrata3Amount');
                    var discountStrata4Amount = DXUtility.getValue(data, 'DiscountStrata4Amount');
                    var discountStrata5Amount = DXUtility.getValue(data, 'DiscountStrata5Amount');

                    if (isNaN(discountStrata1Amount)) discountStrata1Amount = 0;
                    if (isNaN(discountStrata2Amount)) discountStrata2Amount = 0;
                    if (isNaN(discountStrata3Amount)) discountStrata3Amount = 0;
                    if (isNaN(discountStrata4Amount)) discountStrata4Amount = 0;
                    if (isNaN(discountStrata5Amount)) discountStrata5Amount = 0;

                    return discountStrata1Amount + discountStrata2Amount + discountStrata3Amount +
                        discountStrata4Amount + discountStrata5Amount;
                }
            }, {
                dataField: 'AddDiscountStrataPercentage', caption: '%', width: '40px',
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'AddDiscountStrataAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalGross', caption: 'DPP', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalTax', caption: 'VAT', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'Subtotal', caption: 'Subtotal', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }]
        }));

        content.append($('<div id="vSalesOrderFOCs_salesOrderFOCSummaryForm" style="margin-top: 9px;">').dxForm({
            deferRendering: false,
            colCount: 4,
            showColonAfterLabel: false,
            labelLocation: 'left',
            alignItemLabels: true,
            items: [{
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'TotalGross',
                label: { text: 'Total DPP' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 2
            },
            //{
            //    dataField: 'DocumentStatusReason',
            //    label: { location: 'top', text: 'Reason for changing Price Date/Additional Disc' },
            //    colSpan: 2,
            //    editorOptions: {
            //        maxLength: 200,
            //        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            //    }
            //},
            {
                itemType: 'empty',
                colSpan: 1
            }, {
                dataField: 'TotalTax',
                label: { text: 'Total VAT' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'Total',
                label: { text: 'Total' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrintDO = $('<div id="vSalesOrderFOCs_salesOrderFOCPrintDO" style="margin-right: 32px;">').dxButton({
            text: 'Print DO', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrintDO(this); }
        });

        var commandPost = $('<div id="vSalesOrderFOCs_salesOrderFOCPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vSalesOrderFOCs_salesOrderFOCDiscard">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandVoid = $('<div id="vSalesOrderFOCs_salesOrderFOCVoid" style="margin-right: 16px;">').dxButton({
            text: 'Void', icon: 'icons8-delete-red',
            onClick: function () { commonPopupEdit.events.performVoid(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vSalesOrderFOCs_salesOrderFOCSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrintDO);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandVoid);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrintDO = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printDOEditing(data.DODocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performVoid = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Void this transaction?', 'Void Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(4, 3); // Void and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var preDODocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        preDODocumentCode = previewDODocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                    form.getEditor('DODocumentCode').option('value', preDODocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order FOC',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxLookup',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: [
                    'Code',
                    'Name',
                    'Address1',
                    'Address2',
                    'Address3'
                ],
                searchPlaceholder: 'Customer/Address',
                searchEnabled: false,
                popupWidth: '1082px',
                showPopupTitle: false,
                fieldEditEnabled: true,
                onOpened: function (e) { },
                onClosed: function (e) { },
                onContentReady: function (e) {
                    var form = commonPopupEdit.form();
                    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                    CommonUtility.createCustomerLookupHeader('vSalesOrderFOCs_customerIDLookup', e.element,
                        getValueFromSystemParameter('Customer.Category1'),
                        user.SiteID(), form);
                },
                itemTemplate: function (data, index, element) {
                    return CommonUtility.createCustomerLookupItem(data, element);
                },
                onValueChanged: function (e) {
                    if (e.value) {
                        var item = e.selectedItem;
                        if (item) {
                            var data = commonPopupEdit.popupEditData();
                            var form = commonPopupEdit.form();
                            var salesmanID = null;
                            var warehouseID = null;
                            var termOfPaymentID = null;

                            dataSource_vSelectedProductPrices = undefined;
                            dataSource_vSelectedDiscountGroup = undefined;

                            data.PriceGroupID(undefined);
                            data.DiscountGroupID(undefined);
                            if (item) {
                                salesmanID = item.SalesmanID();
                                warehouseID = item.WarehouseID();
                                termOfPaymentID = item.TermOfPaymentID();
                                dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                                    ['PriceGroupID', '=', item.PriceGroupID()]);

                                dataSource_vSelectedDiscountGroup =
                                    Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(item.DiscountGroupID());

                                data.PriceGroupID(item.PriceGroupID());
                                data.DiscountGroupID(item.DiscountGroupID());
                            }

                            e.component.option('value', e.value);
                            form.getEditor('SalesmanID').option('value', salesmanID);
                            form.getEditor('WarehouseID').option('value', warehouseID);

                            updateTermOfPaymentEditor(form, termOfPaymentID);
                        }
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        salesOrderFOCSummaryDataGrid().cancelEditData();
                        data.ChildSummaries([]);
                        salesOrderFOCSummaryDataGrid().option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    } else
                        salesOrderFOCSummaryDataGrid().endCustomLoading();

                    var form = commonPopupEdit.form();
                    var warehouseID = null;

                    if (e.selectedItem) {
                        warehouseID = e.selectedItem.WarehouseID();
                    }

                    form.getEditor('WarehouseID').option('value', warehouseID);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = salesOrderFOCSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'TermOfPaymentID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Term of Payment' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }, {
        itemType: 'group',
        caption: 'Purchase Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'PODocumentCode',
            label: { text: 'Document Number' },
            //validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'POTransactionDate',
            label: { text: 'Transaction Date' },
            //validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    //form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }]
    }, {
        itemType: 'group',
        caption: 'Delivery Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOShipmentDate',
            label: { text: 'Shipment Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOReceivedDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'DOPrintedCount',
            label: { text: 'Printed Count' },
            colSpan: 1,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOLastPrintedDate',
            label: { text: 'Last Printed Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOReceivedDate',
            label: { text: 'Received Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyOrder = 0;
        info.data.QtyOrderConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                    var productLotColumns = getProductLotColumns(itemStatusID);

                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vSalesOrderFOCs_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyOrderConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    // Added by Andhika 2016.03.17 Fixing Issue Negatif Value -----
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    //-----------------------------------------------------------
                    onValueChanged: function (ea) {
                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

        var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
        if (qtyOrder == undefined)
            qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

        if (qtyOrder <= 0) {
            e.errorText = 'Order Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyOrder > qtyOnHand)) {
            e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyOrderConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyOrderConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyOrderConv',
                'QtyOrder');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyOrderConv', caption: 'Order Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyOrder',
            label: { text: 'Order Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOrderConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_order_foc_32px.png',

        dataSource_vSalesOrderFOCDetails: dataSource_vSalesOrderFOCDetails,
        dataSource_vSalesOrderFOCSummary: dataSource_vSalesOrderFOCSummary,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        salesOrderFOCSummaryDataGrid: salesOrderFOCSummaryDataGrid,
        salesOrderFOCPost: salesOrderFOCPost,
        salesOrderFOCDiscard: salesOrderFOCDiscard,
        salesOrderFOCVoid: salesOrderFOCVoid,
        salesOrderFOCSaveAsDraftAndNew: salesOrderFOCSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vSalesOrderReturns = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevSalesOrderReturnsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesOrderReturns');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesOrderReturns.off('modified', handlevSalesOrderReturnsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderReturns,
        select: [
            'DocumentID',
            'DocumentCode',
            'TransactionDate',
            'Territory',
            'Region',
            'Area',
            'Company',
            'Site',
            'Customer',
            'Salesman',
            'Warehouse',
            'TotalGross',
            'TotalTax',
            'Total',
            'ReferenceNumber',
            'DocumentStatusName',
            'PostedDate',
            'CreatedDate',
            'CreatedByUserName',
            'ModifiedDate',
            'ModifiedByUserName'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderReturnViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesOrderReturns.on('modified', handlevSalesOrderReturnsModification);

    var dataSource_vSalesOrderReturnDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderReturnDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderReturnDetailsViewModel(item); }
    });

    var dataSource_vSalesOrderReturnSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderReturnSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAll;
    var dataSource_vStockOnHandAllByProduct;
    var dataSource_vSelectedProductPrices;
    var dataSource_vSelectedDiscountGroup;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-02-(Auto Generated)';
    }

    function previewDODocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-10-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var customerDataSource = new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vCustomers,
            select: [
                'ID',
                'Customer',
                'Address',
                'Category1',
                'SalesmanID',
                'Salesman',
                'WarehouseID',
                'TermOfPaymentID',
                'PriceGroupID',
                'DiscountGroupID',
                'SiteID'
            ],
            filter: [
                ['IsDeleted', '=', false], 'and',
                ['StatusID', '=', 1], 'and',
                ['SiteID', '=', siteID]
            ],
            map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
        });

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource([
            ['IsDeleted', '=', false], 'and',
            ['StatusID', '=', 1], 'and',
            ['SiteID', '=', siteID]
        ]);

        form.getEditor('CustomerID').option('value', null);
        form.getEditor('CustomerID').option('dataSource', customerDataSource);
        customerDataSource.load();

        form.getEditor('SalesmanID').option('value', null);
        form.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
        salesmanDataSource.load();
    }

    function updateTermOfPaymentEditor(form, termOfPaymentID) {
        var filter = [
            ['Group', '=', 'CustomerTermOfPayment']
        ];

        if ((termOfPaymentID != undefined) && (termOfPaymentID != null)) {
            filter.push('and');
            filter.push(['Value_Int32', '<=', termOfPaymentID]);
        }

        var termOfPaymentDataSource = DataUtility.GetLookupSystemLookupDataSource(filter);

        form.getEditor('TermOfPaymentID').option('value', null);
        form.getEditor('TermOfPaymentID').option('dataSource', termOfPaymentDataSource);
        form.getEditor('TermOfPaymentID').option('value', termOfPaymentID);
        termOfPaymentDataSource.load();
    }


    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }

    function calcProductPriceAndDiscount(e) {
        return CommonUtility.calcProductPriceAndDiscountBase(
            commonPopupEdit.form().getEditor('TransactionDate').option('value'),
            e.component,
            e.row.rowIndex,
            e.row.data,
            dataSource_vSelectedProductPrices,
            dataSource_vSelectedDiscountGroup,
            false,
            true
        );
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            salesOrderReturnSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            salesOrderReturnSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummaryArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            salesOrderReturnSummaryDataGrid().option('dataSource').store(),
            'vSalesOrderReturnSummaryViewModel',
            summary
        );
    }

    function createSummaryDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vSalesOrderReturnSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyOrderConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyOrderConvColumn]()));
        commands.append('&nbsp;');

        if (isLotNumberEntryRequired) {
            var column = qtyOrderConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyOrderConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = salesOrderReturnSummaryDataGrid().option('editing');
        var selection = salesOrderReturnSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        salesOrderReturnSummaryDataGrid().option('editing', option);
        salesOrderReturnSummaryDataGrid().option('selection', selection);
        salesOrderReturnSummaryNewRow().option('disabled', !allowed);
        salesOrderReturnSummaryDeleteRows().option('disabled', true);
        salesOrderReturnSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vSalesOrderReturns.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vSalesOrderReturnViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesOrderReturnViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Sales Order Return');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        var summaryForm = salesOrderReturnSummaryForm();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var doDocumentCode = data.DODocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            documentCode = previewDocumentCode(data.SiteCode());
            doDocumentCode = previewDODocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if ((data.DocumentStatusID() == 1) && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    dataSource_vStockOnHandAll = [];
                    dataSource_vStockOnHandAllByProduct = [];
                    form.getEditor('SalesmanID').option('value', data.SalesmanID());

                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) ||
                (data.DocumentStatusID() == 4)) // Posted, Discarded or Voided
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        salesOrderReturnPrintDO().option('disabled', newData);
        salesOrderReturnPost().option('disabled', newData || disabled);
        salesOrderReturnDiscard().option('disabled', newData || disabled);
        salesOrderReturnVoid().option('disabled', (data.DocumentStatusID() != 2));
        salesOrderReturnSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        var priceGroupID = data.PriceGroupID();
        var discountGroupID = data.DiscountGroupID();

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());
        updateTermOfPaymentEditor(form, data.TermOfPaymentID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('CustomerID').option('value', data.CustomerID());
        form.getEditor('SalesmanID').option('value', data.SalesmanID());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('TermOfPaymentID').option('value', data.TermOfPaymentID());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());
        form.getEditor('ReasonID').option('value', data.ReasonID());
        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        //summaryForm.getEditor('DocumentStatusReason').option('value', data.DocumentStatusReason());

        form.getEditor('DODocumentCode').option('value', doDocumentCode);
        //form.getEditor('DOShipmentDate').option('value', data.DOShipmentDate());
        form.getEditor('DOReceivedDate').option('value', data.DOReceivedDate());
        form.getEditor('DOPrintedCount').option('value', data.DOPrintedCount());
        form.getEditor('DOLastPrintedDate').option('value', data.DOLastPrintedDate());

        summaryForm.getEditor('TotalGross').option('value', CommonUtility.getNumberFormat(data.TotalGross()));
        summaryForm.getEditor('TotalTax').option('value', CommonUtility.getNumberFormat(data.TotalTax()));
        summaryForm.getEditor('Total').option('value', CommonUtility.getNumberFormat(data.Total()));

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('CustomerID').option('readOnly', disabled);
        form.getEditor('SalesmanID').option('readOnly', disabled);
        form.getEditor('TermOfPaymentID').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);
        form.getEditor('ReasonID').option('readOnly', disabled);

        //summaryForm.getEditor('DocumentStatusReason').option('readOnly', disabled);

        //form.getEditor('DOShipmentDate').option('readOnly', disabled);
        form.getEditor('DOReceivedDate').option('readOnly', disabled);

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
            //form.getEditor('DOShipmentDate').option('value', today);
            //form.getEditor('DOReceivedDate').option('value', today);
        } else {
            if (priceGroupID)
                data.PriceGroupID(priceGroupID);

            if (discountGroupID)
                data.DiscountGroupID(discountGroupID);

            dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                ['PriceGroupID', '=', data.PriceGroupID()]);

            dataSource_vSelectedDiscountGroup =
                Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(data.DiscountGroupID());
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = salesOrderReturnSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();
        var summaryForm = salesOrderReturnSummaryForm();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = salesOrderReturnSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Order Details.';
                isValid = false;
            }
        }

        //var documentStatusReason = summaryForm.getEditor('DocumentStatusReason').option('value');
        //if (isValid && ((documentStatusReason == null) || (documentStatusReason == ''))) {
        //    for (var i = 0; i < summaries.length; i++) {
        //        if (((summaries[i].PriceDate() != undefined) || (summaries[i].PriceDate() != null)) ||
        //            (summaries[i].AddDiscountStrataPercentage() > 0.0)) {
        //            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Price Date/Additional Disc has changed. ' +
        //                'Please specify the Reason for changing Price Date/Additional Disc.'), 'Save Failed');
        //            isValid = false;
        //            break;
        //        }
        //    }
        //}

        var rawTotalGrossPrice = 0;
        var rawTotalPrice = 0;
        var rawTotalDiscountStrata1Amount = 0;
        var rawTotalDiscountStrata2Amount = 0;
        var rawTotalDiscountStrata3Amount = 0;
        var rawTotalDiscountStrata4Amount = 0;
        var rawTotalDiscountStrata5Amount = 0;
        var rawTotalAddDiscountStrataAmount = 0;
        var rawTotalGross = 0;
        var rawTotalTax = 0;
        var rawTotal = 0;
        var totalGrossPrice = 0;
        var totalPrice = 0;
        var totalDiscountStrata1Amount = 0;
        var totalDiscountStrata2Amount = 0;
        var totalDiscountStrata3Amount = 0;
        var totalDiscountStrata4Amount = 0;
        var totalDiscountStrata5Amount = 0;
        var totalAddDiscountStrataAmount = 0;
        var totalGross = 0;
        var totalTax = 0;
        var total = 0;
        var totalWeight = 0;
        var totalDimension = 0;

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyOrder = 0;

                rawTotalGrossPrice += summary.RawSubtotalGrossPrice();
                rawTotalPrice += summary.RawSubtotalPrice();
                rawTotalDiscountStrata1Amount += summary.RawDiscountStrata1Amount();
                rawTotalDiscountStrata2Amount += summary.RawDiscountStrata2Amount();
                rawTotalDiscountStrata3Amount += summary.RawDiscountStrata3Amount();
                rawTotalDiscountStrata4Amount += summary.RawDiscountStrata4Amount();
                rawTotalDiscountStrata5Amount += summary.RawDiscountStrata5Amount();
                rawTotalAddDiscountStrataAmount += summary.RawAddDiscountStrataAmount();
                rawTotalGross += summary.RawSubtotalGross();
                rawTotalTax += summary.RawSubtotalTax();
                rawTotal += summary.RawSubtotal();
                totalGrossPrice += summary.SubtotalGrossPrice();
                totalPrice += summary.SubtotalPrice();
                totalDiscountStrata1Amount += summary.DiscountStrata1Amount();
                totalDiscountStrata2Amount += summary.DiscountStrata2Amount();
                totalDiscountStrata3Amount += summary.DiscountStrata3Amount();
                totalDiscountStrata4Amount += summary.DiscountStrata4Amount();
                totalDiscountStrata5Amount += summary.DiscountStrata5Amount();
                totalAddDiscountStrataAmount += summary.AddDiscountStrataAmount();
                totalGross += summary.SubtotalGross();
                totalTax += summary.SubtotalTax();
                total += summary.Subtotal();
                totalWeight += summary.SubtotalWeight();
                totalDimension += summary.SubtotalDimension();
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];

                    sumQtyOrder += details.QtyOrder();
                }

                if (summary.QtyOrder() != sumQtyOrder) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Order Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();
            
            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.CustomerID(form.getEditor('CustomerID').option('value'));
            data.SalesmanID(form.getEditor('SalesmanID').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.TermOfPaymentID(form.getEditor('TermOfPaymentID').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));
            data.ReasonID(form.getEditor('ReasonID').option('value'));

            //data.DocumentStatusReason(documentStatusReason);

            //data.DOShipmentDate(form.getEditor('DOShipmentDate').option('value'));
            data.DOReceivedDate(form.getEditor('DOReceivedDate').option('value'));
            data.DOPrintedCount(form.getEditor('DOPrintedCount').option('value'));
            data.DOLastPrintedDate(form.getEditor('DOLastPrintedDate').option('value'));

            data.RawTotalGrossPrice(rawTotalGrossPrice);
            data.RawTotalPrice(rawTotalPrice);
            data.RawTotalDiscountStrata1Amount(rawTotalDiscountStrata1Amount);
            data.RawTotalDiscountStrata2Amount(rawTotalDiscountStrata2Amount);
            data.RawTotalDiscountStrata3Amount(rawTotalDiscountStrata3Amount);
            data.RawTotalDiscountStrata4Amount(rawTotalDiscountStrata4Amount);
            data.RawTotalDiscountStrata5Amount(rawTotalDiscountStrata5Amount);
            data.RawTotalAddDiscountStrataAmount(rawTotalAddDiscountStrataAmount);
            data.RawTotalGross(rawTotalGross);
            data.RawTotalTax(rawTotalTax);
            data.RawTotal(rawTotal);
            data.TotalGrossPrice(totalGrossPrice);
            data.TotalPrice(totalPrice);
            data.TotalDiscountStrata1Amount(totalDiscountStrata1Amount);
            data.TotalDiscountStrata2Amount(totalDiscountStrata2Amount);
            data.TotalDiscountStrata3Amount(totalDiscountStrata3Amount);
            data.TotalDiscountStrata4Amount(totalDiscountStrata4Amount);
            data.TotalDiscountStrata5Amount(totalDiscountStrata5Amount);
            data.TotalAddDiscountStrataAmount(totalAddDiscountStrataAmount);
            data.TotalGross(totalGross);
            data.TotalTax(totalTax);
            data.Total(total);
            data.TotalWeight(totalWeight);
            data.TotalDimension(totalDimension);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            if (dataJS.POTransactionDate)
                dataJS.POTransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.POTransactionDate);

            //dataJS.DOShipmentDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOShipmentDate);
            dataJS.DOReceivedDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOReceivedDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyOrder * -1;
                }

                summary.Qty = summary.QtyOrder * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            var dc = $('.dx-popup-normal>.dx-dialog-content');
            if (dc.length == 0)
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printDOEditing(doDocumentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Delivery Order');
        commonPopupIFrame.popupEditOptions.visible(true);

        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.ExtDeliveryOrderReport.url([['DocumentID', '=', doDocumentID]]));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = salesOrderReturnSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAll, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });
            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length == 0) {
                            items = [new Dismoyo_Ciptoning_Client.vSalesOrderReturnDetailsViewModel(details)];
                            dataSourceItems[i].ChildDetails().push(items[0]);
                        }

                        var item = items[0];
                        item.QtyConvL(DXUtility.getValue(dataSourceItems[i], 'QtyConvL'));
                        item.QtyConvM(DXUtility.getValue(dataSourceItems[i], 'QtyConvM'));
                        item.QtyConvS(DXUtility.getValue(dataSourceItems[i], 'QtyConvS'));
                        item.QtyOrder(DXUtility.getValue(dataSourceItems[i], 'QtyOrder'));
                        item.QtyOrderConv(DXUtility.getValue(dataSourceItems[i], 'QtyOrderConv'));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyOrderColumn = 'QtyOrder' + itemStatusName;
        var qtyOrderConvColumn = 'QtyOrderConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyOrderColumn: qtyOrderColumn,
            qtyOrderConvColumn: qtyOrderConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3) ||
            (editData.DocumentStatusID() == 4))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyOrderConv').option('value', data.QtyOrderConv());
        form.getEditor('QtyOrder').option('value', data.QtyOrder());

        data = validateSummaryArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vSalesOrderReturnDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
         );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyOrder').option('value'),
            'Order',
            'vSalesOrderReturnDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            salesOrderReturnSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAll.length == 0) && (dataSource_vStockOnHandAllByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();
            var salesmanID = form.getEditor('SalesmanID').option('value');
            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
                select: [
                    'ProductID',
                    'ProductCode',
                    'Product',
                    'ProductUOMLID',
                    'ProductUOMMID',
                    'ProductUOMSID',
                    'ProductConversionL',
                    'ProductConversionM',
                    'ProductConversionS'
                ],
                filter: [
                    ['SalesmanID', '=', salesmanID], 'and',
                    ['ProductName', 'notcontains', 'SAMPLE']
                ],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
            }).load()
            .done(function (result) {
                if (result.length > 0) {
                    var productDataSource = result;

                    var warehouseID = form.getEditor('WarehouseID').option('value');
                    var filters = [];
                    var groupFilterExpr = [];

                    for (var i = 0; i < result.length; i++)
                        DXUtility.addFilterExpression(groupFilterExpr, 'ProductID', '=', result[i].ProductID(), 'or');

                    DXUtility.addGroupFilterExpression(filters, groupFilterExpr, 'and');
                    DXUtility.addFilterExpression(filters, 'WarehouseID', '=', warehouseID, 'and');

                    var dataSource = new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAlls,
                        select: [
                            'ProductID',
                            'ProductLotID',
                            'ProductLotCode',
                            'ProductLot',
                            'ProductLotExpiredDate',
                            'QtyOnHandGood',
                            'QtyOnHandHold',
                            'QtyOnHandBad'
                        ],
                        filter: filters,
                        sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(item); }
                    });

                    dataSource.load()
                        .done(function (result2) {
                            var product = null;
                            var stockOnHandAll = [];
                            var stockOnHandAllByProduct = [];
                            for (var i = 0; i < result2.length; i++) {
                                stockOnHandAll.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));

                                var j = stockOnHandAllByProduct.length - 1;
                                var productID = result2[i].ProductID();
                                if ((i == 0) || (stockOnHandAllByProduct[j].ProductID() != productID)) {
                                    stockOnHandAllByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));
                                    j++;
                                    product = $.grep(result, function (e) { return (e.ProductID() == productID); });
                                } else {
                                    stockOnHandAllByProduct[j].QtyOnHandGood(stockOnHandAllByProduct[j].QtyOnHandGood() +
                                        result2[i].QtyOnHandGood());
                                    stockOnHandAllByProduct[j].QtyOnHandHold(stockOnHandAllByProduct[j].QtyOnHandHold() +
                                        result2[i].QtyOnHandHold());
                                    stockOnHandAllByProduct[j].QtyOnHandBad(stockOnHandAllByProduct[j].QtyOnHandBad() +
                                        result2[i].QtyOnHandBad());
                                }

                                stockOnHandAll[i].ProductCode(product[0].ProductCode());
                                stockOnHandAll[i].Product(product[0].Product());
                                stockOnHandAll[i].ProductUOMLID(product[0].ProductUOMLID());
                                stockOnHandAll[i].ProductUOMMID(product[0].ProductUOMMID());
                                stockOnHandAll[i].ProductUOMSID(product[0].ProductUOMSID());
                                stockOnHandAll[i].ProductConversionL(product[0].ProductConversionL());
                                stockOnHandAll[i].ProductConversionM(product[0].ProductConversionM());
                                stockOnHandAll[i].ProductConversionS(product[0].ProductConversionS());

                                stockOnHandAllByProduct[j].ProductCode(product[0].ProductCode());
                                stockOnHandAllByProduct[j].Product(product[0].Product());
                                stockOnHandAllByProduct[j].ProductUOMLID(product[0].ProductUOMLID());
                                stockOnHandAllByProduct[j].ProductUOMMID(product[0].ProductUOMMID());
                                stockOnHandAllByProduct[j].ProductUOMSID(product[0].ProductUOMSID());
                                stockOnHandAllByProduct[j].ProductConversionL(product[0].ProductConversionL());
                                stockOnHandAllByProduct[j].ProductConversionM(product[0].ProductConversionM());
                                stockOnHandAllByProduct[j].ProductConversionS(product[0].ProductConversionS());
                            }

                            dataSource_vStockOnHandAll = stockOnHandAll;
                            dataSource_vStockOnHandAllByProduct = stockOnHandAllByProduct;

                            salesOrderReturnSummaryDataGrid().endCustomLoading();

                            productLotLoaded();

                            hideLoadingPanel();
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                            hideLoadingPanel();
                        });
                } else {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected Salesman does not have any reference products.'),
                        'New Order Details Failed');
                    hideLoadingPanel();
                }
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                hideLoadingPanel();
            });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman', 'Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order Return',
        colCount: 3,
        colSpan: 3,
        items: [{
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Salesman',
                        ['Warehouse'],
                        []);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var siteID = null;

                    if (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
                        siteID = collapsibleFilter.form().getEditor('SiteID').option('value');
                    } else {
                        siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
                    }

                    var childEditor = collapsibleFilter.form().getEditor('SalesmanID');
                    var childSelectedItem = childEditor.option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['WarehouseID']() != e.value))
                        childEditor.option('value', null);

                    if (siteID == undefined) {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            ['WarehouseID', '=', e.value] : null));
                    } else {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            [['WarehouseID', '=', e.value], "and",
                            ['SiteID', '=', siteID]] : ['SiteID', '=', siteID]));
                    }
                }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                    select: ['ID', 'Customer', 'SiteID'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); },
                    filter: (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                }),
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // CustomerID
        value = form.getEditor('CustomerID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CustomerID', '=', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderReturns.AddNewSalesOrderReturn');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderReturns.EditSalesOrderReturn');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesOrderReturns_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('SalesOrderReturns.EditSalesOrderReturn');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Customer', caption: 'Customer', width: '200px'
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px'
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'TotalGross', caption: 'Total DPP', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'TotalTax', caption: 'Total VAT', width: '80px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'Total', caption: 'Total', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px',
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var salesOrderReturnSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnSummaryDataGrid', 'dxDataGrid'); }
    var salesOrderReturnSummaryForm = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnSummaryForm', 'dxForm'); }

    var salesOrderReturnPrintDO = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnPrintDO', 'dxButton'); }
    var salesOrderReturnPost = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnPost', 'dxButton'); }
    var salesOrderReturnDiscard = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnDiscard', 'dxButton'); }
    var salesOrderReturnVoid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnVoid', 'dxButton'); }
    var salesOrderReturnSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnSaveAsDraftAndNew', 'dxButton'); }
    var salesOrderReturnSave = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var salesOrderReturnSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnSummaryNewRow', 'dxButton'); }
    var salesOrderReturnSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vSalesOrderReturns_salesOrderReturnSummaryDeleteRows', 'dxButton'); }

    var intrvlSOReturn;

    var isEditorEnabledSORetrun = function () {
        var dxCommandEdit = $(".dx-command-edit", "[id$=SummaryDataGrid]");
        for (var i = 0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf("Save") >= 0) {
                return true;
            }
        }
        return false;
    }

    var intrvlHandlerSORetrun = function () {
        var disabled = false;
        var newData = true;
        var data = commonPopupEdit.popupEditData();
        if (data.DocumentStatusID()) {
            newData = false;
        }
        if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) || (data.DocumentStatusID() == 4)) {
            disabled = true;
        }
        if (!isEditorEnabledSORetrun()) {
            if (salesOrderReturnSave() && salesOrderReturnPost() && salesOrderReturnVoid() & salesOrderReturnSaveAsDraftAndNew())
                //asdsadsad
                salesOrderReturnSave().option("disabled", disabled);
            salesOrderReturnSave().option("disabled", disabled);
            salesOrderReturnPost().option("disabled", newData || disabled);
            salesOrderReturnDiscard().option("disabled", newData || disabled);
            salesOrderReturnVoid().option("disabled", (data.DocumentStatusID() != 2));
            salesOrderReturnSaveAsDraftAndNew().option("disabled", disabled);
            clearInterval(intrvlSOReturn);
        }
    };


    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Order Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vSalesOrderReturns_salesOrderReturnSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        salesOrderReturnSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Order Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vSalesOrderReturns_salesOrderReturnSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(salesOrderReturnSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vSalesOrderReturns_salesOrderReturnSummaryDataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                salesOrderReturnSave().option("disabled", true);
                salesOrderReturnPost().option("disabled", true);
                salesOrderReturnDiscard().option("disabled", true);
                salesOrderReturnVoid().option("disabled", true);
                salesOrderReturnSaveAsDraftAndNew().option("disabled", true);

                intrvlSOReturn = setInterval(intrvlHandlerSORetrun, 500);
                info.data.QtyOrder = 0;
                info.data.QtyOrderConv = '0/0/0';
                info.data.AddDiscountStrataPercentage = 0;
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if ((e.row != undefined) && (e.row.rowIndex != undefined))
                        e.component.editRowIndex = e.row.rowIndex;

                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAllByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vSalesOrderReturns_productIDLookup', ea.element, 2); // Hold
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 2); // Hold
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                            calcProductPriceAndDiscount(e);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'PriceDate') {
                        e.editorElement.dxDateBox({
                            showClearButton: true,
                            placeholder: 'Transaction Date',
                            value: e.value,
                            onValueChanged: function (ea) {
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'QtyOrderConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                salesOrderReturnSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'AddDiscountStrataPercentage') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            // Added by Andhika 2016.03.17 Fixing Additional Discount Decimal Input ------------------
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 190 || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            //----------------------------------------------------------------------------------------
                            onValueChanged: function (ea) {
                                if ((ea.value == null) || (ea.value == ''))
                                    ea.value = 0;

                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderReturnSummaryForm(), info.component);
                salesOrderReturnSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderReturnSummaryForm(), info.component);
                salesOrderReturnSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );

                CommonUtility.updateSalesOrderSummaryForm(salesOrderReturnSummaryForm(), info.component);
            },
            onEditingStart: function (info) {
                salesOrderReturnSave().option('disabled', true);
                salesOrderReturnPost().option('disabled', true);
                salesOrderReturnDiscard().option('disabled', true);
                salesOrderReturnVoid().option('disabled', true);
                salesOrderReturnSaveAsDraftAndNew().option('disabled', true);
                intrvlSOReturn = setInterval(intrvlHandlerSORetrun, 500);
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyOrderConv) {
                    var conversion = CommonUtility.getConversion(
                        info.newData.QtyOrderConv,
                        DXUtility.getValue(info.oldData, 'ProductConversionL'),
                        DXUtility.getValue(info.oldData, 'ProductConversionM'),
                        DXUtility.getValue(info.oldData, 'ProductConversionS')
                    );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyOrder = conversion.qtyTransaction;
                }

                info.newData.SubtotalWeight = DXUtility.getValue(info.oldData, 'SubtotalWeight');
                info.newData.SubtotalDimension = DXUtility.getValue(info.oldData, 'SubtotalDimension');
                info.newData.UnitGrossPrice = DXUtility.getValue(info.oldData, 'UnitGrossPrice');

                info.newData.RawSubtotalGrossPrice = DXUtility.getValue(info.oldData, 'RawSubtotalGrossPrice');
                info.newData.RawSubtotalPrice = DXUtility.getValue(info.oldData, 'RawSubtotalPrice');
                info.newData.RawDiscountStrata1Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata1Amount');
                info.newData.RawDiscountStrata2Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata2Amount');
                info.newData.RawDiscountStrata3Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata3Amount');
                info.newData.RawDiscountStrata4Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata4Amount');
                info.newData.RawDiscountStrata5Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata5Amount');
                info.newData.RawAddDiscountStrataAmount = DXUtility.getValue(info.oldData, 'RawAddDiscountStrataAmount');
                info.newData.RawSubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata1');
                info.newData.RawSubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata2');
                info.newData.RawSubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata3');
                info.newData.RawSubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata4');
                info.newData.RawSubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata5');
                info.newData.RawSubtotalGross = DXUtility.getValue(info.oldData, 'RawSubtotalGross');
                info.newData.RawSubtotal = DXUtility.getValue(info.oldData, 'RawSubtotal');

                info.newData.SubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata1');
                info.newData.SubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata2');
                info.newData.SubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata3');
                info.newData.SubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata4');
                info.newData.SubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata5');
                info.newData.TaxPercentage = DXUtility.getValue(info.oldData, 'TaxPercentage');
                info.newData.SubtotalGrossPrice = DXUtility.getValue(info.oldData, 'SubtotalGrossPrice');
                info.newData.SubtotalPrice = DXUtility.getValue(info.oldData, 'SubtotalPrice');

                info.newData.UnitPrice = info.component.cellValue(info.component.editRowIndex, 'UnitPrice');

                //info.newData.DiscountStrata1Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Percentage');
                //info.newData.DiscountStrata1Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Amount');

                //info.newData.DiscountStrata2Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Percentage');
                //info.newData.DiscountStrata2Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Amount');

                //info.newData.DiscountStrata3Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Percentage');
                //info.newData.DiscountStrata3Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Amount');

                //info.newData.DiscountStrata4Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Percentage');
                //info.newData.DiscountStrata4Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Amount');

                //info.newData.DiscountStrata5Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Percentage');
                //info.newData.DiscountStrata5Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Amount');

                info.newData.DiscountStrata1Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata1Percentage');
                info.newData.DiscountStrata1Amount = DXUtility.getValue(info.oldData, 'DiscountStrata1Amount');

                info.newData.DiscountStrata2Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata2Percentage');
                info.newData.DiscountStrata2Amount = DXUtility.getValue(info.oldData, 'DiscountStrata2Amount');

                info.newData.DiscountStrata3Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata3Percentage');
                info.newData.DiscountStrata3Amount = DXUtility.getValue(info.oldData, 'DiscountStrata3Amount');

                info.newData.DiscountStrata4Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata4Percentage');
                info.newData.DiscountStrata4Amount = DXUtility.getValue(info.oldData, 'DiscountStrata4Amount');

                info.newData.DiscountStrata5Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata5Percentage');
                info.newData.DiscountStrata5Amount = DXUtility.getValue(info.oldData, 'DiscountStrata5Amount');


                info.newData.AddDiscountStrataAmount = info.component.cellValue(info.component.editRowIndex, 'AddDiscountStrataAmount');

                info.newData.SubtotalGross = info.component.cellValue(info.component.editRowIndex, 'SubtotalGross');
                info.newData.SubtotalTax = info.component.cellValue(info.component.editRowIndex, 'SubtotalTax');
                info.newData.Subtotal = info.component.cellValue(info.component.editRowIndex, 'Subtotal');

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
                if (qtyOrder == undefined)
                    qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

                if (qtyOrder <= 0) {
                    e.errorText = 'Order Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(salesOrderReturnSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (salesOrderReturnSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 1' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 2' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 3' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 4' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="1">' + 'Disc 1-5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Additional Disc' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'PriceDate', caption: 'Price Date', width: '140px',
                dataType: 'date'
            }, {
                dataField: 'UnitPrice', caption: 'Unit Price', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
            }, {
                dataField: 'QtyOrderConv', caption: 'Qty (L/M/S)', width: '100px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOrderConv', 2)); // Hold
                }
            },
            //{
            //    dataField: 'DiscountStrata1Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata1Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //},
            {
                dataField: 'DiscountStrataDefaultAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
                calculateCellValue: function (data) {
                    var discountStrata1Amount = DXUtility.getValue(data, 'DiscountStrata1Amount');
                    var discountStrata2Amount = DXUtility.getValue(data, 'DiscountStrata2Amount');
                    var discountStrata3Amount = DXUtility.getValue(data, 'DiscountStrata3Amount');
                    var discountStrata4Amount = DXUtility.getValue(data, 'DiscountStrata4Amount');
                    var discountStrata5Amount = DXUtility.getValue(data, 'DiscountStrata5Amount');

                    if (isNaN(discountStrata1Amount)) discountStrata1Amount = 0;
                    if (isNaN(discountStrata2Amount)) discountStrata2Amount = 0;
                    if (isNaN(discountStrata3Amount)) discountStrata3Amount = 0;
                    if (isNaN(discountStrata4Amount)) discountStrata4Amount = 0;
                    if (isNaN(discountStrata5Amount)) discountStrata5Amount = 0;

                    return discountStrata1Amount + discountStrata2Amount + discountStrata3Amount +
                        discountStrata4Amount + discountStrata5Amount;
                }
            }, {
                dataField: 'AddDiscountStrataPercentage', caption: '%', width: '40px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'AddDiscountStrataAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalGross', caption: 'DPP', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalTax', caption: 'VAT', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'Subtotal', caption: 'Subtotal', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }]
        }));

        content.append($('<div id="vSalesOrderReturns_salesOrderReturnSummaryForm" style="margin-top: 9px;">').dxForm({
            deferRendering: false,
            colCount: 4,
            showColonAfterLabel: false,
            labelLocation: 'left',
            alignItemLabels: true,
            items: [{
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'TotalGross',
                label: { text: 'Total DPP' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 2
            },
            //{
            //    dataField: 'DocumentStatusReason',
            //    label: { location: 'top', text: 'Reason for changing Price Date/Additional Disc' },
            //    colSpan: 2,
            //    editorOptions: {
            //        maxLength: 200,
            //        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            //    }
            //},
            {
                itemType: 'empty',
                colSpan: 1
            }, {
                dataField: 'TotalTax',
                label: { text: 'Total VAT' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'Total',
                label: { text: 'Total' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrintDO = $('<div id="vSalesOrderReturns_salesOrderReturnPrintDO" style="margin-right: 32px;">').dxButton({
            text: 'Print DO', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrintDO(this); }
        });

        var commandPost = $('<div id="vSalesOrderReturns_salesOrderReturnPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vSalesOrderReturns_salesOrderReturnDiscard">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandVoid = $('<div id="vSalesOrderReturns_salesOrderReturnVoid" style="margin-right: 16px;">').dxButton({
            text: 'Void', icon: 'icons8-delete-red',
            onClick: function () { commonPopupEdit.events.performVoid(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vSalesOrderReturns_salesOrderReturnSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrintDO);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandVoid);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrintDO = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printDOEditing(data.DODocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performVoid = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Void this transaction?', 'Void Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(4, 3); // Void and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var preDODocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        preDODocumentCode = previewDODocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                    form.getEditor('DODocumentCode').option('value', preDODocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order Return',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    e.component.option('max', null);
                    form.getEditor('DOReceivedDate').option('min', e.value);
                }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxLookup',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: [
                    'Code',
                    'Name',
                    'Address1',
                    'Address2',
                    'Address3'
                ],
                searchPlaceholder: 'Customer/Address',
                searchEnabled: false,
                popupWidth: '1082px',
                showPopupTitle: false,
                fieldEditEnabled: true,
                onOpened: function (e) { },
                onClosed: function (e) { },
                onContentReady: function (e) {
                    var form = commonPopupEdit.form();
                    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                    CommonUtility.createCustomerLookupHeader('vSalesOrderReturns_customerIDLookup', e.element,
                        getValueFromSystemParameter('Customer.Category1'),
                        user.SiteID(), form);
                },
                itemTemplate: function (data, index, element) {
                    return CommonUtility.createCustomerLookupItem(data, element);
                },
                onValueChanged: function (e) {
                    if (e.value) {
                        var item = e.selectedItem;
                        if (item) {
                            var data = commonPopupEdit.popupEditData();
                            var form = commonPopupEdit.form();
                            var salesmanID = null;
                            var warehouseID = null;
                            var termOfPaymentID = null;

                            dataSource_vSelectedProductPrices = undefined;
                            dataSource_vSelectedDiscountGroup = undefined;

                            data.PriceGroupID(undefined);
                            data.DiscountGroupID(undefined);
                            if (item) {
                                salesmanID = item.SalesmanID();
                                warehouseID = item.WarehouseID();
                                termOfPaymentID = item.TermOfPaymentID();
                                dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                                    ['PriceGroupID', '=', item.PriceGroupID()]);

                                dataSource_vSelectedDiscountGroup =
                                    Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(item.DiscountGroupID());

                                data.PriceGroupID(item.PriceGroupID());
                                data.DiscountGroupID(item.DiscountGroupID());
                            }

                            e.component.option('value', e.value);
                            form.getEditor('SalesmanID').option('value', salesmanID);
                            form.getEditor('WarehouseID').option('value', warehouseID);

                            updateTermOfPaymentEditor(form, termOfPaymentID);
                        }
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAll = [];
                    dataSource_vStockOnHandAllByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        salesOrderReturnSummaryDataGrid().cancelEditData();
                        data.ChildSummaries([]);
                        salesOrderReturnSummaryDataGrid().option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }

                    var form = commonPopupEdit.form();
                    var warehouseID = null;

                    if (e.selectedItem) {
                        warehouseID = e.selectedItem.WarehouseID();
                    }

                    form.getEditor('WarehouseID').option('value', warehouseID);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAll = [];
                    dataSource_vStockOnHandAllByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = salesOrderReturnSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'TermOfPaymentID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Term of Payment' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'ReasonID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Reason' },
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SOReturnReason']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Delivery Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        },
        //{
        //    dataField: 'DOShipmentDate',
        //    label: { text: 'Shipment Date' },
        //    validationRules: [{ type: 'required' }],
        //    colSpan: 2,
        //    editorType: 'dxDateBox',
        //    editorOptions: {
        //        width: '100%',
        //        showClearButton: true,
        //        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
        //    }
        //},
        {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'DOPrintedCount',
            label: { text: 'Printed Count' },
            colSpan: 1,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOLastPrintedDate',
            label: { text: 'Last Printed Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOReceivedDate',
            label: { text: 'Received Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    e.component.option('min', null);
                    form.getEditor('TransactionDate').option('max', e.value);
                }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyOrder = 0;
        info.data.QtyOrderConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAll,
                            filter: ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vSalesOrderReturns_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyOrderConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    // Added by Andhika 2016.03.17 Fixing Issue Negatif Value -----
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    //-----------------------------------------------------------
                    onValueChanged: function (ea) {
                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vSalesOrderReturnDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
        if (qtyOrder == undefined)
            qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

        if (qtyOrder <= 0) {
            e.errorText = 'Order Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyOrderConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyOrderConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyOrderConv',
                'QtyOrder');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyOrderConv', caption: 'Order Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyOrder',
            label: { text: 'Order Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOrderConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_order_return_32px.png',

        dataSource_vSalesOrderReturnDetails: dataSource_vSalesOrderReturnDetails,
        dataSource_vSalesOrderReturnSummary: dataSource_vSalesOrderReturnSummary,
        dataSource_vStockOnHandAll: dataSource_vStockOnHandAll,
        dataSource_vStockOnHandAllByProduct: dataSource_vStockOnHandAllByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        salesOrderReturnSummaryDataGrid: salesOrderReturnSummaryDataGrid,
        salesOrderReturnPost: salesOrderReturnPost,
        salesOrderReturnDiscard: salesOrderReturnDiscard,
        salesOrderReturnVoid: salesOrderReturnVoid,
        salesOrderReturnSaveAsDraftAndNew: salesOrderReturnSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vSalesOrderSamples = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevSalesOrderSamplesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesOrderSamples');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataObservable()) {
            dataObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesOrderSamples.off('modified', handlevSalesOrderSamplesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSamples,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSampleViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesOrderSamples.on('modified', handlevSalesOrderSamplesModification);

    var dataSource_vSalesOrderSampleDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSampleDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel(item); }
    });

    var dataSource_vSalesOrderSampleSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSampleSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;
    var dataSource_vSelectedProductPrices;
    var dataSource_vSelectedDiscountGroup;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-04-(Auto Generated)';
    }

    function previewDODocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-10-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var customerDataSource = new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vCustomers,
            select: [
                'ID',
                'Customer',
                'Address',
                'Category1',
                'SalesmanID',
                'Salesman',
                'WarehouseID',
                'TermOfPaymentID',
                'PriceGroupID',
                'DiscountGroupID',
                'SiteID'
            ],
            filter: [
                ['IsDeleted', '=', false], 'and',
                ['StatusID', '=', 1], 'and',
                ['SiteID', '=', siteID]
            ],
            map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
        });

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource([
            ['IsDeleted', '=', false], 'and',
            ['StatusID', '=', 1], 'and',
            ['SiteID', '=', siteID]
        ]);

        form.getEditor('CustomerID').option('value', null);
        form.getEditor('CustomerID').option('dataSource', customerDataSource);
        customerDataSource.load();

        form.getEditor('SalesmanID').option('value', null);
        form.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
        salesmanDataSource.load();
    }

    function updateTermOfPaymentEditor(form, termOfPaymentID) {
        var filter = [
            ['Group', '=', 'CustomerTermOfPayment']
        ];

        if ((termOfPaymentID != undefined) && (termOfPaymentID != null)) {
            filter.push('and');
            filter.push(['Value_Int32', '<=', termOfPaymentID]);
        }

        var termOfPaymentDataSource = DataUtility.GetLookupSystemLookupDataSource(filter);

        form.getEditor('TermOfPaymentID').option('value', null);
        form.getEditor('TermOfPaymentID').option('dataSource', termOfPaymentDataSource);
        form.getEditor('TermOfPaymentID').option('value', termOfPaymentID);
        termOfPaymentDataSource.load();
    }


    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }

    function calcProductPriceAndDiscount(e) {
        return CommonUtility.calcProductPriceAndDiscount(
            commonPopupEdit.form().getEditor('TransactionDate').option('value'),
            e.component,
            e.row.rowIndex,
            e.row.data,
            dataSource_vSelectedProductPrices,
            dataSource_vSelectedDiscountGroup,
            true
        );
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            salesOrderSampleSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            salesOrderSampleSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummaryArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            salesOrderSampleSummaryDataGrid().option('dataSource').store(),
            'vSalesOrderSampleSummaryViewModel',
            summary
        );
    }

    function createSummaryDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vSalesOrderSampleSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyOrderConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyOrderConvColumn]()));
        commands.append('&nbsp;');

        if (isLotNumberEntryRequired) {
            var column = qtyOrderConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyOrderConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = salesOrderSampleSummaryDataGrid().option('editing');
        var selection = salesOrderSampleSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        salesOrderSampleSummaryDataGrid().option('editing', option);
        salesOrderSampleSummaryDataGrid().option('selection', selection);
        salesOrderSampleSummaryNewRow().option('disabled', !allowed);
        salesOrderSampleSummaryDeleteRows().option('disabled', true);
        salesOrderSampleSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSamples,
            select: [
                'DocumentID',
                'DocumentCode',
                'TransactionDate',
                'PODocumentID',
                'PODocumentCode',
                'POTransactionDate',
                'SalesmanID',
                'WarehouseID',
                'SiteID',
                'CompanyID',
                'Company',
                'AreaID',
                'RegionID',
                'TerritoryID',
                'CustomerID',
                'PriceGroupID',
                'DiscountGroupID',
                'TermOfPaymentID',
                'ReferenceNumber',
                'DODocumentID',
                'DODocumentCode',
                'DOShipmentDate',
                'DOReceivedDate',
                'DOPrintedCount',
                'DOLastPrintedDate',
                'RawTotalGrossPrice',
                'RawTotalPrice',
                'RawTotalDiscountStrata1Amount',
                'RawTotalDiscountStrata2Amount',
                'RawTotalDiscountStrata3Amount',
                'RawTotalDiscountStrata4Amount',
                'RawTotalDiscountStrata5Amount',
                'RawTotalAddDiscountStrataAmount',
                'RawTotalGross',
                'RawTotalTax',
                'RawTotal',
                'TotalGrossPrice',
                'TotalPrice',
                'TotalDiscountStrata1Amount',
                'TotalDiscountStrata2Amount',
                'TotalDiscountStrata3Amount',
                'TotalDiscountStrata4Amount',
                'TotalDiscountStrata5Amount',
                'TotalAddDiscountStrataAmount',
                'TotalGross',
                'TotalTax',
                'Total',
                'TotalWeight',
                'TotalDimension',
                'AddDiscountStrataReason',
                'DocumentStatusID',
                'DocumentStatusReason'
            ],
            filter: ['DocumentID', '=', documentID],
            paginate: false,
            map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSampleViewModel(item); }
        }).load()
            .done(function (result) {
                if (result.length > 0) {
                    new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSampleSummaries,
                        select: [
                            'DocumentID',
                            'ProductID',
                            'ProductCode',
                            'Product',
                            'ProductUOMLID',
                            'ProductUOMMID',
                            'ProductUOMSID',
                            'ProductWeight',
                            'ProductDimensionL',
                            'ProductDimensionW',
                            'ProductDimensionH',
                            'ProductConversionL',
                            'ProductConversionM',
                            'ProductConversionS',
                            'QtyOnHand',
                            'QtyConvL',
                            'QtyConvM',
                            'QtyConvS',
                            'Qty',
                            'QtyOrderConv',
                            'QtyOrder',
                            'UnitGrossPrice',
                            'UnitPrice',
                            'DiscountStrata1Percentage',
                            'DiscountStrata2Percentage',
                            'DiscountStrata3Percentage',
                            'DiscountStrata4Percentage',
                            'DiscountStrata5Percentage',
                            'AddDiscountStrataPercentage',
                            'TaxPercentage',
                            'RawSubtotalGrossPrice',
                            'RawSubtotalPrice',
                            'RawSubtotalDiscountStrata1',
                            'RawDiscountStrata1Amount',
                            'RawSubtotalDiscountStrata2',
                            'RawDiscountStrata2Amount',
                            'RawSubtotalDiscountStrata3',
                            'RawDiscountStrata3Amount',
                            'RawSubtotalDiscountStrata4',
                            'RawDiscountStrata4Amount',
                            'RawSubtotalDiscountStrata5',
                            'RawDiscountStrata5Amount',
                            'RawAddDiscountStrataAmount',
                            'RawSubtotalGross',
                            'RawSubtotalTax',
                            'RawSubtotal',
                            'SubtotalGrossPrice',
                            'SubtotalPrice',
                            'SubtotalDiscountStrata1',
                            'DiscountStrata1Amount',
                            'SubtotalDiscountStrata2',
                            'DiscountStrata2Amount',
                            'SubtotalDiscountStrata3',
                            'DiscountStrata3Amount',
                            'SubtotalDiscountStrata4',
                            'DiscountStrata4Amount',
                            'SubtotalDiscountStrata5',
                            'DiscountStrata5Amount',
                            'AddDiscountStrataAmount',
                            'SubtotalGross',
                            'SubtotalTax',
                            'Subtotal',
                            'SubtotalWeight',
                            'SubtotalDimension'
                        ],
                        filter: ['DocumentID', '=', documentID],
                        sort: ['ProductID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel(item); }
                    }).load()
                        .done(function (result2) {
                            if (result2.length > 0) {
                                new DevExpress.data.DataSource({
                                    store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSampleDetails,
                                    select: [
                                        'DocumentID',
                                        'ProductID',
                                        'ProductLotID',
                                        'ProductLotCode',
                                        'QtyOnHand',
                                        'QtyConvL',
                                        'QtyConvM',
                                        'QtyConvS',
                                        'Qty',
                                        'QtyOrderConv',
                                        'QtyOrder'
                                    ],
                                    filter: ['DocumentID', '=', documentID],
                                    sort: ['ProductID', 'ProductLotID'],
                                    paginate: false,
                                    map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel(item); }
                                }).load()
                                    .done(function (result3) {
                                        if (result3.length > 0) {
                                            var summaries = result2;
                                            var j = -1;
                                            for (var i = 0; i < result3.length; i++) {
                                                var details = result3[i];
                                                if ((i == 0) || (summaries[j].ProductID() != details.ProductID())) {
                                                    j++;
                                                    summaries[j].ChildDetails = ko.observableArray([]);
                                                }

                                                details.ProductCode(summaries[j].ProductCode());
                                                details.Product(summaries[j].Product());
                                                details.ProductUOMLID(summaries[j].ProductUOMLID());
                                                details.ProductUOMMID(summaries[j].ProductUOMMID());
                                                details.ProductUOMSID(summaries[j].ProductUOMSID());
                                                details.ProductConversionL(summaries[j].ProductConversionL());
                                                details.ProductConversionM(summaries[j].ProductConversionM());
                                                details.ProductConversionS(summaries[j].ProductConversionS());

                                                summaries[j].ChildDetails().push(details);
                                            }

                                            result[0].ChildSummaries(summaries);

                                            hideLoadingPanel();

                                            isDataGridRefreshRequired = refreshRequired;
                                            openEditing(result[0]);
                                        } else {
                                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The details of selected data is not found.'), 'Load Failed');
                                            hideLoadingPanel();
                                        }

                                    })
                                    .fail(function (error) {
                                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load details of selected data.'), 'Load Failed');
                                        hideLoadingPanel();
                                    });
                            } else {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The summary of selected data is not found.'), 'Load Failed');
                                hideLoadingPanel();
                            }
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load summary of selected data.'), 'Load Failed');
                            hideLoadingPanel();
                        });
                } else {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected data is not found.'), 'Load Failed');
                    hideLoadingPanel();
                }
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });

        //Dismoyo_Ciptoning_Client.DB.vSalesOrderSamples.byKey(
        //    documentID, { expand: ['ChildSummaries/ChildDetails'] })
        //    .done(function (result) {
        //        hideLoadingPanel();

        //        isDataGridRefreshRequired = refreshRequired;
        //        openEditing(new Dismoyo_Ciptoning_Client.vSalesOrderSampleViewModel(result));
        //    })
        //    .fail(function (error) {
        //        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
        //        hideLoadingPanel();
        //    });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesOrderSampleViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Sales Order Sample');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        var summaryForm = salesOrderSampleSummaryForm();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var doDocumentCode = data.DODocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            documentCode = previewDocumentCode(data.SiteCode());
            doDocumentCode = previewDODocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if (data.DocumentStatusID() == 1 && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];
                    form.getEditor('SalesmanID').option('value', data.SalesmanID());

                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) ||
                (data.DocumentStatusID() == 4)) // Posted, Discarded or Voided
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        salesOrderSamplePrintDO().option('disabled', newData);
        salesOrderSamplePost().option('disabled', newData || disabled);
        salesOrderSampleDiscard().option('disabled', newData || disabled);
        salesOrderSampleVoid().option('disabled', (data.DocumentStatusID() != 2));
        salesOrderSampleSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        var priceGroupID = data.PriceGroupID();
        var discountGroupID = data.DiscountGroupID();

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());
        updateTermOfPaymentEditor(form, data.TermOfPaymentID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('CustomerID').option('value', data.CustomerID());
        form.getEditor('SalesmanID').option('value', data.SalesmanID());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('TermOfPaymentID').option('value', data.TermOfPaymentID());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());
        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        //summaryForm.getEditor('DocumentStatusReason').option('value', data.DocumentStatusReason());

        form.getEditor('PODocumentCode').option('value', data.PODocumentCode());
        form.getEditor('POTransactionDate').option('value', data.POTransactionDate());

        form.getEditor('DODocumentCode').option('value', doDocumentCode);
        form.getEditor('DOShipmentDate').option('value', data.DOShipmentDate());
        form.getEditor('DOReceivedDate').option('value', data.DOReceivedDate());
        form.getEditor('DOPrintedCount').option('value', data.DOPrintedCount());
        form.getEditor('DOLastPrintedDate').option('value', data.DOLastPrintedDate());

        summaryForm.getEditor('TotalGross').option('value', CommonUtility.getNumberFormat(data.TotalGross()));
        summaryForm.getEditor('TotalTax').option('value', CommonUtility.getNumberFormat(data.TotalTax()));
        summaryForm.getEditor('Total').option('value', CommonUtility.getNumberFormat(data.Total()));

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('CustomerID').option('readOnly', disabled);
        form.getEditor('SalesmanID').option('readOnly', disabled);
        form.getEditor('TermOfPaymentID').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);

        //summaryForm.getEditor('DocumentStatusReason').option('readOnly', disabled);

        form.getEditor('PODocumentCode').option('readOnly', disabled);
        form.getEditor('POTransactionDate').option('readOnly', disabled);

        form.getEditor('DOShipmentDate').option('readOnly', disabled);
        form.getEditor('DOReceivedDate').option('readOnly', disabled);

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
            form.getEditor('DOShipmentDate').option('value', today);
            //form.getEditor('DOReceivedDate').option('value', today);
        } else {
            if (priceGroupID)
                data.PriceGroupID(priceGroupID);

            if (discountGroupID)
                data.DiscountGroupID(discountGroupID);

            dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                ['PriceGroupID', '=', data.PriceGroupID()]);

            dataSource_vSelectedDiscountGroup =
                Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(data.DiscountGroupID());
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = salesOrderSampleSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();
        var summaryForm = salesOrderSampleSummaryForm();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = salesOrderSampleSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Order Details.';
                isValid = false;
            }
        }

        //var documentStatusReason = summaryForm.getEditor('DocumentStatusReason').option('value');
        //if (isValid && ((documentStatusReason == null) || (documentStatusReason == ''))) {
        //    for (var i = 0; i < summaries.length; i++) {
        //        if (((summaries[i].PriceDate() != undefined) || (summaries[i].PriceDate() != null)) ||
        //            (summaries[i].AddDiscountStrataPercentage() > 0.0)) {
        //            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Price Date/Additional Disc has changed. ' +
        //                'Please specify the Reason for changing Price Date/Additional Disc.'), 'Save Failed');
        //            isValid = false;
        //            break;
        //        }
        //    }
        //}

        var rawTotalGrossPrice = 0;
        var rawTotalPrice = 0;
        var rawTotalDiscountStrata1Amount = 0;
        var rawTotalDiscountStrata2Amount = 0;
        var rawTotalDiscountStrata3Amount = 0;
        var rawTotalDiscountStrata4Amount = 0;
        var rawTotalDiscountStrata5Amount = 0;
        var rawTotalAddDiscountStrataAmount = 0;
        var rawTotalGross = 0;
        var rawTotalTax = 0;
        var rawTotal = 0;
        var totalGrossPrice = 0;
        var totalPrice = 0;
        var totalDiscountStrata1Amount = 0;
        var totalDiscountStrata2Amount = 0;
        var totalDiscountStrata3Amount = 0;
        var totalDiscountStrata4Amount = 0;
        var totalDiscountStrata5Amount = 0;
        var totalAddDiscountStrataAmount = 0;
        var totalGross = 0;
        var totalTax = 0;
        var total = 0;
        var totalWeight = 0;
        var totalDimension = 0;

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyOrder = 0;

                rawTotalGrossPrice += summary.RawSubtotalGrossPrice();
                rawTotalPrice += summary.RawSubtotalPrice();
                rawTotalDiscountStrata1Amount += summary.RawDiscountStrata1Amount();
                rawTotalDiscountStrata2Amount += summary.RawDiscountStrata2Amount();
                rawTotalDiscountStrata3Amount += summary.RawDiscountStrata3Amount();
                rawTotalDiscountStrata4Amount += summary.RawDiscountStrata4Amount();
                rawTotalDiscountStrata5Amount += summary.RawDiscountStrata5Amount();
                rawTotalAddDiscountStrataAmount += summary.RawAddDiscountStrataAmount();
                rawTotalGross += summary.RawSubtotalGross();
                rawTotalTax += summary.RawSubtotalTax();
                rawTotal += summary.RawSubtotal();
                totalGrossPrice += summary.SubtotalGrossPrice();
                totalPrice += summary.SubtotalPrice();
                totalDiscountStrata1Amount += summary.DiscountStrata1Amount();
                totalDiscountStrata2Amount += summary.DiscountStrata2Amount();
                totalDiscountStrata3Amount += summary.DiscountStrata3Amount();
                totalDiscountStrata4Amount += summary.DiscountStrata4Amount();
                totalDiscountStrata5Amount += summary.DiscountStrata5Amount();
                totalAddDiscountStrataAmount += summary.AddDiscountStrataAmount();
                totalGross += summary.SubtotalGross();
                totalTax += summary.SubtotalTax();
                total += summary.Subtotal();
                totalWeight += summary.SubtotalWeight();
                totalDimension += summary.SubtotalDimension();
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];

                    sumQtyOrder += details.QtyOrder();
                }

                if (summary.QtyOrder() != sumQtyOrder) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Order Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.CustomerID(form.getEditor('CustomerID').option('value'));
            data.SalesmanID(form.getEditor('SalesmanID').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.TermOfPaymentID(form.getEditor('TermOfPaymentID').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            //data.DocumentStatusReason(documentStatusReason);

            data.PODocumentCode(form.getEditor('PODocumentCode').option('value'));
            data.POTransactionDate(form.getEditor('POTransactionDate').option('value'));

            data.DOShipmentDate(form.getEditor('DOShipmentDate').option('value'));
            data.DOReceivedDate(form.getEditor('DOReceivedDate').option('value'));
            data.DOPrintedCount(form.getEditor('DOPrintedCount').option('value'));
            data.DOLastPrintedDate(form.getEditor('DOLastPrintedDate').option('value'));

            data.RawTotalGrossPrice(rawTotalGrossPrice);
            data.RawTotalPrice(rawTotalPrice);
            data.RawTotalDiscountStrata1Amount(rawTotalDiscountStrata1Amount);
            data.RawTotalDiscountStrata2Amount(rawTotalDiscountStrata2Amount);
            data.RawTotalDiscountStrata3Amount(rawTotalDiscountStrata3Amount);
            data.RawTotalDiscountStrata4Amount(rawTotalDiscountStrata4Amount);
            data.RawTotalDiscountStrata5Amount(rawTotalDiscountStrata5Amount);
            data.RawTotalAddDiscountStrataAmount(rawTotalAddDiscountStrataAmount);
            data.RawTotalGross(rawTotalGross);
            data.RawTotalTax(rawTotalTax);
            data.RawTotal(rawTotal);
            data.TotalGrossPrice(totalGrossPrice);
            data.TotalPrice(totalPrice);
            data.TotalDiscountStrata1Amount(totalDiscountStrata1Amount);
            data.TotalDiscountStrata2Amount(totalDiscountStrata2Amount);
            data.TotalDiscountStrata3Amount(totalDiscountStrata3Amount);
            data.TotalDiscountStrata4Amount(totalDiscountStrata4Amount);
            data.TotalDiscountStrata5Amount(totalDiscountStrata5Amount);
            data.TotalAddDiscountStrataAmount(totalAddDiscountStrataAmount);
            data.TotalGross(totalGross);
            data.TotalTax(totalTax);
            data.Total(total);
            data.TotalWeight(totalWeight);
            data.TotalDimension(totalDimension);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            if (dataJS.POTransactionDate)
                dataJS.POTransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.POTransactionDate);

            dataJS.DOShipmentDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOShipmentDate);
            dataJS.DOReceivedDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOReceivedDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyOrder * -1;
                }

                summary.Qty = summary.QtyOrder * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            var dc = $('.dx-popup-normal>.dx-dialog-content');
            if (dc.length == 0)
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printDOEditing(doDocumentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Delivery Order');
        commonPopupIFrame.popupEditOptions.visible(true);

        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.ExtDeliveryOrderReport.url([['DocumentID', '=', doDocumentID]]));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = salesOrderSampleSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length == 0) {
                            items = [new Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel(details)];
                            dataSourceItems[i].ChildDetails().push(items[0]);
                        }

                        var item = items[0];
                        item.QtyConvL(DXUtility.getValue(dataSourceItems[i], 'QtyConvL'));
                        item.QtyConvM(DXUtility.getValue(dataSourceItems[i], 'QtyConvM'));
                        item.QtyConvS(DXUtility.getValue(dataSourceItems[i], 'QtyConvS'));
                        item.QtyOrder(DXUtility.getValue(dataSourceItems[i], 'QtyOrder'));
                        item.QtyOrderConv(DXUtility.getValue(dataSourceItems[i], 'QtyOrderConv'));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyOrderColumn = 'QtyOrder' + itemStatusName;
        var qtyOrderConvColumn = 'QtyOrderConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyOrderColumn: qtyOrderColumn,
            qtyOrderConvColumn: qtyOrderConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3) ||
            (editData.DocumentStatusID() == 4))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyOrderConv').option('value', data.QtyOrderConv());

        var conversion = CommonUtility.getConversion(
            data.QtyOrderConv(),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyOrder').option('value', conversion.qtyTransaction);

        data = validateSummaryArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vSalesOrderSampleDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyOrder').option('value'),
            'Order',
            'vSalesOrderSampleDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            salesOrderSampleSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            var salesmanID = form.getEditor('SalesmanID').option('value');
            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
                select: [
                    'ProductID',
                    'ProductCode',
                    'Product',
                    'ProductUOMLID',
                    'ProductUOMMID',
                    'ProductUOMSID',
                    'ProductConversionL',
                    'ProductConversionM',
                    'ProductConversionS'
                ],
                filter: [
                    ['SalesmanID', '=', salesmanID], 'and',
                    ['ProductName', 'contains', 'SAMPLE']
                ],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
            }).load()
                .done(function (result) {
                    if (result.length > 0) {
                        var productDataSource = result;

                        var warehouseID = form.getEditor('WarehouseID').option('value');
                        var filters = [];
                        var groupFilterExpr = [];

                        for (var i = 0; i < result.length; i++)
                            DXUtility.addFilterExpression(groupFilterExpr, 'ProductID', '=', result[i].ProductID(), 'or');

                        DXUtility.addGroupFilterExpression(filters, groupFilterExpr, 'and');
                        DXUtility.addFilterExpression(filters, 'WarehouseID', '=', warehouseID, 'and');
                        DXUtility.addFilterExpression(filters, 'QtyOnHandGood', '>', 0, 'and');

                        var dataSource = new DevExpress.data.DataSource({
                            store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                            select: [
                                'ProductID',
                                'ProductLotID',
                                'ProductLotCode',
                                'ProductLot',
                                'ProductLotExpiredDate',
                                'QtyOnHandGood'
                            ],
                            filter: filters,
                            sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                            paginate: false,
                            map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                        });

                        dataSource.load()
                            .done(function (result2) {
                                var product = null;
                                var stockOnHandAvailable = [];
                                var stockOnHandAvailableByProduct = [];
                                for (var i = 0; i < result2.length; i++) {
                                    stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                                    var j = stockOnHandAvailableByProduct.length - 1;
                                    var productID = result2[i].ProductID();
                                    if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                        stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));
                                        j++;
                                        product = $.grep(result, function (e) { return (e.ProductID() == productID); });
                                    } else {
                                        stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                            result2[i].QtyOnHandGood());
                                        stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                            result2[i].QtyOnHandHold());
                                        stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                            result2[i].QtyOnHandBad());
                                    }

                                    stockOnHandAvailable[i].ProductCode(product[0].ProductCode());
                                    stockOnHandAvailable[i].Product(product[0].Product());
                                    stockOnHandAvailable[i].ProductUOMLID(product[0].ProductUOMLID());
                                    stockOnHandAvailable[i].ProductUOMMID(product[0].ProductUOMMID());
                                    stockOnHandAvailable[i].ProductUOMSID(product[0].ProductUOMSID());
                                    stockOnHandAvailable[i].ProductConversionL(product[0].ProductConversionL());
                                    stockOnHandAvailable[i].ProductConversionM(product[0].ProductConversionM());
                                    stockOnHandAvailable[i].ProductConversionS(product[0].ProductConversionS());

                                    stockOnHandAvailableByProduct[j].ProductCode(product[0].ProductCode());
                                    stockOnHandAvailableByProduct[j].Product(product[0].Product());
                                    stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].ProductUOMLID());
                                    stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].ProductUOMMID());
                                    stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].ProductUOMSID());
                                    stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ProductConversionL());
                                    stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ProductConversionM());
                                    stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ProductConversionS());
                                }

                                dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                                dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                                if (dataSource_vStockOnHandAvailable.length == 0)
                                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                        'Product (Sample) lot stock with item status Good for the selected warehouse is empty.'),
                                        'New Order Details Failed');
                                else
                                    productLotLoaded();

                                hideLoadingPanel();
                            })
                            .fail(function (error) {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                                hideLoadingPanel();
                            });
                    } else {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected Salesman does not have any reference products.'),
                            'New Order Details Failed');
                        hideLoadingPanel();
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman', 'Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order Sample',
        colCount: 3,
        colSpan: 3,
        items: [{
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Salesman',
                        ['Warehouse'],
                        []);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var siteID = null;

                    if (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
                        siteID = collapsibleFilter.form().getEditor('SiteID').option('value');
                    } else {
                        siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
                    }

                    var childEditor = collapsibleFilter.form().getEditor('SalesmanID');
                    var childSelectedItem = childEditor.option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['WarehouseID']() != e.value))
                        childEditor.option('value', null);

                    if (siteID == undefined) {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            ['WarehouseID', '=', e.value] : null));
                    } else {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            [['WarehouseID', '=', e.value], "and",
                            ['SiteID', '=', siteID]] : ['SiteID', '=', siteID]));
                    }
                }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                    select: ['ID', 'Customer', 'SiteID'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); },
                    filter: (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                }),
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // CustomerID
        value = form.getEditor('CustomerID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CustomerID', '=', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderSamples.AddNewSalesOrderSample');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderSamples.EditSalesOrderSample');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesOrderSamples_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('SalesOrderSamples.EditSalesOrderSample');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Customer', caption: 'Customer', width: '200px'
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px'
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'TotalGross', caption: 'Total DPP', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'TotalTax', caption: 'Total VAT', width: '80px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'Total', caption: 'Total', width: '100px', allowEditing: false,
        dataType: 'number', format: 'fixedPoint', precision: 2
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px',
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];
    
    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var salesOrderSampleSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleSummaryDataGrid', 'dxDataGrid'); }
    var salesOrderSampleSummaryForm = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleSummaryForm', 'dxForm'); }

    var salesOrderSamplePrintDO = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSamplePrintDO', 'dxButton'); }
    var salesOrderSamplePost = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSamplePost', 'dxButton'); }
    var salesOrderSampleDiscard = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleDiscard', 'dxButton'); }
    var salesOrderSampleVoid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleVoid', 'dxButton'); }
    var salesOrderSampleSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleSaveAsDraftAndNew', 'dxButton'); }
    var salesOrderSampleSave = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var salesOrderSampleSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleSummaryNewRow', 'dxButton'); }
    var salesOrderSampleSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSamples_salesOrderSampleSummaryDeleteRows', 'dxButton'); }
    var intrvlSOSample;

    var isEditorEnabledSOSample = function () {
        var dxCommandEdit = $(".dx-command-edit", "[id$=SummaryDataGrid]");
        for (var i = 0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf("Save") >= 0) {
                return true;
            }
        }
        return false;
    }

    var intrvlHandlerSOSample = function () {
        var disabled = false;
        var newData = true;
        var data = commonPopupEdit.popupEditData();
        if (data.DocumentStatusID()) {
            newData = false;
        }
        if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) || (data.DocumentStatusID() == 4)) {
            disabled = true;
        }
        if (!isEditorEnabledSOSample()) {
            if (salesOrderSampleSave() && salesOrderSamplePost() && salesOrderSampleVoid() & salesOrderSampleSaveAsDraftAndNew())
                //asdsadsad
                salesOrderSampleSave().option("disabled", disabled);
            salesOrderSampleSave().option("disabled", disabled);
            salesOrderSamplePost().option("disabled", newData || disabled);
            salesOrderSampleDiscard().option("disabled", newData || disabled);
            salesOrderSampleVoid().option("disabled", (data.DocumentStatusID() != 2));
            salesOrderSampleSaveAsDraftAndNew().option("disabled", disabled);
            clearInterval(intrvlSOSample);
        }
    };

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Order Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vSalesOrderSamples_salesOrderSampleSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        salesOrderSampleSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Order Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vSalesOrderSamples_salesOrderSampleSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(salesOrderSampleSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vSalesOrderSamples_salesOrderSampleSummaryDataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                salesOrderSampleSave().option("disabled", true);
                salesOrderSamplePost().option("disabled", true);
                salesOrderSampleDiscard().option("disabled", true);
                salesOrderSampleVoid().option("disabled", true);
                salesOrderSampleSaveAsDraftAndNew().option("disabled", true);

                intrvlSOSample = setInterval(intrvlHandlerSOSample, 500);
                info.data.QtyOrder = 0;
                info.data.QtyOrderConv = '0/0/0';
                info.data.AddDiscountStrataPercentage = 0;
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if ((e.row != undefined) && (e.row.rowIndex != undefined))
                        e.component.editRowIndex = e.row.rowIndex;

                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAvailableByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vSalesOrderSamples_productIDLookup', ea.element, 1); // Good
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 1); // Good
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                            calcProductPriceAndDiscount(e);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'PriceDate') {
                        e.editorElement.dxDateBox({
                            showClearButton: true,
                            placeholder: 'Transaction Date',
                            value: e.value,
                            onValueChanged: function (ea) {
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'QtyOrderConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                salesOrderSampleSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    } else if (e.dataField == 'AddDiscountStrataPercentage') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            // Added by Andhika 2016.03.17 Fixing Additional Discount Decimal Input ------------------
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 190 || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            //----------------------------------------------------------------------------------------
                            onValueChanged: function (ea) {
                                if ((ea.value == null) || (ea.value == ''))
                                    ea.value = 0;

                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);

                                calcProductPriceAndDiscount(e);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderSampleSummaryForm(), info.component);
                salesOrderSampleSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                CommonUtility.updateSalesOrderSummaryForm(salesOrderSampleSummaryForm(), info.component);
                salesOrderSampleSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );

                CommonUtility.updateSalesOrderSummaryForm(salesOrderSampleSummaryForm(), info.component);
            },
            onEditingStart: function (info) {
                salesOrderSampleSave().option('disabled', true);
                salesOrderSamplePost().option('disabled', true);
                salesOrderSampleDiscard().option('disabled', true);
                salesOrderSampleVoid().option('disabled', true);
                salesOrderSampleSaveAsDraftAndNew().option('disabled', true);
                intrvlSOSample = setInterval(intrvlHandlerSOSample, 500);
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyOrderConv) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyOrderConv,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyOrder = conversion.qtyTransaction;
                }

                info.newData.SubtotalWeight = DXUtility.getValue(info.oldData, 'SubtotalWeight');
                info.newData.SubtotalDimension = DXUtility.getValue(info.oldData, 'SubtotalDimension');
                info.newData.UnitGrossPrice = DXUtility.getValue(info.oldData, 'UnitGrossPrice');

                info.newData.RawSubtotalGrossPrice = DXUtility.getValue(info.oldData, 'RawSubtotalGrossPrice');
                info.newData.RawSubtotalPrice = DXUtility.getValue(info.oldData, 'RawSubtotalPrice');
                info.newData.RawDiscountStrata1Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata1Amount');
                info.newData.RawDiscountStrata2Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata2Amount');
                info.newData.RawDiscountStrata3Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata3Amount');
                info.newData.RawDiscountStrata4Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata4Amount');
                info.newData.RawDiscountStrata5Amount = DXUtility.getValue(info.oldData, 'RawDiscountStrata5Amount');
                info.newData.RawAddDiscountStrataAmount = DXUtility.getValue(info.oldData, 'RawAddDiscountStrataAmount');
                info.newData.RawSubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata1');
                info.newData.RawSubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata2');
                info.newData.RawSubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata3');
                info.newData.RawSubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata4');
                info.newData.RawSubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'RawSubtotalDiscountStrata5');
                info.newData.RawSubtotalGross = DXUtility.getValue(info.oldData, 'RawSubtotalGross');
                info.newData.RawSubtotal = DXUtility.getValue(info.oldData, 'RawSubtotal');

                info.newData.SubtotalDiscountStrata1 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata1');
                info.newData.SubtotalDiscountStrata2 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata2');
                info.newData.SubtotalDiscountStrata3 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata3');
                info.newData.SubtotalDiscountStrata4 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata4');
                info.newData.SubtotalDiscountStrata5 = DXUtility.getValue(info.oldData, 'SubtotalDiscountStrata5');
                info.newData.TaxPercentage = DXUtility.getValue(info.oldData, 'TaxPercentage');
                info.newData.SubtotalGrossPrice = DXUtility.getValue(info.oldData, 'SubtotalGrossPrice');
                info.newData.SubtotalPrice = DXUtility.getValue(info.oldData, 'SubtotalPrice');

                info.newData.UnitPrice = info.component.cellValue(info.component.editRowIndex, 'UnitPrice');

                //info.newData.DiscountStrata1Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Percentage');
                //info.newData.DiscountStrata1Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata1Amount');

                //info.newData.DiscountStrata2Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Percentage');
                //info.newData.DiscountStrata2Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata2Amount');

                //info.newData.DiscountStrata3Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Percentage');
                //info.newData.DiscountStrata3Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata3Amount');

                //info.newData.DiscountStrata4Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Percentage');
                //info.newData.DiscountStrata4Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata4Amount');

                //info.newData.DiscountStrata5Percentage = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Percentage');
                //info.newData.DiscountStrata5Amount = info.component.cellValue(info.component.editRowIndex, 'DiscountStrata5Amount');

                info.newData.DiscountStrata1Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata1Percentage');
                info.newData.DiscountStrata1Amount = DXUtility.getValue(info.oldData, 'DiscountStrata1Amount');

                info.newData.DiscountStrata2Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata2Percentage');
                info.newData.DiscountStrata2Amount = DXUtility.getValue(info.oldData, 'DiscountStrata2Amount');

                info.newData.DiscountStrata3Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata3Percentage');
                info.newData.DiscountStrata3Amount = DXUtility.getValue(info.oldData, 'DiscountStrata3Amount');

                info.newData.DiscountStrata4Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata4Percentage');
                info.newData.DiscountStrata4Amount = DXUtility.getValue(info.oldData, 'DiscountStrata4Amount');

                info.newData.DiscountStrata5Percentage = DXUtility.getValue(info.oldData, 'DiscountStrata5Percentage');
                info.newData.DiscountStrata5Amount = DXUtility.getValue(info.oldData, 'DiscountStrata5Amount');


                info.newData.AddDiscountStrataAmount = info.component.cellValue(info.component.editRowIndex, 'AddDiscountStrataAmount');

                info.newData.SubtotalGross = info.component.cellValue(info.component.editRowIndex, 'SubtotalGross');
                info.newData.SubtotalTax = info.component.cellValue(info.component.editRowIndex, 'SubtotalTax');
                info.newData.Subtotal = info.component.cellValue(info.component.editRowIndex, 'Subtotal');

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
                if (qtyOnHand == undefined)
                    qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

                var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
                if (qtyOrder == undefined)
                    qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');
                
                if (qtyOrder <= 0) {
                    e.errorText = 'Order Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && (qtyOrder > qtyOnHand)) {
                    e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product', // width: '250px',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(salesOrderSampleSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (salesOrderSampleSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 1' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 2' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 3' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 4' + '</td>';
                        //tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Disc 5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="1">' + 'Disc 1-5' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colSpan="2">' + 'Additional Disc' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'PriceDate', caption: 'Price Date', width: '140px',
                dataType: 'date'
            }, {
                dataField: 'UnitPrice', caption: 'Unit Price', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
            }, {
                dataField: 'QtyOrderConv', caption: 'Qty (L/M/S)', width: '100px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOrderConv', 1)); // Good
                }
            },
            //{
            //    dataField: 'DiscountStrata1Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata1Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata2Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata3Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata4Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Percentage', caption: '%', width: '40px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //}, {
            //    dataField: 'DiscountStrata5Amount', caption: 'Amount', width: '80px', allowEditing: false,
            //    dataType: 'number', format: 'fixedPoint', precision: 2
            //},
            {
                dataField: 'DiscountStrataDefaultAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2,
                calculateCellValue: function (data) {
                    var discountStrata1Amount = DXUtility.getValue(data, 'DiscountStrata1Amount');
                    var discountStrata2Amount = DXUtility.getValue(data, 'DiscountStrata2Amount');
                    var discountStrata3Amount = DXUtility.getValue(data, 'DiscountStrata3Amount');
                    var discountStrata4Amount = DXUtility.getValue(data, 'DiscountStrata4Amount');
                    var discountStrata5Amount = DXUtility.getValue(data, 'DiscountStrata5Amount');

                    if (isNaN(discountStrata1Amount)) discountStrata1Amount = 0;
                    if (isNaN(discountStrata2Amount)) discountStrata2Amount = 0;
                    if (isNaN(discountStrata3Amount)) discountStrata3Amount = 0;
                    if (isNaN(discountStrata4Amount)) discountStrata4Amount = 0;
                    if (isNaN(discountStrata5Amount)) discountStrata5Amount = 0;

                    return discountStrata1Amount + discountStrata2Amount + discountStrata3Amount +
                        discountStrata4Amount + discountStrata5Amount;
                }
            }, {
                dataField: 'AddDiscountStrataPercentage', caption: '%', width: '40px',
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'AddDiscountStrataAmount', caption: 'Amount', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalGross', caption: 'DPP', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'SubtotalTax', caption: 'VAT', width: '80px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }, {
                dataField: 'Subtotal', caption: 'Subtotal', width: '100px', allowEditing: false,
                dataType: 'number', format: 'fixedPoint', precision: 2
            }]
        }));

        content.append($('<div id="vSalesOrderSamples_salesOrderSampleSummaryForm" style="margin-top: 9px;">').dxForm({
            deferRendering: false,
            colCount: 4,
            showColonAfterLabel: false,
            labelLocation: 'left',
            alignItemLabels: true,
            items: [{
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'TotalGross',
                label: { text: 'Total DPP' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 2
            },
            //{
            //    dataField: 'DocumentStatusReason',
            //    label: { location: 'top', text: 'Reason for changing Price Date/Additional Disc' },
            //    colSpan: 2,
            //    editorOptions: {
            //        maxLength: 200,
            //        onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            //    }
            //},
            {
                itemType: 'empty',
                colSpan: 1
            }, {
                dataField: 'TotalTax',
                label: { text: 'Total VAT' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }, {
                itemType: 'empty',
                colSpan: 3
            }, {
                dataField: 'Total',
                label: { text: 'Total' },
                colSpan: 1,
                cssClass: 'salesOrderSummaryForm-item-label salesOrderSummaryForm-item-textInput',
                editorOptions: {
                    readOnly: true
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrintDO = $('<div id="vSalesOrderSamples_salesOrderSamplePrintDO" style="margin-right: 32px;">').dxButton({
            text: 'Print DO', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrintDO(this); }
        });

        var commandPost = $('<div id="vSalesOrderSamples_salesOrderSamplePost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vSalesOrderSamples_salesOrderSampleDiscard">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandVoid = $('<div id="vSalesOrderSamples_salesOrderSampleVoid" style="margin-right: 16px;">').dxButton({
            text: 'Void', icon: 'icons8-delete-red',
            onClick: function () { commonPopupEdit.events.performVoid(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vSalesOrderSamples_salesOrderSampleSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrintDO);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandVoid);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrintDO = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printDOEditing(data.DODocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performVoid = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Void this transaction?', 'Void Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(4, 3); // Void and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var preDODocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        preDODocumentCode = previewDODocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                    form.getEditor('DODocumentCode').option('value', preDODocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order Sample',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxLookup',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: [
                    'Code',
                    'Name',
                    'Address1',
                    'Address2',
                    'Address3'
                ],
                searchPlaceholder: 'Customer/Address',
                searchEnabled: false,
                popupWidth: '1082px',
                showPopupTitle: false,
                fieldEditEnabled: true,
                onOpened: function (e) { },
                onClosed: function (e) { },
                onContentReady: function (e) {
                    var form = commonPopupEdit.form();
                    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                    CommonUtility.createCustomerLookupHeader('vSalesOrderSamples_customerIDLookup', e.element,
                        getValueFromSystemParameter('Customer.Category1'),
                        user.SiteID(), form);
                },
                itemTemplate: function (data, index, element) {
                    return CommonUtility.createCustomerLookupItem(data, element);
                },
                onValueChanged: function (e) {
                    if (e.value) {
                        var item = e.selectedItem;
                        if (item) {
                            var data = commonPopupEdit.popupEditData();
                            var form = commonPopupEdit.form();
                            var salesmanID = null;
                            var warehouseID = null;
                            var termOfPaymentID = null;

                            dataSource_vSelectedProductPrices = undefined;
                            dataSource_vSelectedDiscountGroup = undefined;

                            data.PriceGroupID(undefined);
                            data.DiscountGroupID(undefined);
                            if (item) {
                                salesmanID = item.SalesmanID();
                                warehouseID = item.WarehouseID();
                                termOfPaymentID = item.TermOfPaymentID();
                                dataSource_vSelectedProductPrices = Dismoyo_Ciptoning_Client.LocalStore.vProductPrices.dataByFilter(
                                    ['PriceGroupID', '=', item.PriceGroupID()]);

                                dataSource_vSelectedDiscountGroup =
                                    Dismoyo_Ciptoning_Client.LocalStore.vDiscountGroups.expandedDataByKey(item.DiscountGroupID());

                                data.PriceGroupID(item.PriceGroupID());
                                data.DiscountGroupID(item.DiscountGroupID());
                            }

                            e.component.option('value', e.value);
                            form.getEditor('SalesmanID').option('value', salesmanID);
                            form.getEditor('WarehouseID').option('value', warehouseID);

                            updateTermOfPaymentEditor(form, termOfPaymentID);
                        }
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        salesOrderSampleSummaryDataGrid().cancelEditData();
                        data.ChildSummaries([]);
                        salesOrderSampleSummaryDataGrid().option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    } else
                        salesOrderSampleSummaryDataGrid().endCustomLoading();

                    var form = commonPopupEdit.form();
                    var warehouseID = null;

                    if (e.selectedItem) {
                        warehouseID = e.selectedItem.WarehouseID();
                    }

                    form.getEditor('WarehouseID').option('value', warehouseID);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = salesOrderSampleSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'TermOfPaymentID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Term of Payment' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }, {
        itemType: 'group',
        caption: 'Purchase Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'PODocumentCode',
            label: { text: 'Document Number' },
            //validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'POTransactionDate',
            label: { text: 'Transaction Date' },
            //validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    //form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }]
    }, {
        itemType: 'group',
        caption: 'Delivery Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOShipmentDate',
            label: { text: 'Shipment Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOReceivedDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'DOPrintedCount',
            label: { text: 'Printed Count' },
            colSpan: 1,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOLastPrintedDate',
            label: { text: 'Last Printed Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOReceivedDate',
            label: { text: 'Received Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyOrder = 0;
        info.data.QtyOrderConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                    var productLotColumns = getProductLotColumns(itemStatusID);

                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vSalesOrderSamples_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyOrderConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    // Added by Andhika 2016.03.17 Fixing Issue Negatif Value -----
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    //-----------------------------------------------------------
                    onValueChanged: function (ea) {
                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

        var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
        if (qtyOrder == undefined)
            qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

        if (qtyOrder <= 0) {
            e.errorText = 'Order Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyOrder > qtyOnHand)) {
            e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyOrderConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyOrderConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyOrderConv',
                'QtyOrder');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyOrderConv', caption: 'Order Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyOrder',
            label: { text: 'Order Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOrderConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_order_sample_32px.png',

        dataSource_vSalesOrderSampleDetails: dataSource_vSalesOrderSampleDetails,
        dataSource_vSalesOrderSampleSummary: dataSource_vSalesOrderSampleSummary,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        salesOrderSampleSummaryDataGrid: salesOrderSampleSummaryDataGrid,
        salesOrderSamplePost: salesOrderSamplePost,
        salesOrderSampleDiscard: salesOrderSampleDiscard,
        salesOrderSampleVoid: salesOrderSampleVoid,
        salesOrderSampleSaveAsDraftAndNew: salesOrderSampleSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vSalesOrderSwaps = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevSalesOrderSwapsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSalesOrderSwaps');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSalesOrderSwaps.off('modified', handlevSalesOrderSwapsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSwaps,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSwapViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSalesOrderSwaps.on('modified', handlevSalesOrderSwapsModification);



    var dataSource_vSalesOrderSwapSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSwapSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel(item); }
    });

    var dataSource_vSalesOrderSwapDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSalesOrderSwapDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesOrderSwapDetailsViewModel(item); }
    });


    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-03-(Auto Generated)';
    }

    function previewDODocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-10-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var customerDataSource = new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vCustomers,
            select: [
                'ID',
                'Customer',
                'Address',
                'Category1',
                'SalesmanID',
                'Salesman',
                'WarehouseID',
                'TermOfPaymentID',
                'PriceGroupID',
                'DiscountGroupID',
                'SiteID'
            ],
            filter: [
                ['IsDeleted', '=', false], 'and',
                ['StatusID', '=', 1], 'and',
                ['SiteID', '=', siteID]
            ],
            map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); }
        });

        var salesmanDataSource = DataUtility.GetLookupSalesmanDataSource([
            ['IsDeleted', '=', false], 'and',
            ['StatusID', '=', 1], 'and',
            ['SiteID', '=', siteID]
        ]);

        form.getEditor('CustomerID').option('value', null);
        form.getEditor('CustomerID').option('dataSource', customerDataSource);
        customerDataSource.load();

        form.getEditor('SalesmanID').option('value', null);
        form.getEditor('SalesmanID').option('dataSource', salesmanDataSource);
        salesmanDataSource.load();
    }


    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }

    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            salesOrderSwapSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            salesOrderSwapSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummaryArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            salesOrderSwapSummaryDataGrid().option('dataSource').store(),
            'vSalesOrderSwapSummaryViewModel',
            summary
        );
    }

    function createSummaryDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vSalesOrderSwapSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyOrderConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyOrderConvColumn]()));
        commands.append('&nbsp;');

        if (isLotNumberEntryRequired) {
            var column = qtyOrderConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyOrderConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = salesOrderSwapSummaryDataGrid().option('editing');
        var selection = salesOrderSwapSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        salesOrderSwapSummaryDataGrid().option('editing', option);
        salesOrderSwapSummaryDataGrid().option('selection', selection);
        salesOrderSwapSummaryNewRow().option('disabled', !allowed);
        salesOrderSwapSummaryDeleteRows().option('disabled', true);
        salesOrderSwapSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vSalesOrderSwaps.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vSalesOrderSwapViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSalesOrderSwapViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Sales Order Swap');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var doDocumentCode = data.DODocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            if (!user.IsHeadOffice()) {
                data.TerritoryID(user.TerritoryID());
                data.RegionID(user.RegionID());
                data.AreaID(user.AreaID());
                data.SiteID(user.SiteID());
                data.SiteCode(user.SiteCode());
                data.CompanyID(user.CompanyID());
                data.Company(user.Company());
            }

            documentCode = previewDocumentCode(data.SiteCode());
            doDocumentCode = previewDODocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if (data.DocumentStatusID() == 1 && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];
                    form.getEditor('SalesmanID').option('value', data.SalesmanID());

                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) ||
                (data.DocumentStatusID() == 4)) // Posted, Discarded or Voided
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        salesOrderSwapPrintDO().option('disabled', newData);
        salesOrderSwapPost().option('disabled', newData || disabled);
        salesOrderSwapDiscard().option('disabled', newData || disabled);
        salesOrderSwapVoid().option('disabled', (data.DocumentStatusID() != 2));
        salesOrderSwapSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('CustomerID').option('value', data.CustomerID());
        form.getEditor('SalesmanID').option('value', data.SalesmanID());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());

        var fileUploader = salesOrderSwapEditDataAttachmentFile();
        CommonUtility.createEditDataAttachmentFileDownloader('vSalesOrderSwaps', fileUploader,
            'SalesOrderSwaps', data.AttachmentFile());
        fileUploader.option('value', null);

        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        form.getEditor('DODocumentCode').option('value', doDocumentCode);
        form.getEditor('DOShipmentDate').option('value', data.DOShipmentDate());
        form.getEditor('DOReceivedDate').option('value', data.DOReceivedDate());
        form.getEditor('DOPrintedCount').option('value', data.DOPrintedCount());
        form.getEditor('DOLastPrintedDate').option('value', data.DOLastPrintedDate());

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('CustomerID').option('readOnly', disabled);
        form.getEditor('SalesmanID').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);
                
        form.getEditor('DOShipmentDate').option('readOnly', disabled);
        form.getEditor('DOReceivedDate').option('readOnly', disabled);

        var fileUploaderInput = $('.dx-fileuploader-input-wrapper');
        if (disabled)
            fileUploaderInput.hide();
        else
            fileUploaderInput.show();

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
            form.getEditor('DOShipmentDate').option('value', today);
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = salesOrderSwapSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = salesOrderSwapSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Order Details.';
                isValid = false;
            }
        }

        var totalWeight = 0;
        var totalDimension = 0;

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyOrder = 0;

                totalWeight += summary.SubtotalWeight();
                totalDimension += summary.SubtotalDimension();
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];

                    sumQtyOrder += details.QtyOrder();
                }

                if (summary.QtyOrder() != sumQtyOrder) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Order Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        if (isValid && ($('.dx-fileuploader-button.dx-fileuploader-upload-button.dx-widget.dx-button-has-icon.dx-button.dx-button-normal').length > 0)) {
            errorMsg = 'You have selected an attachment file. Please upload or cancel the attachment file.';
            isValid = false;
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.CustomerID(form.getEditor('CustomerID').option('value'));
            data.SalesmanID(form.getEditor('SalesmanID').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            var fileUploader = salesOrderSwapEditDataAttachmentFile();
            data.AttachmentFile((fileUploader.option('values').length > 0) ? fileUploader.fileName : null);

            data.DOShipmentDate(form.getEditor('DOShipmentDate').option('value'));
            data.DOReceivedDate(form.getEditor('DOReceivedDate').option('value'));
            data.DOPrintedCount(form.getEditor('DOPrintedCount').option('value'));
            data.DOLastPrintedDate(form.getEditor('DOLastPrintedDate').option('value'));

            data.TotalWeight(totalWeight);
            data.TotalDimension(totalDimension);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            dataJS.DOShipmentDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOShipmentDate);
            dataJS.DOReceivedDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOReceivedDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyOrder * -1;
                }

                summary.Qty = summary.QtyOrder * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printDOEditing(doDocumentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Delivery Order');
        commonPopupIFrame.popupEditOptions.visible(true);

        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.ExtDeliveryOrderReport.url([['DocumentID', '=', doDocumentID]]));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = salesOrderSwapSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length == 0) {
                            items = [new Dismoyo_Ciptoning_Client.vSalesOrderSwapDetailsViewModel(details)];
                            dataSourceItems[i].ChildDetails().push(items[0]);
                        }

                        var item = items[0];
                        item.QtyConvL(DXUtility.getValue(dataSourceItems[i], 'QtyConvL'));
                        item.QtyConvM(DXUtility.getValue(dataSourceItems[i], 'QtyConvM'));
                        item.QtyConvS(DXUtility.getValue(dataSourceItems[i], 'QtyConvS'));
                        item.QtyOrder(DXUtility.getValue(dataSourceItems[i], 'QtyOrder'));
                        item.QtyOrderConv(DXUtility.getValue(dataSourceItems[i], 'QtyOrderConv'));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyOrderColumn = 'QtyOrder' + itemStatusName;
        var qtyOrderConvColumn = 'QtyOrderConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyOrderColumn: qtyOrderColumn,
            qtyOrderConvColumn: qtyOrderConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3) ||
            (editData.DocumentStatusID() == 4))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyOrderConv').option('value', data.QtyOrderConv());

        var conversion = CommonUtility.getConversion(
            data.QtyOrderConv(),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyOrder').option('value', conversion.qtyTransaction);

        data = validateSummaryArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vSalesOrderSwapDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyOrder').option('value'),
            'Order',
            'vSalesOrderSwapDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            salesOrderSwapSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            var salesmanID = form.getEditor('SalesmanID').option('value');
            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vSalesmanProducts,
                select: [
                    'ProductID',
                    'ProductCode',
                    'Product',
                    'ProductUOMLID',
                    'ProductUOMMID',
                    'ProductUOMSID',
                    'ProductConversionL',
                    'ProductConversionM',
                    'ProductConversionS'
                ],
                filter: [
                    ['SalesmanID', '=', salesmanID], 'and',
                    ['ProductName', 'notcontains', 'SAMPLE']
                ],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(item); }
            }).load()
                .done(function (result) {
                    if (result.length > 0) {
                        var productDataSource = result;

                        var warehouseID = form.getEditor('WarehouseID').option('value');
                        var filters = [];
                        var groupFilterExpr = [];

                        for (var i = 0; i < result.length; i++)
                            DXUtility.addFilterExpression(groupFilterExpr, 'ProductID', '=', result[i].ProductID(), 'or');

                        DXUtility.addGroupFilterExpression(filters, groupFilterExpr, 'and');
                        DXUtility.addFilterExpression(filters, 'WarehouseID', '=', warehouseID, 'and');
                        DXUtility.addFilterExpression(filters, 'QtyOnHandGood', '>', 0, 'and');

                        var dataSource = new DevExpress.data.DataSource({
                            store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                            select: [
                                'ProductID',
                                'ProductLotID',
                                'ProductLotCode',
                                'ProductLot',
                                'ProductLotExpiredDate',
                                'QtyOnHandGood'
                            ],
                            filter: filters,
                            sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                            paginate: false,
                            map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                        });

                        dataSource.load()
                            .done(function (result2) {
                                var product = null;
                                var stockOnHandAvailable = [];
                                var stockOnHandAvailableByProduct = [];
                                for (var i = 0; i < result2.length; i++) {
                                    stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                                    var j = stockOnHandAvailableByProduct.length - 1;
                                    var productID = result2[i].ProductID();
                                    if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                        stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));
                                        j++;
                                        product = $.grep(result, function (e) { return (e.ProductID() == productID); });
                                    } else {
                                        stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                            result2[i].QtyOnHandGood());
                                        stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                            result2[i].QtyOnHandHold());
                                        stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                            result2[i].QtyOnHandBad());
                                    }

                                    if (product[0]) {
                                        stockOnHandAvailable[i].ProductCode(product[0].ProductCode());
                                        stockOnHandAvailable[i].Product(product[0].Product());
                                        stockOnHandAvailable[i].ProductUOMLID(product[0].ProductUOMLID());
                                        stockOnHandAvailable[i].ProductUOMMID(product[0].ProductUOMMID());
                                        stockOnHandAvailable[i].ProductUOMSID(product[0].ProductUOMSID());
                                        stockOnHandAvailable[i].ProductConversionL(product[0].ProductConversionL());
                                        stockOnHandAvailable[i].ProductConversionM(product[0].ProductConversionM());
                                        stockOnHandAvailable[i].ProductConversionS(product[0].ProductConversionS());

                                        stockOnHandAvailableByProduct[j].ProductCode(product[0].ProductCode());
                                        stockOnHandAvailableByProduct[j].Product(product[0].Product());
                                        stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].ProductUOMLID());
                                        stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].ProductUOMMID());
                                        stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].ProductUOMSID());
                                        stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ProductConversionL());
                                        stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ProductConversionM());
                                        stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ProductConversionS());
                                    }
                                }

                                dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                                dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                                if (dataSource_vStockOnHandAvailable.length == 0)
                                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                        'Product lot stock with item status Good for the selected warehouse is empty.'),
                                        'New Order Details Failed');
                                else
                                    productLotLoaded();

                                hideLoadingPanel();
                            })
                            .fail(function (error) {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                                hideLoadingPanel();
                            });
                    } else {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('The selected Salesman does not have any reference products.'),
                            'New Order Details Failed');
                        hideLoadingPanel();
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Salesman', 'Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order Swap',
        colCount: 3,
        colSpan: 3,
        items: [{
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSalesmanDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Salesman',
                        ['Warehouse'],
                        []);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    var siteID = null;

                    if (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
                        siteID = collapsibleFilter.form().getEditor('SiteID').option('value');
                    } else {
                        siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
                    }

                    var childEditor = collapsibleFilter.form().getEditor('SalesmanID');
                    var childSelectedItem = childEditor.option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['WarehouseID']() != e.value))
                        childEditor.option('value', null);

                    if (siteID == undefined) {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            ['WarehouseID', '=', e.value] : null));
                    } else {
                        childEditor.option('dataSource',
                        DataUtility['GetLookupSalesmanDataSource']((e.value) ?
                            [['WarehouseID', '=', e.value], "and",
                            ['SiteID', '=', siteID]] : ['SiteID', '=', siteID]));
                    }
                }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vCustomers,
                    select: ['ID', 'Customer', 'SiteID'],
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerViewModel(item); },
                    filter: (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                }),
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // SalesmanID
        value = form.getEditor('SalesmanID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SalesmanID', '=', value, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // CustomerID
        value = form.getEditor('CustomerID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CustomerID', '=', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderSwaps.AddNewSalesOrderSwap');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('SalesOrderSwaps.EditSalesOrderSwap');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSalesOrderSwaps_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('SalesOrderSwaps.EditSalesOrderSwap');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Customer', caption: 'Customer', width: '200px'
    }, {
        dataField: 'Salesman', caption: 'Salesman', width: '200px'
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px',
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var salesOrderSwapEditDataAttachmentFile = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_editDataAttachmentFile', 'dxFileUploader'); }

    var salesOrderSwapSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapSummaryDataGrid', 'dxDataGrid'); }

    var salesOrderSwapPrintDO = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapPrintDO', 'dxButton'); }
    var salesOrderSwapPost = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapPost', 'dxButton'); }
    var salesOrderSwapDiscard = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapDiscard', 'dxButton'); }
    var salesOrderSwapVoid = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapVoid', 'dxButton'); }
    var salesOrderSwapSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapSaveAsDraftAndNew', 'dxButton'); }
    var salesOrderSwapSave = function () { return DXUtility.getDXInstance(null, '#commonPopupEdit_ok', 'dxButton'); }

    var salesOrderSwapSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapSummaryNewRow', 'dxButton'); }
    var salesOrderSwapSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vSalesOrderSwaps_salesOrderSwapSummaryDeleteRows', 'dxButton'); }
    var intrvlSOSwap;

    var isEditorEnabledSOSwap = function () {
        var dxCommandEdit = $(".dx-command-edit", "[id$=SummaryDataGrid]");
        for (var i = 0; i < dxCommandEdit.length; i++) {
            if ($(dxCommandEdit[i]).text().trim().indexOf("Save") >= 0) {
                return true;
            }
        }
        return false;
    }

    var intrvlHandlerSOSwap = function () {
        var disabled = false;
        var newData = true;
        var data = commonPopupEdit.popupEditData();
        if (data.DocumentStatusID()) {
            newData = false;
        }
        if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3) || (data.DocumentStatusID() == 4)) {
            disabled = true;
        }
        if (!isEditorEnabledSOSwap()) {
            if (salesOrderSwapSave() && salesOrderSwapPost() && salesOrderSwapVoid() & salesOrderSwapSaveAsDraftAndNew())
                //asdsadsad
                salesOrderSwapSave().option("disabled", disabled);
            salesOrderSwapSave().option("disabled", disabled);
            salesOrderSwapPost().option("disabled", newData || disabled);
            salesOrderSwapDiscard().option("disabled", newData || disabled);
            salesOrderSwapVoid().option("disabled", (data.DocumentStatusID() != 2));
            salesOrderSwapSaveAsDraftAndNew().option("disabled", disabled);
            clearInterval(intrvlSOSwap);
        }
    };

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Order Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vSalesOrderSwaps_salesOrderSwapSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        salesOrderSwapSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Order Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vSalesOrderSwaps_salesOrderSwapSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(salesOrderSwapSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vSalesOrderSwaps_salesOrderSwapSummaryDataGrid">').dxDataGrid({
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                salesOrderSwapSave().option("disabled", true);
                salesOrderSwapPost().option("disabled", true);
                salesOrderSwapDiscard().option("disabled", true);
                salesOrderSwapVoid().option("disabled", true);
                salesOrderSwapSaveAsDraftAndNew().option("disabled", true);

                intrvlSOSwap = setInterval(intrvlHandlerSOSwap, 500);
                info.data.QtyOrder = 0;
                info.data.QtyOrderConv = '0/0/0';
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAvailableByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vSalesOrderSwaps_productIDLookup', ea.element, 1); // Good
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 1); // Good
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            DXUtility.setValue(e.row.data, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            DXUtility.setValue(e.row.data, 'ProductWeight', 0);
                                            DXUtility.setValue(e.row.data, 'ProductDimensionL', 0);
                                            DXUtility.setValue(e.row.data, 'ProductDimensionW', 0);
                                            DXUtility.setValue(e.row.data, 'ProductDimensionH', 0);

                                            CommonUtility.calcConversion(e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                                e.row.data);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'QtyOrderConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                salesOrderSwapSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                var conversion = CommonUtility.calcConversion(ea.value, e.row.data);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                salesOrderSwapSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                salesOrderSwapSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );
            },
            onEditingStart: function (info) {
                salesOrderSwapSave().option("disabled", true);
                salesOrderSwapPost().option("disabled", true);
                salesOrderSwapDiscard().option("disabled", true);
                salesOrderSwapVoid().option("disabled", true);
                salesOrderSwapSaveAsDraftAndNew().option("disabled", true);
                intrvlSOSwap = setInterval(intrvlHandlerSOSwap, 500);
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyOrderConv) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyOrderConv,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyOrder = conversion.qtyTransaction;
                }

                info.newData.SubtotalWeight = DXUtility.getValue(info.oldData, 'SubtotalWeight');
                info.newData.SubtotalDimension = DXUtility.getValue(info.oldData, 'SubtotalDimension');

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
                if (qtyOnHand == undefined)
                    qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

                var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
                if (qtyOrder == undefined)
                    qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

                if (qtyOrder <= 0) {
                    e.errorText = 'Order Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && (qtyOrder > qtyOnHand)) {
                    e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(salesOrderSwapSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (salesOrderSwapSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '150px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'QtyOrderConv', caption: 'Order Qty (L/M/S)', width: '150px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOrderConv', 1)); // Good
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrintDO = $('<div id="vSalesOrderSwaps_salesOrderSwapPrintDO" style="margin-right: 32px;">').dxButton({
            text: 'Print DO', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrintDO(this); }
        });

        var commandPost = $('<div id="vSalesOrderSwaps_salesOrderSwapPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vSalesOrderSwaps_salesOrderSwapDiscard">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandVoid = $('<div id="vSalesOrderSwaps_salesOrderSwapVoid" style="margin-right: 16px;">').dxButton({
            text: 'Void', icon: 'icons8-delete-red',
            onClick: function () { commonPopupEdit.events.performVoid(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vSalesOrderSwaps_salesOrderSwapSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrintDO);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandVoid);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrintDO = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printDOEditing(data.DODocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performVoid = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Void this transaction?', 'Void Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(4, 3); // Void and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.formOptions.customizeItem = function (item) {
        if (item.dataField == 'AttachmentFile') {
            item.template = function (data, itemElement) {
                itemElement.append(CommonUtility.createEditDataAttachmentFileUploader('vSalesOrderSwaps', 'SalesOrderSwaps'));
            }
        }
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var preDODocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        preDODocumentCode = previewDODocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                    form.getEditor('DODocumentCode').option('value', preDODocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Sales Order Swap',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'CustomerID',
            label: { text: 'Customer' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxLookup',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Customer',
                valueExpr: 'ID',
                searchExpr: [
                    'Code',
                    'Name',
                    'Address1',
                    'Address2',
                    'Address3'
                ],
                searchPlaceholder: 'Customer/Address',
                searchEnabled: false,
                popupWidth: '1082px',
                showPopupTitle: false,
                fieldEditEnabled: true,
                onOpened: function (e) { },
                onClosed: function (e) { },
                onContentReady: function (e) {
                    var form = commonPopupEdit.form();
                    var user = Dismoyo_Ciptoning_Client.app.CurrentUser;

                    CommonUtility.createCustomerLookupHeader('vSalesOrderSwaps_customerIDLookup', e.element,
                        getValueFromSystemParameter('Customer.Category1'),
                        user.SiteID(), form);
                },
                itemTemplate: function (data, index, element) {
                    return CommonUtility.createCustomerLookupItem(data, element);
                },
                onValueChanged: function (e) {
                    if (e.value) {
                        var item = e.selectedItem;
                        if (item) {
                            var data = commonPopupEdit.popupEditData();
                            var form = commonPopupEdit.form();
                            var salesmanID = null;
                            var warehouseID = null;

                            if (item) {
                                salesmanID = item.SalesmanID();
                                warehouseID = item.WarehouseID();
                            }

                            e.component.option('value', e.value);
                            form.getEditor('SalesmanID').option('value', salesmanID);
                            form.getEditor('WarehouseID').option('value', warehouseID);
                        }
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'SalesmanID',
            label: { text: 'Salesman' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Salesman',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        salesOrderSwapSummaryDataGrid().cancelEditData();
                        data.ChildSummaries([]);
                        salesOrderSwapSummaryDataGrid().option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }

                    var form = commonPopupEdit.form();
                    var warehouseID = null;

                    if (e.selectedItem) {
                        warehouseID = e.selectedItem.WarehouseID();
                    }

                    form.getEditor('WarehouseID').option('value', warehouseID);
                }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = salesOrderSwapSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AttachmentFile',
            label: { text: 'Attachment File' },
            colSpan: 2,
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }, {
        itemType: 'group',
        caption: 'Delivery Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOShipmentDate',
            label: { text: 'Shipment Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOReceivedDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'DOPrintedCount',
            label: { text: 'Printed Count' },
            colSpan: 1,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOLastPrintedDate',
            label: { text: 'Last Printed Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOReceivedDate',
            label: { text: 'Received Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyOrder = 0;
        info.data.QtyOrderConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                    var productLotColumns = getProductLotColumns(itemStatusID);

                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vSalesOrderSwaps_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyOrderConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyOrderConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    // Added by Andhika 2016.03.17 Fixing Issue Negatif Value -----
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    //-----------------------------------------------------------
                    onValueChanged: function (ea) {
                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyOrder', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vSalesOrderSwapDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyOrderConv',
            'QtyOrder'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

        var qtyOrder = DXUtility.getValue(e.newData, 'QtyOrder');
        if (qtyOrder == undefined)
            qtyOrder = DXUtility.getValue(e.oldData, 'QtyOrder');

        if (qtyOrder <= 0) {
            e.errorText = 'Order Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyOrder > qtyOnHand)) {
            e.errorText = 'Order Qty must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyOrderConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyOrderConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyOrderConv',
                'QtyOrder');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyOrderConv', caption: 'Order Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyOrder',
            label: { text: 'Order Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOrderConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/sales_order_swap_32px.png',

        dataSource_vSalesOrderSwapSummary: dataSource_vSalesOrderSwapSummary,
        dataSource_vSalesOrderSwapDetails: dataSource_vSalesOrderSwapDetails,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        salesOrderSwapSummaryDataGrid: salesOrderSwapSummaryDataGrid,
        salesOrderSwapPost: salesOrderSwapPost,
        salesOrderSwapDiscard: salesOrderSwapDiscard,
        salesOrderSwapVoid: salesOrderSwapVoid,
        salesOrderSwapSaveAsDraftAndNew: salesOrderSwapSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vSites = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;

    function handlevSitesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSites');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSites.off('modified', handlevSitesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSites,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSiteViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSites.on('modified', handlevSitesModification);



    function createSiteProductArrayDataSource(productBrands) {
        var siteProducts = ko.toJS(productBrands);
        for (var i = 0; i < siteProducts.length; i++) {
            var item = siteProducts[i];
            item.key = item.ID;
            item.text = item.Brand;
            item.items = item.ChildProducts;
            for (var j = 0; j < item.items.length; j++) {
                var subItem = item.items[j];
                subItem.key = item.ID + '_' + subItem.ID;
                subItem.text = subItem.Product;
            }
        }

        return siteProducts;
    }

    function createSOWarehouseArrayDataSource(warehouses) {
        var soWarehouses = ko.toJS(warehouses);
        for (var i = 0; i < soWarehouses.length; i++) {
            var item = soWarehouses[i];
            item.key = item.ID;
            item.text = item.Warehouse;
            item.selected = item.IsSOAllowed;
        }

        return soWarehouses;
    }

    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }


    function openSelectedEditing(id, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vSites.byKey(id, { expand: ['ChildProducts', 'ChildWarehouses'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vSiteViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vSiteViewModel();
            data.StatusID(1);
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Site');
        commonPopupEdit.popupEditOptions.editingKey = data.ID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        var soWarehouses = [];
        var siteProducts = [];

        if (newData) {
            data.StatusID(1);

            data.IsLotNumberEntryRequired(false);
        } else {
            soWarehouses = createSOWarehouseArrayDataSource(data.ChildWarehouses());

            for (var i = 0; i < data.ChildProducts().length; i++) {
                var item = data.ChildProducts()[i];
                item.key = item.ProductBrandID() + '_' + item.ProductID();
                siteProducts.push(item);
            }
        }

        // Set editor values
        form.getEditor('TerritoryID').option('value', data.TerritoryID());
        form.getEditor('RegionID').option('value', data.RegionID());
        form.getEditor('AreaID').option('value', data.AreaID());
        form.getEditor('CompanyID').option('value', data.CompanyID());
        form.getEditor('SAPCode').option('value', data.SAPCode());
        form.getEditor('Code').option('value', data.Code());
        form.getEditor('Name').option('value', data.Name());
        form.getEditor('DistributionTypeID').option('value', data.DistributionTypeID());
        
        form.getEditor('Address1').option('value', data.Address1());
        form.getEditor('Address2').option('value', data.Address2());
        form.getEditor('Address3').option('value', data.Address3());
        form.getEditor('City').option('value', data.City());
        form.getEditor('StateProvince').option('value', data.StateProvince());
        form.getEditor('CountryID').option('value', data.CountryID());
        form.getEditor('ZipCode').option('value', data.ZipCode());
        form.getEditor('Phone1').option('value', data.Phone1());
        form.getEditor('Phone2').option('value', data.Phone2());
        form.getEditor('Fax').option('value', data.Fax());
        form.getEditor('Email').option('value', data.Email());
        form.getEditor('AdditionalInfo1').option('value', data.AdditionalInfo1());
        form.getEditor('AdditionalInfo2').option('value', data.AdditionalInfo2());
        form.getEditor('AdditionalInfo3').option('value', data.AdditionalInfo3());
        form.getEditor('AdditionalInfo4').option('value', data.AdditionalInfo4());
        form.getEditor('AdditionalInfo5').option('value', data.AdditionalInfo5());
        form.getEditor('AdditionalInfo6').option('value', data.AdditionalInfo6());
        form.getEditor('AdditionalInfo7').option('value', data.AdditionalInfo7());
        form.getEditor('AdditionalInfo8').option('value', data.AdditionalInfo8());
        form.getEditor('AdditionalInfo9').option('value', data.AdditionalInfo9());
        form.getEditor('AdditionalInfo10').option('value', data.AdditionalInfo10());
        
        form.getEditor('Code').option('readOnly', !newData);
        
        if (newData) {
            DXUtility.resetFormValidation(form);
        }

        form.getEditor('StatusID').option('value', data.StatusID());
        form.getEditor('IsLotNumberEntryRequired').option('value', data.IsLotNumberEntryRequired());

        soWarehouseTreeView().option('dataSource', soWarehouses);

        new DevExpress.data.DataSource({
            store: Dismoyo_Ciptoning_Client.DB.vProductBrands,
            select: [
                'ID',
                'Brand',
                'ChildProducts',
                'ChildProducts.ID',
                'ChildProducts.Product'
            ],
            expand: ['ChildProducts'],
            map: function (item) { return new Dismoyo_Ciptoning_Client.vProductBrandViewModel(item); }
        }).load()
            .done(function (result) {
                var siteProductDataSource = createSiteProductArrayDataSource(result);
                
                DXUtility.setSelectedTreeViewItems(siteProductDataSource, siteProducts);
                siteProductTreeView().option('dataSource', siteProductDataSource);
            });
    }

    function saveEditing() {
        showLoadingPanel();

        var isValid = commonPopupEdit.form().validate().isValid;
        
        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();
            var form = commonPopupEdit.form();

            data.TerritoryID(form.getEditor('TerritoryID').option('value'));
            data.RegionID(form.getEditor('RegionID').option('value'));
            data.AreaID(form.getEditor('AreaID').option('value'));
            data.CompanyID(form.getEditor('CompanyID').option('value'));
            data.SAPCode(form.getEditor('SAPCode').option('value'));
            data.Code(form.getEditor('Code').option('value'));
            data.Name(form.getEditor('Name').option('value'));
            data.DistributionTypeID(form.getEditor('DistributionTypeID').option('value'));
            data.StatusID(form.getEditor('StatusID').option('value'));
            data.Address1(form.getEditor('Address1').option('value'));
            data.Address2(form.getEditor('Address2').option('value'));
            data.Address3(form.getEditor('Address3').option('value'));
            data.City(form.getEditor('City').option('value'));
            data.StateProvince(form.getEditor('StateProvince').option('value'));
            data.CountryID(form.getEditor('CountryID').option('value'));
            data.ZipCode(form.getEditor('ZipCode').option('value'));
            data.Phone1(form.getEditor('Phone1').option('value'));
            data.Phone2(form.getEditor('Phone2').option('value'));
            data.Fax(form.getEditor('Fax').option('value'));
            data.Email(form.getEditor('Email').option('value'));
            data.IsLotNumberEntryRequired(form.getEditor('IsLotNumberEntryRequired').option('value'));
            data.AdditionalInfo1(form.getEditor('AdditionalInfo1').option('value'));
            data.AdditionalInfo2(form.getEditor('AdditionalInfo2').option('value'));
            data.AdditionalInfo3(form.getEditor('AdditionalInfo3').option('value'));
            data.AdditionalInfo4(form.getEditor('AdditionalInfo4').option('value'));
            data.AdditionalInfo5(form.getEditor('AdditionalInfo5').option('value'));
            data.AdditionalInfo6(form.getEditor('AdditionalInfo6').option('value'));
            data.AdditionalInfo7(form.getEditor('AdditionalInfo7').option('value'));
            data.AdditionalInfo8(form.getEditor('AdditionalInfo8').option('value'));
            data.AdditionalInfo9(form.getEditor('AdditionalInfo9').option('value'));
            data.AdditionalInfo10(form.getEditor('AdditionalInfo10').option('value'));

            var siteProducts = [];
            DXUtility.getSelectedTreeViewItems(siteProductTreeView().option('items'), siteProducts);
            var i = 0;
            while (i < siteProducts.length) {
                var item = siteProducts[i];
                if (!item.Product) {
                    siteProducts.splice(i, 1);
                    continue;
                }

                i++;
            }

            for (i = 0; i < siteProducts.length; i++) {
                var item = siteProducts[i];
                siteProducts[i] = new Dismoyo_Ciptoning_Client.vSiteProductViewModel({
                    SiteID: data.ID(),
                    ProductID: item.ID
                });
            }

            var soWarehouses = soWarehouseTreeView().option('items');
            for (i = 0; i < soWarehouses.length; i++) {
                var item = soWarehouses[i];
                soWarehouses[i] = new Dismoyo_Ciptoning_Client.vWarehouseViewModel(item);
            }

            data.ChildProducts(siteProducts);
            data.ChildWarehouses(soWarehouses);
            var dataJS = ko.toJS(data);
            dataSource.store().insert(dataJS)
                .done(function (result) {
                    isDataGridRefreshRequired = true;

                    commonPopupEdit.events.performCancel();
                    hideLoadingPanel();
                })
                .fail(function (error) {
                    var dc = $('.dx-popup-normal>.dx-dialog-content');
                    if (dc.length == 0)
                        DevExpress.ui.dialog.alert(error.message, 'Save Failed');

                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        dataField: 'TerritoryID',
        label: { text: 'Territory' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupTerritoryDataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                    [],
                    ['Region']);
            }
        }
    }, {
        dataField: 'RegionID',
        label: { text: 'Region' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupRegionDataSource(null),
            displayExpr: 'Region',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                    ['Territory'],
                    ['Area']);
            }
        }
    }, {
        dataField: 'AreaID',
        label: { text: 'Area' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupAreaDataSource(null),
            displayExpr: 'Area',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                    ['Region', 'Territory'],
                    ['Company']);
            }
        }
    }, {
        dataField: 'CompanyID',
        label: { text: 'Company' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupCompanyDataSource(null),
            displayExpr: 'Company',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        name: 'Site',
        dataField: '',        
        label: { text: 'Site' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: 'DistributionTypeID',
        label: { text: 'Distribution Type' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SiteDistributionType']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // TerritoryID
        value = form.getEditor('TerritoryID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', value, 'and');

        // RegionID
        value = form.getEditor('RegionID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', value, 'and');

        // AreaID
        value = form.getEditor('AreaID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', value, 'and');

        // CompanyID
        value = form.getEditor('CompanyID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', value, 'and');

        // DistributionTypeID
        value = form.getEditor('DistributionTypeID').option('value');
        if (!isNaN(value) && value !== null)
            DXUtility.addFilterExpression(filterExpr, 'DistributionTypeID', '=', parseInt(value), 'and');

        // Site
        value = form.getEditor('Site').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Sites.AddNewSite');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Sites.EditSite');
    commonGridView.dataGridOptions.editing.allowDeleting = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Sites.DeleteSite');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', caption: "Territory", width: '200px'
    }, {
        dataField: 'Region', caption: 'Region', width: '200px'
    }, {
        dataField: 'Area', caption: 'Area', width: '200px'
    }, {
        dataField: 'Company', caption: 'Company', width: '200px'
    }, {
        dataField: 'Code', Caption: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSites_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines data-grid-banded-header-border-top">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Site' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating || commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.Code());
            if (commonGridView.dataGridOptions.editing.allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.Code()).on('dxclick', function () {
                    openSelectedEditing(options.data.ID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'Name', width: '180px'
    }, {
        dataField: 'DistributionTypeName', caption: 'Distribution Type', width: '150px'
    }, {
        dataField: 'StatusName', caption: 'Status', width: '100px'
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating ||
        commonGridView.dataGridOptions.editing.allowDeleting) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                if (commonGridView.dataGridOptions.editing.allowUpdating) {
                    commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                        openSelectedEditing(options.data.ID(), false);
                    }));
                    commands.append('&nbsp;');
                }

                if (commonGridView.dataGridOptions.editing.allowDeleting) {
                    commands.append($('<a class="dx-link">').text('Delete').on('dxclick', function () {
                        var dataGrid = commonGridView.dataGrid();
                        var dataSource = dataGrid.option('dataSource');
                        var data = options.data.toJS();
                        var selectedKey = data.ID;

                        dataSource.store().remove(selectedKey).done(function () {
                            dataGrid.refresh();
                        });
                    }));
                    commands.append('&nbsp;');
                }

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();
    commonPopupEdit.popupEditOptions.title = "Site";

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var siteProductTreeView = function () { return DXUtility.getDXInstance(null, '#vSites_siteProductTreeView', 'dxTreeView'); }
    var soWarehouseTreeView = function () { return DXUtility.getDXInstance(null, '#vSites_soWarehouseTreeView', 'dxTreeView'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = $('<div>');

        var table = $('<table width="100%">');
        var tr = $('<tr>');

        tr.append($('<td width="50%" style="vertical-align: top;">')
            .append(DXUtility.createFormItemGroupWithCaption('Products').css('padding', '0px 12px 0px 0px')
            .append(DXUtility.createFormItemGroupContent().css('padding', '16px 12px 0px 0px'))
            .append($('<div id="vSites_siteProductTreeView">').dxTreeView({
                dataSource: [],
                dataStructure: 'tree',
                keyExpr: 'key',
                displayExpr: 'text',
                rootValue: null,
                showCheckBoxesMode: 'normal'
            }))));

        tr.append($('<td width="50%" style="vertical-align: top;">')
            .append(DXUtility.createFormItemGroupWithCaption('SO Allowed Warehouses').css('padding', '0px 0px 0px 12px')
            .append(DXUtility.createFormItemGroupContent().css('padding', '16px 0px 0px 12px'))
            .append($('<div id="vSites_soWarehouseTreeView">').dxTreeView({
                dataSource: [],
                dataStructure: 'tree',
                keyExpr: 'key',
                displayExpr: 'text',
                rootValue: null,
                showCheckBoxesMode: 'normal',
                onItemSelected: function (e) {
                    e.node.itemData.IsSOAllowed = e.node.selected;
                }
            }))));

        table.append(tr);
        content.append(table);

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
    };


    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    

    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 3,
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
            }
        }, {
            itemType: 'empty',
            colSpan: 2,
        }]
    }, {
        itemType: 'group',
        caption: 'Site',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'Code',
            validationRules: [{ type: 'required' }],
            label: { text: 'Code' },
            editorOptions: {
                maxLength: 5,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'Name',
            validationRules: [{ type: 'required' }],
            label: { text: 'Name' },
            colSpan: 2,
            editorOptions: {
                width: '500px',
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }                
            }
        }, {
            dataField: 'DistributionTypeID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Distribution Type' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SiteDistributionType']),
                displayExpr: "Name",
                valueExpr: "Value_Int32",
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'StatusID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'SiteStatus']),
                displayExpr: "Name",
                valueExpr: "Value_Int32",
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'Address1',
            validationRules: [{ type: 'required' }],
            label: { text: 'Address' },
            colSpan: 2,
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'Address2',
            label: { text: ' ' },
            colSpan: 2,
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'Address3',
            label: { text: ' ' },
            colSpan: 2,
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'City',
            validationRules: [{ type: 'required' }],
            label: { text: 'City' },
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'StateProvince',
            validationRules: [{ type: 'required' }],
            label: { text: 'Province' },
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'CountryID',
            validationRules: [{ type: 'required' }],
            label: { text: 'Country' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCountryDataSource(null),
                displayExpr: "Name",
                valueExpr: "ID",
                searchEnabled: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'ZipCode',
            validationRules: [{ type: 'required' }, { type: 'numeric' }],
            label: { text: 'Zip code' },
            editorOptions: {
                maxLength: 10,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'Phone1',
            validationRules: [{ type: 'required' }, { type: 'numeric' }],
            label: { text: 'Phone 1' },
            editorOptions: {
                maxLength: 20,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'Phone2',
            validationRules: [{ type: 'numeric' }],
            label: { text: 'Phone 2' },
            editorOptions: {
                maxLength: 20,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'Fax',
            validationRules: [{ type: 'numeric' }],
            label: { text: 'Fax' },
            editorOptions: {
                maxLength: 20,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'Email',
            validationRules: [{ type: 'email' }],
            label: { text: 'Email' },
            editorOptions: {
                maxLength: 256,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'SAPCode',
            validationRules: [{ type: 'required' }],
            label: { text: 'SAP Code' },
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'IsLotNumberEntryRequired',
            editorType: 'dxCheckBox'
        }]
    }, {
        itemType: 'group',
        caption: 'Additional Info',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'AdditionalInfo1',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo1') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AdditionalInfo2',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo2') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'AdditionalInfo3',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo3') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AdditionalInfo4',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo4') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'AdditionalInfo5',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo5') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AdditionalInfo6',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo6') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'AdditionalInfo7',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo7') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AdditionalInfo8',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo8') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
        }, {
            dataField: 'AdditionalInfo9',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo9') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AdditionalInfo10',
            label: { text: getValueFromSystemParameter('Site.AdditionalInfo10') },
            editorOptions: {
                maxLength: 100,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing();
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: "/Images/site_32px.png",

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit
    };
};

Dismoyo_Ciptoning_Client.vStockChanges = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevStockChangesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vStockChanges');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vStockChanges.off('modified', handlevStockChangesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockChanges,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockChangesViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vStockChanges.on('modified', handlevStockChangesModification);



    var dataSource_vStockChangesDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockChangesDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockChangesDetailsViewModel(item); }
    });

    var dataSource_vStockChangesSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockChangesSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-07-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }
        var warehouseDataSource = DataUtility.GetLookupWarehouseDataSource(['SiteID', '=', siteID]);

        form.getEditor('WarehouseID').option('value', null);
        form.getEditor('WarehouseID').option('dataSource', []);
        warehouseDataSource.load()
            .done(function (result) {
                form.getEditor('WarehouseID').option('dataSource', warehouseDataSource);
            });
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            stockChangesSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            stockChangesSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummariesArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            stockChangesSummaryDataGrid().option('dataSource').store(),
            'vStockChangesSummaryViewModel',
            summary
        );
    }

    function createSummaryArrayDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vStockChangesSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyChangesConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyChangesConvColumn]()));
        commands.append('&nbsp;');
        if (isLotNumberEntryRequired) {
            var column = qtyChangesConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyChangesConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = stockChangesSummaryDataGrid().option('editing');
        var selection = stockChangesSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        stockChangesSummaryDataGrid().option('editing', option);
        stockChangesSummaryDataGrid().option('selection', selection);
        stockChangesSummaryNewRow().option('disabled', !allowed);
        stockChangesSummaryDeleteRows().option('disabled', true);
        stockChangesSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vStockChanges.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vStockChangesViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vStockChangesViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Stock Changes');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            data.TerritoryID(user.TerritoryID());
            data.RegionID(user.RegionID());
            data.AreaID(user.AreaID());
            data.SiteID(user.SiteID());
            data.SiteCode(user.SiteCode());
            data.CompanyID(user.CompanyID());
            data.Company(user.Company());

            documentCode = previewDocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if ((data.DocumentStatusID() == 1) && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3)) // Posted or Discarded
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        stockChangesPost().option('disabled', newData || disabled);
        stockChangesDiscard().option('disabled', newData || disabled);
        stockChangesSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        var organizationOptions = form.itemOption('Organization');
        organizationOptions.visible = user.IsHeadOffice();
        if (!user.IsHeadOffice()) {
            form.itemOption('Organization', organizationOptions);

            // update NewStatusID Datasource because 
            // if Organization options is updated, the datasource always become empty array
            var newItemStatusDataSource = DataUtility.GetLookupSystemLookupDataSource(
                [
                    ['Group', '=', 'ProductItemStatus'], 'and',
                    ['Value_Int32', '<>', 4], 'and', // Exclude 'Disposed' status
                    ['Value_Int32', '<>', (data.OldItemStatusID() ? data.OldItemStatusID() : 4)] // Exclude 'OldItemStatusID' selected status value
                ]
            );

            var newItemStatusEditor = form.getEditor('NewItemStatusID');
            newItemStatusEditor.option('value', null);
            newItemStatusEditor.option('dataSource', newItemStatusDataSource);
        }

        if (organizationOptions.visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('PIC').option('value', data.PIC());
        form.getEditor('OldItemStatusID').option('value', data.OldItemStatusID());
        form.getEditor('NewItemStatusID').option('value', data.NewItemStatusID());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());

        var fileUploader = stockChangesEditDataAttachmentFile();
        CommonUtility.createEditDataAttachmentFileDownloader('vStockChanges', fileUploader,
            'StockChanges', data.AttachmentFile());
        fileUploader.option('value', null);

        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('WarehouseID').option('readOnly', disabled);

        form.getEditor('PIC').option('readOnly', disabled);
        form.getEditor('OldItemStatusID').option('readOnly', disabled);
        form.getEditor('NewItemStatusID').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);

        var fileUploaderInput = $('.dx-fileuploader-input-wrapper');
        if (disabled)
            fileUploaderInput.hide();
        else
            fileUploaderInput.show();

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = stockChangesSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryArrayDataSource(data.ChildSummaries()));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = stockChangesSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length > 0) {
                            var item = items[0];
                            item.QtyConvL(DXUtility.getValue(details, 'QtyConvL'));
                            item.QtyConvM(DXUtility.getValue(details, 'QtyConvM'));
                            item.QtyConvS(DXUtility.getValue(details, 'QtyConvS'));
                            item.QtyChanges(DXUtility.getValue(details, 'QtyChanges'));
                            item.QtyChangesConv(DXUtility.getValue(details, 'QtyChangesConv'));
                        } else
                            dataSourceItems[i].ChildDetails().push(
                                new Dismoyo_Ciptoning_Client.vStockChangesDetailsViewModel(details));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = stockChangesSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Changes Details.';
                isValid = false;
            }
        }

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyChanges = 0;
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];
                    sumQtyChanges += details.QtyChanges();
                }

                if (summary.QtyChanges() != sumQtyChanges) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Changes Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }
        
        if (isValid && ($('.dx-fileuploader-button.dx-fileuploader-upload-button.dx-widget.dx-button-has-icon.dx-button.dx-button-normal').length > 0)) {
            errorMsg = 'You have selected an attachment file. Please upload or cancel the attachment file.';
            isValid = false;
        }
        
        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');
        
        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.PIC(form.getEditor('PIC').option('value'));
            data.OldItemStatusID(form.getEditor('OldItemStatusID').option('value'));
            data.NewItemStatusID(form.getEditor('NewItemStatusID').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            var fileUploader = stockChangesEditDataAttachmentFile();
            data.AttachmentFile((fileUploader.option('values').length > 0) ? fileUploader.fileName : null);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyChanges * -1;
                }

                summary.Qty = summary.QtyChanges * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyChangesColumn = 'QtyChanges' + itemStatusName;
        var qtyChangesConvColumn = 'QtyChangesConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyChangesColumn: qtyChangesColumn,
            qtyChangesConvColumn: qtyChangesConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyChangesConv').option('value', data.QtyChangesConv());

        var conversion = CommonUtility.getConversion(
            data.QtyChangesConv(),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyChanges').option('value', conversion.qtyTransaction);

        data = validateSummariesArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vStockChangesDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyChanges').option('value'),
            'Changes',
            'vStockChangesDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyChangesConv',
            'QtyChanges',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            stockChangesSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vProducts,
                select: [
                    'ID',
                    'Code',
                    'Product',
                    'UOMLID',
                    'UOMMID',
                    'UOMSID',
                    'ConversionL',
                    'ConversionM',
                    'ConversionS'
                ],
                sort: ['ID'],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
            }).load()
                .done(function (result) {
                    var productDataSource = result;
                    var warehouseID = form.getEditor('WarehouseID').option('value');

                    var qtyOnHandField = '';
                    switch (commonPopupEdit.form().getEditor('OldItemStatusID').option('value')) {
                        case 1: qtyOnHandField += 'Good'; break; // Good
                        case 2: qtyOnHandField += 'Hold'; break; // Hold
                        case 3: qtyOnHandField += 'Bad'; break; // Bad
                    }

                    var dataSource = new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                        select: [
                            'ProductID',
                            'ProductLotID',
                            'ProductLotCode',
                            'ProductLot',
                            'ProductLotExpiredDate',
                            'QtyOnHand' + qtyOnHandField
                        ],
                        filter: [
                            ['WarehouseID', '=', warehouseID], "and",
                            ['QtyOnHand' + qtyOnHandField, '>', 0]
                        ],
                        sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                    });

                    dataSource.load()
                        .done(function (result2) {
                            var product = null;
                            var stockOnHandAvailable = [];
                            var stockOnHandAvailableByProduct = [];
                            for (var i = 0; i < result2.length; i++) {
                                stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                                var j = stockOnHandAvailableByProduct.length - 1;
                                var productID = result2[i].ProductID();
                                if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                    stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));
                                    j++;
                                    product = $.grep(result, function (e) { return (e.ID() == productID); });
                                } else {
                                    stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                        result2[i].QtyOnHandGood());
                                    stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                        result2[i].QtyOnHandHold());
                                    stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                        result2[i].QtyOnHandBad());
                                }

                                stockOnHandAvailable[i].ProductCode(product[0].Code());
                                stockOnHandAvailable[i].Product(product[0].Product());
                                stockOnHandAvailable[i].ProductUOMLID(product[0].UOMLID());
                                stockOnHandAvailable[i].ProductUOMMID(product[0].UOMMID());
                                stockOnHandAvailable[i].ProductUOMSID(product[0].UOMSID());
                                stockOnHandAvailable[i].ProductConversionL(product[0].ConversionL());
                                stockOnHandAvailable[i].ProductConversionM(product[0].ConversionM());
                                stockOnHandAvailable[i].ProductConversionS(product[0].ConversionS());

                                stockOnHandAvailableByProduct[j].ProductCode(product[0].Code());
                                stockOnHandAvailableByProduct[j].Product(product[0].Product());
                                stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].UOMLID());
                                stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].UOMMID());
                                stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].UOMSID());
                                stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ConversionL());
                                stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ConversionM());
                                stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ConversionS());
                            }

                            dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                            dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                            if (dataSource_vStockOnHandAvailable.length == 0)
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                    'Product lot stock with item status ' + qtyOnHandField + ' for the selected warehouse is empty.'),
                                    'New Changes Details Failed');
                            else
                                productLotLoaded();

                            hideLoadingPanel();
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                            hideLoadingPanel();
                        });
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Change',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // PIC
        value = form.getEditor('PIC').option('value');
        DXUtility.addFilterExpression(filterExpr, 'PIC', 'contains', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockChanges.AddNewStockChanges');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockChanges.EditStockChanges');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vStockChanges_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Status Changes' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('StockChanges.EditStockChanges');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'OldItemStatusName', caption: 'From', width: '80px'
    }, {
        dataField: 'NewItemStatusName', caption: 'To', width: '80px'
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px'
    }, {
        dataField: 'PIC', caption: 'PIC', width: '180px'
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px'
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var stockChangesEditDataAttachmentFile = function () { return DXUtility.getDXInstance(null, '#vStockChanges_editDataAttachmentFile', 'dxFileUploader'); }

    var stockChangesSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vStockChanges_stockChangesSummaryDataGrid', 'dxDataGrid'); }

    var stockChangesPost = function () { return DXUtility.getDXInstance(null, '#vStockChanges_stockChangesPost', 'dxButton'); }
    var stockChangesDiscard = function () { return DXUtility.getDXInstance(null, '#vStockChanges_stockChangesDiscard', 'dxButton'); }
    var stockChangesSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vStockChanges_stockChangesSaveAsDraftAndNew', 'dxButton'); }

    var stockChangesSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vStockChanges_stockChangesSummaryNewRow', 'dxButton'); }
    var stockChangesSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vStockChanges_stockChangesSummaryDeleteRows', 'dxButton'); }
    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Changes Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vStockChanges_stockChangesSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        stockChangesSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Change Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vStockChanges_stockChangesSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(stockChangesSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vStockChanges_stockChangesSummaryDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            selection: {
                mode: 'multiple',
                allowSelectAll: true
            },
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                info.data.QtyChanges = 0;
                info.data.QtyChangesConv = '0/0/0';
            },
            onSelectionChanged: function (e) {
                stockChangesSummaryDeleteRows().option('disabled', !e.selectedRowsData.length);
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            var qtyOnHandField = 'QtyOnHand';
                            switch (commonPopupEdit.form().getEditor('OldItemStatusID').option('value')) {
                                case 1: qtyOnHandField += 'Good'; break; // Good
                                case 2: qtyOnHandField += 'Hold'; break; // Hold
                                case 3: qtyOnHandField += 'Bad'; break; // Bad
                            }
                            var qtyOnHandColumn = qtyOnHandField;

                            e.editorElement.dxLookup({
                                dataSource: new DevExpress.data.DataSource({
                                    store: dataSource_vStockOnHandAvailableByProduct,
                                    filter: [qtyOnHandColumn, '>', 0]
                                }),
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    var itemStatusID = commonPopupEdit.form().getEditor('OldItemStatusID').option('value');

                                    CommonUtility.createProductLookupHeader('vStockChanges_productIDLookup', ea.element, itemStatusID);
                                },
                                itemTemplate: function (data, index, element) {
                                    var itemStatusID = commonPopupEdit.form().getEditor('OldItemStatusID').option('value');

                                    return CommonUtility.createProductLookupItem(data, element, itemStatusID);
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyChangesConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyChanges', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(
                                e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'QtyChangesConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onEnterKey: function (ea) {
                                stockChangesSummaryDataGrid().saveEditData();
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onValueChanged: function (ea) {
                                //if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                                //    ea.value = '';
                                //}

                                //// will convert the units to quantity (in the input is in units)
                                //if (ea.value.indexOf('/') > -1) {
                                //    var qty = 0;
                                //    var units = ea.value.split('/');
                                //    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                                //        if (units[unitIndex] == '')
                                //            break;
                                //        var value = parseInt(units[unitIndex]);
                                //        if (unitIndex == 0)
                                //            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                                //        else if (unitIndex == 1) {
                                //            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                                //                qty += value;
                                //            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                                //                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                                //        }
                                //        else if (unitIndex == 2)
                                //            qty += value;
                                //    }
                                //    ea.value = qty + "";
                                //    DXUtility.setValue(e.row.data, e.dataField.replace('QtyChangesConv', 'QtyChanges'), qty);
                                //}

                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyChangesConv', 'QtyChanges'), conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyChangesConv', 'QtyConvL'), conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyChangesConv', 'QtyConvM'), conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyChangesConv', 'QtyConvS'), conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                stockChangesSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                stockChangesSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyChangesConv) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyChangesConv,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyChanges = conversion.qtyTransaction;
                }

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
                if (qtyOnHand == undefined)
                    qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

                var qtyChanges = DXUtility.getValue(e.newData, 'QtyChanges');
                if (qtyChanges == undefined)
                    qtyChanges = DXUtility.getValue(e.oldData, 'QtyChanges');
                                
                if (qtyChanges <= 0) {
                    e.errorText = 'Changes Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && (qtyChanges > qtyOnHand)) {
                    e.errorText = 'Changes Qty must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(stockChangesSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (stockChangesSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '150px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'QtyChangesConv', caption: 'Status Changes Qty (L/M/S)', width: '180px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyChangesConv',
                        commonPopupEdit.form().getEditor('OldItemStatusID').option('value')));
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPost = $('<div id="vStockChanges_stockChangesPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vStockChanges_stockChangesDiscard" style="margin-right: 16px;">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vStockChanges_stockChangesSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.formOptions.customizeItem = function (item) {
        if (item.dataField == 'AttachmentFile') {
            item.template = function (data, itemElement) {
                itemElement.append(CommonUtility.createEditDataAttachmentFileUploader('vStockChanges', 'StockChanges'));
            }
        }
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Changes',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = stockChangesSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryArrayDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }                
            }
        }, {
            itemType: 'empty'
        }, {
            dataField: 'OldItemStatusID',
            label: { text: 'Status Changes From' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(
                    [
                        ['Group', '=', 'ProductItemStatus'], 'and',
                        ['Value_Int32', '<>', 4], // Exclude 'Disposed' status
                    ]
                ),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var newItemStatusDataSource = DataUtility.GetLookupSystemLookupDataSource(
                        [
                            ['Group', '=', 'ProductItemStatus'], 'and',
                            ['Value_Int32', '<>', 4], 'and', // Exclude 'Disposed' status
                            ['Value_Int32', '<>', (e.value ? e.value : 4)] // Exclude 'OldItemStatusID' selected status value
                        ]
                    );

                    var newItemStatusEditor = commonPopupEdit.form().getEditor('NewItemStatusID');
                    newItemStatusEditor.option('value', null);
                    newItemStatusEditor.option('dataSource', newItemStatusDataSource);
                    this.stockChangesSummaryDataGrid().option('dataSource', createSummaryArrayDataSource([]));
                    this.stockChangesSummaryDataGrid().repaint();

                }
            }
        }, {
            dataField: 'NewItemStatusID',
            label: { text: 'To' },
            validationRules: [{ type: 'required' }],
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: function () {
                    var OldItemStatusID = commonPopupEdit.form().getEditor('NewItemStatusID');
                    return DataUtility.GetLookupSystemLookupDataSource(
                        [
                            ['Group', '=', 'ProductItemStatus'], 'and',
                            ['Value_Int32', '<>', 4], 'and', // Exclude 'Disposed' status
                            ['Value_Int32', '<>', (OldItemStatusID ? OldItemStatusID : 4)] // Exclude 'OldItemStatusID' selected status value
                        ]
                    )
                },
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AttachmentFile',
            label: { text: 'Attachment File' },
            colSpan: 2,
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyChanges = 0;
        info.data.QtyChangesConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                var productLotColumns = getProductLotColumns(itemStatusID);

                if (e.row.inserted) {
                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vStockChanges_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyChangesConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyChanges', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyChangesConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    //onKeyDown: DXUtility.preventInputCharacters,
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    onValueChanged: function (ea) {
                        //if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                        //    ea.value = '';
                        //}

                        //// will convert the units to quantity (in the input is in units)
                        //if (ea.value.indexOf('/') > -1) {
                        //    var qty = 0;
                        //    var units = ea.value.split('/');
                        //    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                        //        if (units[unitIndex] == '')
                        //            break;
                        //        var value = parseInt(units[unitIndex]);
                        //        if (unitIndex == 0)
                        //            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                        //        else if (unitIndex == 1) {
                        //            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                        //                qty += value;
                        //            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                        //                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                        //        }
                        //        else if (unitIndex == 2)
                        //            qty += value;
                        //    }
                        //    ea.value = qty + "";
                        //    DXUtility.setValue(e.row.data, 'QtyChanges', qty);
                        //}

                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyChanges', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vStockChangesDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyChangesConv',
            'QtyChanges'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

        var qtyChanges = DXUtility.getValue(e.newData, 'QtyChanges');
        if (qtyChanges == undefined)
            qtyChanges = DXUtility.getValue(e.oldData, 'QtyChanges');
                
        if (qtyChanges <= 0) {
            e.errorText = 'Changes Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyChanges > qtyOnHand)) {
            e.errorText = 'Changes Qty  must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyChangesConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyChangesConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyChangesConv',
                'QtyChanges');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyChangesConv', caption: 'Changes Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyChanges',
            label: { text: 'Changes Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyChangesConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_changes_32px.png',

        dataSource_vStockChangesDetails: dataSource_vStockChangesDetails,
        dataSource_vStockChangesSummary: dataSource_vStockChangesSummary,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        productLotPopupEdit: productLotPopupEdit,

        stockChangesSummaryDataGrid: stockChangesSummaryDataGrid,
        stockChangesPost: stockChangesPost,
        stockChangesDiscard: stockChangesDiscard,
        stockChangesSaveAsDraftAndNew: stockChangesSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vStockDisposals = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevStockDisposalsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vStockDisposals');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vStockDisposals.off('modified', handlevStockDisposalsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockDisposals,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockDisposalViewModel(item); }
    });


    Dismoyo_Ciptoning_Client.DB.vStockDisposals.on('modified', handlevStockDisposalsModification);



    var dataSource_vStockDisposalDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockDisposalDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockDisposalDetailsViewModel(item); }
    });

    var dataSource_vStockDisposalSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockDisposalSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-09-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }
        var warehouseDataSource = DataUtility.GetLookupWarehouseDataSource([
            ['SiteID', '=', siteID], 'and',
            ['TypeID', '=', 1] // Main warehouse only
        ]);

        form.getEditor('WarehouseID').option('value', null);
        form.getEditor('WarehouseID').option('dataSource', []);
        warehouseDataSource.load()
            .done(function (result) {
                form.getEditor('WarehouseID').option('dataSource', warehouseDataSource);
            });
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            stockDisposalSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            stockDisposalSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummariesArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            stockDisposalSummaryDataGrid().option('dataSource').store(),
            'vStockDisposalSummaryViewModel',
            summary
        );
    }

    function createSummaryArrayDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vStockDisposalSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyDisposalConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyDisposalConvColumn]()));
        commands.append('&nbsp;');
        if (isLotNumberEntryRequired) {
            var column = qtyDisposalConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyDisposalConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = stockDisposalSummaryDataGrid().option('editing');
        var selection = stockDisposalSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        stockDisposalSummaryDataGrid().option('editing', option);
        stockDisposalSummaryDataGrid().option('selection', selection);
        stockDisposalSummaryNewRow().option('disabled', !allowed);
        stockDisposalSummaryDeleteRows().option('disabled', true);
        stockDisposalSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vStockDisposals.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vStockDisposalViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vStockDisposalViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Stock Disposal');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            data.TerritoryID(user.TerritoryID());
            data.RegionID(user.RegionID());
            data.AreaID(user.AreaID());
            data.SiteID(user.SiteID());
            data.SiteCode(user.SiteCode());
            data.CompanyID(user.CompanyID());
            data.Company(user.Company());

            documentCode = previewDocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if (data.DocumentStatusID() == 1 && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3)) // Posted or Discard
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        stockDisposalPost().option('disabled', newData || disabled);
        stockDisposalDiscard().option('disabled', newData || disabled);
        stockDisposalSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('PIC').option('value', data.PIC());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());

        var fileUploader = stockDisposalEditDataAttachmentFile();
        CommonUtility.createEditDataAttachmentFileDownloader('vStockDisposals', fileUploader,
            'StockDisposals', data.AttachmentFile());
        fileUploader.option('value', null);

        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('WarehouseID').option('readOnly', disabled);
        form.getEditor('PIC').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);
        
        var fileUploaderInput = $('.dx-fileuploader-input-wrapper');
        if (disabled)
            fileUploaderInput.hide();
        else
            fileUploaderInput.show();

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = stockDisposalSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryArrayDataSource(data.ChildSummaries()));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = stockDisposalSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length > 0) {
                            var item = items[0];
                            item.QtyConvL(DXUtility.getValue(details, 'QtyConvL'));
                            item.QtyConvM(DXUtility.getValue(details, 'QtyConvM'));
                            item.QtyConvS(DXUtility.getValue(details, 'QtyConvS'));
                            item.QtyDisposal(DXUtility.getValue(details, 'QtyDisposal'));
                            item.QtyDisposalConv(DXUtility.getValue(details, 'QtyDisposalConv'));
                        } else
                            dataSourceItems[i].ChildDetails().push(
                                new Dismoyo_Ciptoning_Client.vStockDisposalDetailsViewModel(details));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = stockDisposalSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Disposal Details.';
                isValid = false;
            }
        }

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyDisposal = 0;
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];
                    sumQtyDisposal += details.QtyDisposal();
                }

                if (summary.QtyDisposal() != sumQtyDisposal) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Disposal Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        if (isValid && ($('.dx-fileuploader-button.dx-fileuploader-upload-button.dx-widget.dx-button-has-icon.dx-button.dx-button-normal').length > 0)) {
            errorMsg = 'You have selected an attachment file. Please upload or cancel the attachment file.';
            isValid = false;
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');
        
        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.PIC(form.getEditor('PIC').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            var fileUploader = stockDisposalEditDataAttachmentFile();
            data.AttachmentFile((fileUploader.option('values').length > 0) ? fileUploader.fileName : null);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyDisposal * -1;
                }

                summary.Qty = summary.QtyDisposal * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyDisposalColumn = 'QtyDisposal' + itemStatusName;
        var qtyDisposalConvColumn = 'QtyDisposalConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyDisposalColumn: qtyDisposalColumn,
            qtyDisposalConvColumn: qtyDisposalConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyDisposalConv').option('value', data.QtyDisposalConv());

        var conversion = CommonUtility.getConversion(
            data.QtyDisposalConv(),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyDisposal').option('value', conversion.qtyTransaction);

        data = validateSummariesArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vStockDisposalDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            data.ChildDetails()
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyDisposal').option('value'),
            'Disposal',
            'vStockDisposalDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyDisposalConv',
            'QtyDisposal',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            stockDisposalSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vProducts,
                select: [
                    'ID',
                    'Code',
                    'Product',
                    'UOMLID',
                    'UOMMID',
                    'UOMSID',
                    'ConversionL',
                    'ConversionM',
                    'ConversionS'
                ],
                sort: ['ID'],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
            }).load()
            .done(function (result) {
                var productDataSource = result;
                var warehouseID = form.getEditor('WarehouseID').option('value');

                var dataSource = new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                    select: [
                        'ProductID',
                        'ProductLotID',
                        'ProductLotCode',
                        'ProductLot',
                        'ProductLotExpiredDate',
                        'QtyOnHandBad'
                    ],
                    filter: [
                        ['WarehouseID', '=', warehouseID], 'and',
                        ['QtyOnHandBad', '>', 0]
                    ],
                    sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                    paginate: false,
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                });

                dataSource.load()
                    .done(function (result2) {
                        var product = null;
                        var stockOnHandAvailable = [];
                        var stockOnHandAvailableByProduct = [];
                        for (var i = 0; i < result2.length; i++) {
                            stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                            var j = stockOnHandAvailableByProduct.length - 1;
                            var productID = result2[i].ProductID();
                            if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));
                                j++;
                                product = $.grep(result, function (e) { return (e.ID() == productID); });
                            } else {
                                stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                    result2[i].QtyOnHandGood());
                                stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                    result2[i].QtyOnHandHold());
                                stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                    result2[i].QtyOnHandBad());
                            }

                            stockOnHandAvailable[i].ProductCode(product[0].Code());
                            stockOnHandAvailable[i].Product(product[0].Product());
                            stockOnHandAvailable[i].ProductUOMLID(product[0].UOMLID());
                            stockOnHandAvailable[i].ProductUOMMID(product[0].UOMMID());
                            stockOnHandAvailable[i].ProductUOMSID(product[0].UOMSID());
                            stockOnHandAvailable[i].ProductConversionL(product[0].ConversionL());
                            stockOnHandAvailable[i].ProductConversionM(product[0].ConversionM());
                            stockOnHandAvailable[i].ProductConversionS(product[0].ConversionS());

                            stockOnHandAvailableByProduct[j].ProductCode(product[0].Code());
                            stockOnHandAvailableByProduct[j].Product(product[0].Product());
                            stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].UOMLID());
                            stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].UOMMID());
                            stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].UOMSID());
                            stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ConversionL());
                            stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ConversionM());
                            stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ConversionS());
                        }

                        dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                        dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                        if (dataSource_vStockOnHandAvailable.length == 0)
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                'Product lot stock with item status Bad for the selected warehouse is empty.'),
                                'New Disposal Details Failed');
                        else
                            productLotLoaded();

                        hideLoadingPanel();
                    })
                    .fail(function (error) {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                        hideLoadingPanel();
                    });
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                hideLoadingPanel();
            });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Disposal',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // PIC
        value = form.getEditor('PIC').option('value');
        DXUtility.addFilterExpression(filterExpr, 'PIC', 'contains', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockDisposals.AddNewStockDisposal');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockDisposals.EditStockDisposal');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vStockDisposals_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('StockDisposals.EditStockDisposal');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px'
    }, {
        dataField: 'PIC', caption: 'PIC', width: '180px'
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px'
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var stockDisposalEditDataAttachmentFile = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_editDataAttachmentFile', 'dxFileUploader'); }

    var stockDisposalSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_stockDisposalSummaryDataGrid', 'dxDataGrid'); }

    var stockDisposalPost = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_stockDisposalPost', 'dxButton'); }
    var stockDisposalDiscard = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_stockDisposalDiscard', 'dxButton'); }
    var stockDisposalSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_stockDisposalSaveAsDraftAndNew', 'dxButton'); }
    var stockDisposalSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_stockDisposalSummaryNewRow', 'dxButton'); }
    var stockDisposalSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vStockDisposals_stockDisposalSummaryDeleteRows', 'dxButton'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Disposal Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vStockDisposals_stockDisposalSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        stockDisposalSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Disposal Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vStockDisposals_stockDisposalSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(stockDisposalSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vStockDisposals_stockDisposalSummaryDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            selection: {
                mode: 'multiple',
                allowSelectAll: true
            },
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                info.data.QtyDisposal = 0;
                info.data.QtyDisposalConv = '0/0/0';
            },
            onSelectionChanged: function (e) {
                stockDisposalSummaryDeleteRows().option('disabled', !e.selectedRowsData.length);
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAvailableByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vStockDisposals_productIDLookup', ea.element, 3); // Bad
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 3); // Bad
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyDisposalConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyDisposal', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(
                                e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'QtyDisposalConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                stockDisposalSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                                    ea.value = '';
                                }

                                // will convert the units to quantity (in the input is in units)
                                if (ea.value.indexOf('/') > -1) {
                                    var qty = 0;
                                    var units = ea.value.split('/');
                                    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                                        if (units[unitIndex] == '')
                                            break;
                                        var value = parseInt(units[unitIndex]);
                                        if (unitIndex == 0)
                                            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                                        else if (unitIndex == 1) {
                                            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                                                qty += value;
                                            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                                                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                                        }
                                        else if (unitIndex == 2)
                                            qty += value;
                                    }
                                    ea.value = qty + "";
                                    DXUtility.setValue(e.row.data, e.dataField.replace('QtyDisposalConv', 'QtyDisposal'), qty);
                                }

                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                //DXUtility.setValue(e.row.data, e.dataField.replace('QtyDisposalConv', 'QtyDisposal'), conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyDisposalConv', 'QtyConvL'), conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyDisposalConv', 'QtyConvM'), conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyDisposalConv', 'QtyConvS'), conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                stockDisposalSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                stockDisposalSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyDisposalConv) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyDisposalConv,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyDisposal = conversion.qtyTransaction;
                }

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
                if (qtyOnHand == undefined)
                    qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

                var qtyDisposal = DXUtility.getValue(e.newData, 'QtyDisposal');
                if (qtyDisposal == undefined)
                    qtyDisposal = DXUtility.getValue(e.oldData, 'QtyDisposal');

                if (qtyDisposal <= 0) {
                    e.errorText = 'Disposal Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && (qtyDisposal > qtyOnHand)) {
                    e.errorText = 'Disposal Qty must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(stockDisposalSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (stockDisposalSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '150px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'QtyDisposalConv', caption: 'Disposal Qty (L/M/S)', width: '180px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyDisposalConv', 3)); // Bad
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPost = $('<div id="vStockDisposals_stockDisposalPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vStockDisposals_stockDisposalDiscard" style="margin-right: 16px;">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vStockDisposals_stockDisposalSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.formOptions.customizeItem = function (item) {
        if (item.dataField == 'AttachmentFile') {
            item.template = function (data, itemElement) {
                itemElement.append(CommonUtility.createEditDataAttachmentFileUploader('vStockDisposals', 'StockDisposals'));
            }
        }
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var company = null;

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        company = e.selectedItem.Company();
                    }

                    form.getEditor('Company').option('value', company);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Disposal',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = stockDisposalSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryArrayDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AttachmentFile',
            label: { text: 'Attachment File' },
            colSpan: 2,
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyDisposal = 0;
        info.data.QtyDisposalConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                    var productLotColumns = getProductLotColumns(itemStatusID);

                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vStockDisposals_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyDisposalConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyDisposal', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyDisposalConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    //onKeyDown: DXUtility.preventInputCharacters,
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    onValueChanged: function (ea) {
                        //if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                        //    ea.value = '';
                        //}

                        //// will convert the units to quantity (in the input is in units)
                        //if (ea.value.indexOf('/') > -1) {
                        //    var qty = 0;
                        //    var units = ea.value.split('/');
                        //    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                        //        if (units[unitIndex] == '')
                        //            break;
                        //        var value = parseInt(units[unitIndex]);
                        //        if (unitIndex == 0)
                        //            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                        //        else if (unitIndex == 1) {
                        //            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                        //                qty += value;
                        //            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                        //                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                        //        }
                        //        else if (unitIndex == 2)
                        //            qty += value;
                        //    }
                        //    ea.value = qty + "";
                        //    DXUtility.setValue(e.row.data, 'QtyDisposal', qty);
                        //}

                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyDisposal', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vStockDisposalDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyDisposalConv',
            'QtyDisposal'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, 'QtyOnHand');
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, 'QtyOnHand');

        var qtyDisposal = DXUtility.getValue(e.newData, 'QtyDisposal');
        if (qtyDisposal == undefined)
            qtyDisposal = DXUtility.getValue(e.oldData, 'QtyDisposal');

        if (qtyDisposal <= 0) {
            e.errorText = 'Disposal Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyDisposal > qtyOnHand)) {
            e.errorText = 'Disposal Qty must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyDisposalConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyDisposalConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyDisposalConv',
                'QtyDisposal');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyDisposalConv', caption: 'Disposal Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyDisposal',
            label: { text: 'Disposal Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyDisposalConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];



    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_disposal_32px.png',

        dataSource_vStockDisposalDetails: dataSource_vStockDisposalDetails,
        dataSource_vStockDisposalSummary: dataSource_vStockDisposalSummary,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        productLotPopupEdit: productLotPopupEdit,

        stockDisposalSummaryDataGrid: stockDisposalSummaryDataGrid,
        stockDisposalPost: stockDisposalPost,
        stockDisposalDiscard: stockDisposalDiscard,
        stockDisposalSaveAsDraftAndNew: stockDisposalSaveAsDraftAndNew
    };
};

Dismoyo_Ciptoning_Client.vStockOpnames = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevStockOpnamesModification() { shouldReload = true; }

    var preventChangeWarehouseID = false;
    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vStockOpnames');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vStockOpnames.off('modified', handlevStockOpnamesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockOpnames,
        select: [
            'DocumentID',
            'DocumentCode',
            'Territory',
            'Region',
            'Area',
            'Company',
            'TransactionDate',
            'Warehouse',
            'ReferenceNumber',
            'DocumentStatusName',
            'PIC',
            'PostedDate',
            'CreatedByUserName',
            'CreatedDate',
            'ModifiedByUserName',
            'ModifiedDate'
        ],
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOpnameViewModel(item); }
    });



    Dismoyo_Ciptoning_Client.DB.vStockOpnames.on('modified', handlevStockOpnamesModification);



    var dataSource_vStockOpnameDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockOpnameDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel(item); }
    });

    var dataSource_vStockOpnameSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockOpnameSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAll;
    var dataSource_vStockOnHandAllByProduct;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-06-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var warehouseDataSource = DataUtility.GetLookupWarehouseDataSource(['SiteID', '=', siteID]);

        form.getEditor('WarehouseID').option('value', null);
        form.getEditor('WarehouseID').option('dataSource', []);
        warehouseDataSource.load()
            .done(function (result) {
                form.getEditor('WarehouseID').option('dataSource', warehouseDataSource);
            });
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            stockOpnameSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            stockOpnameSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummariesArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            stockOpnameSummaryDataGrid().option('dataSource').store(),
            'vStockOpnameSummaryViewModel',
            summary
        );
    }

    function createSummaryArrayDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vStockOpnameSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyOpnameConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyOpnameConvColumn]()));
        commands.append('&nbsp;');
        if (isLotNumberEntryRequired) {
            var column = qtyOpnameConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyOpnameConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = stockOpnameSummaryDataGrid().option('editing');
        var selection = stockOpnameSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        stockOpnameSummaryDataGrid().option('editing', option);
        stockOpnameSummaryDataGrid().option('selection', selection);
        stockOpnameSummaryNewRow().option('disabled', !allowed);
        stockOpnameSummaryDeleteRows().option('disabled', true);
        stockOpnameSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vStockOpnames.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vStockOpnameViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vStockOpnameViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Stock Opname');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            data.TerritoryID(user.TerritoryID());
            data.RegionID(user.RegionID());
            data.AreaID(user.AreaID());
            data.SiteID(user.SiteID());
            data.SiteCode(user.SiteCode());
            data.CompanyID(user.CompanyID());
            data.Company(user.Company());

            documentCode = previewDocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if ((data.DocumentStatusID() == 1) && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3)) // Posted or Discarded
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled);

        stockOpnamePrint().option('disabled', newData);
        stockOpnamePost().option('disabled', newData || disabled);
        stockOpnameDiscard().option('disabled', newData || disabled);
        stockOpnameSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('DocumentCode').option('value', documentCode);

        preventChangeWarehouseID = true;
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('PIC').option('value', data.PIC());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());

        var fileUploader = stockOpnameEditDataAttachmentFile();
        CommonUtility.createEditDataAttachmentFileDownloader('vStockOpnames', fileUploader,
            'StockOpnames', data.AttachmentFile());
        fileUploader.option('value', null);

        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        form.getEditor('TransactionDate').option('readOnly', true);
        form.getEditor('WarehouseID').option('readOnly', disabled);
        form.getEditor('PIC').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);
        
        var fileUploaderInput = $('.dx-fileuploader-input-wrapper');
        if (disabled)
            fileUploaderInput.hide();
        else
            fileUploaderInput.show();

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
        } else {
            if (data.DocumentStatusID() == 1)
                form.getEditor('TransactionDate').option('value', today);
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = stockOpnameSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryArrayDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = stockOpnameSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Opname Details.';
                isValid = false;
            }
        }

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyOpnameGood = 0;
                var sumQtyOpnameHold = 0;
                var sumQtyOpnameBad = 0;
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];
                    sumQtyOpnameGood += details.QtyOpnameGood();
                    sumQtyOpnameHold += details.QtyOpnameHold();
                    sumQtyOpnameBad += details.QtyOpnameBad();
                }

                if ((summary.QtyOpnameGood() != sumQtyOpnameGood) ||
                    (summary.QtyOpnameHold() != sumQtyOpnameHold) ||
                    (summary.QtyOpnameBad() != sumQtyOpnameBad)) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Opname Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        if (isValid && ($('.dx-fileuploader-button.dx-fileuploader-upload-button.dx-widget.dx-button-has-icon.dx-button.dx-button-normal').length > 0)) {
            errorMsg = 'You have selected an attachment file. Please upload or cancel the attachment file.';
            isValid = false;
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.PIC(form.getEditor('PIC').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            var fileUploader = stockOpnameEditDataAttachmentFile();
            data.AttachmentFile((fileUploader.option('values').length > 0) ? fileUploader.fileName : null);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.QtyGood = details.QtyOpnameGood - details.QtyOnHandGood;
                    details.QtyHold = details.QtyOpnameHold - details.QtyOnHandHold;
                    details.QtyBad = details.QtyOpnameBad - details.QtyOnHandBad;
                }

                summary.QtyGood = summary.QtyOpnameGood - summary.QtyOnHandGood;
                summary.QtyHold = summary.QtyOpnameHold - summary.QtyOnHandHold;
                summary.QtyBad = summary.QtyOpnameBad - summary.QtyOnHandBad;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printEditing(documentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Stock Opname');        
        commonPopupIFrame.popupEditOptions.visible(true);
        
        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.StockOpnameReport.url([['DocumentID', '=', documentID]]));
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyOpnameColumn = 'QtyOpname' + itemStatusName;
        var qtyOpnameConvColumn = 'QtyOpnameConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyOpnameColumn: qtyOpnameColumn,
            qtyOpnameConvColumn: qtyOpnameConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        var productLotColumns = getProductLotColumns(itemStatusID);

        var colQtyOnHand = dataGrid.columnOption('QtyOnHand');
        var colQtyOpnameConv = dataGrid.columnOption('QtyOpnameConv');

        colQtyOnHand.dataField = productLotColumns.qtyOnHandColumn;
        colQtyOpnameConv.dataField = productLotColumns.qtyOpnameConvColumn;

        dataGrid.columnOption('QtyOnHand', colQtyOnHand);
        dataGrid.columnOption('QtyOpnameConv', colQtyOpnameConv);

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data[productLotColumns.qtyOnHandColumn]());
        form.getEditor('QtyOpnameConv').option('value', data[productLotColumns.qtyOpnameConvColumn]());

        var conversion = CommonUtility.getConversion(
            data[productLotColumns.qtyOpnameConvColumn](),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyOpname').option('value', conversion.qtyTransaction);

        data = validateSummariesArrayStore(data);

        var childDetails = [];
        if (data.ChildDetails().length > 0) {
            var items = $.grep(data.ChildDetails(), function (e) {
                return ((e[productLotColumns.qtyOnHandColumn]() > 0) ||
                    ((e[productLotColumns.qtyConvLColumn]() > 0) ||
                    (e[productLotColumns.qtyConvMColumn]() > 0) ||
                    (e[productLotColumns.qtyConvSColumn]() > 0)))
            });

            for (var i = 0; i < items.length; i++)
                childDetails.push(items[i]);
        }

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vStockOpnameDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            childDetails
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = stockOpnameSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option("dataSource").store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAll, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    var data = dataSourceItems[i];
                    if (data.ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(data.ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length > 0) {
                            var item = items[0];
                            var qty;

                            qty = DXUtility.getValue(details, 'QtyOpnameGood');
                            if (qty != undefined) {
                                item.QtyConvLGood(DXUtility.getValue(details, 'QtyConvLGood'));
                                item.QtyConvMGood(DXUtility.getValue(details, 'QtyConvMGood'));
                                item.QtyConvSGood(DXUtility.getValue(details, 'QtyConvSGood'));
                                item.QtyOpnameGood(qty);
                                item.QtyOpnameConvGood(DXUtility.getValue(details, 'QtyOpnameConvGood'));
                            }

                            qty = DXUtility.getValue(details, 'QtyOpnameHold');
                            if (qty != undefined) {
                                item.QtyConvLHold(DXUtility.getValue(details, 'QtyConvLHold'));
                                item.QtyConvMHold(DXUtility.getValue(details, 'QtyConvMHold'));
                                item.QtyConvSHold(DXUtility.getValue(details, 'QtyConvSHold'));
                                item.QtyOpnameHold(qty);
                                item.QtyOpnameConvHold(DXUtility.getValue(details, 'QtyOpnameConvHold'));
                            }

                            qty = DXUtility.getValue(details, 'QtyOpnameBad')
                            if (qty != undefined) {
                                item.QtyConvLBad(DXUtility.getValue(details, 'QtyConvLBad'));
                                item.QtyConvMBad(DXUtility.getValue(details, 'QtyConvMBad'));
                                item.QtyConvSBad(DXUtility.getValue(details, 'QtyConvSBad'));
                                item.QtyOpnameBad(qty);
                                item.QtyOpnameConvBad(DXUtility.getValue(details, 'QtyOpnameConvBad'));
                            }
                        } else {
                            if (details.QtyOpnameGood == undefined) {
                                DXUtility.setValue(details, 'QtyConvLGood', 0);
                                DXUtility.setValue(details, 'QtyConvMGood', 0);
                                DXUtility.setValue(details, 'QtyConvSGood', 0);
                                DXUtility.setValue(details, 'QtyOpnameGood', 0);
                                DXUtility.setValue(details, 'QtyOpnameConvGood', '0/0/0');
                            }

                            if (details.QtyOpnameHold == undefined) {
                                DXUtility.setValue(details, 'QtyConvLHold', 0);
                                DXUtility.setValue(details, 'QtyConvMHold', 0);
                                DXUtility.setValue(details, 'QtyConvSHold', 0);
                                DXUtility.setValue(details, 'QtyOpnameHold', 0);
                                DXUtility.setValue(details, 'QtyOpnameConvHold', '0/0/0');
                            }

                            if (details.QtyOpnameBad == undefined) {
                                DXUtility.setValue(details, 'QtyConvLBad', 0);
                                DXUtility.setValue(details, 'QtyConvMBad', 0);
                                DXUtility.setValue(details, 'QtyConvSBad', 0);
                                DXUtility.setValue(details, 'QtyOpnameBad', 0);
                                DXUtility.setValue(details, 'QtyOpnameConvBad', '0/0/0');
                            }

                            dataSourceItems[i].ChildDetails().push(
                                new Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel(details));
                        }

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyOpname').option('value'),
            'Opname',
            'vStockOpnameDetailsViewModel',
            productLotColumns.qtyConvLColumn,
            productLotColumns.qtyConvMColumn,
            productLotColumns.qtyConvSColumn,
            productLotColumns.qtyOpnameConvColumn,
            productLotColumns.qtyOpnameColumn,
            true)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            stockOpnameSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAll.length == 0) && (dataSource_vStockOnHandAllByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vProducts,
                select: [
                    'ID',
                    'Code',
                    'Product',
                    'UOMLID',
                    'UOMMID',
                    'UOMSID',
                    'ConversionL',
                    'ConversionM',
                    'ConversionS'
                ],
                sort: ['ID'],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
            }).load()
                .done(function (result) {
                    var productDataSource = result;
                    var warehouseID = form.getEditor('WarehouseID').option('value');

                    var dataSource = new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAlls,
                        select: [
                            'ProductID',
                            'ProductLotID',
                            'ProductLotCode',
                            'ProductLot',
                            'ProductLotExpiredDate',
                            'QtyOnHandGood',
                            'QtyOnHandHold',
                            'QtyOnHandBad'
                        ],
                        filter: ['WarehouseID', '=', warehouseID],
                        sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(item); }
                    });

                    dataSource.load()
                        .done(function (result2) {
                            var product = null;
                            var stockOnHandAll = [];
                            var stockOnHandAllByProduct = [];
                            for (var i = 0; i < result2.length; i++) {
                                stockOnHandAll.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));

                                var j = stockOnHandAllByProduct.length - 1;
                                var productID = result2[i].ProductID();
                                if ((i == 0) || (stockOnHandAllByProduct[j].ProductID() != productID)) {
                                    stockOnHandAllByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));
                                    j++;
                                    product = $.grep(result, function (e) { return (e.ID() == productID); });
                                } else {
                                    stockOnHandAllByProduct[j].QtyOnHandGood(stockOnHandAllByProduct[j].QtyOnHandGood() +
                                        result2[i].QtyOnHandGood());
                                    stockOnHandAllByProduct[j].QtyOnHandHold(stockOnHandAllByProduct[j].QtyOnHandHold() +
                                        result2[i].QtyOnHandHold());
                                    stockOnHandAllByProduct[j].QtyOnHandBad(stockOnHandAllByProduct[j].QtyOnHandBad() +
                                        result2[i].QtyOnHandBad());
                                }

                                stockOnHandAll[i].ProductCode(product[0].Code());
                                stockOnHandAll[i].Product(product[0].Product());
                                stockOnHandAll[i].ProductUOMLID(product[0].UOMLID());
                                stockOnHandAll[i].ProductUOMMID(product[0].UOMMID());
                                stockOnHandAll[i].ProductUOMSID(product[0].UOMSID());
                                stockOnHandAll[i].ProductConversionL(product[0].ConversionL());
                                stockOnHandAll[i].ProductConversionM(product[0].ConversionM());
                                stockOnHandAll[i].ProductConversionS(product[0].ConversionS());

                                stockOnHandAllByProduct[j].ProductCode(product[0].Code());
                                stockOnHandAllByProduct[j].Product(product[0].Product());
                                stockOnHandAllByProduct[j].ProductUOMLID(product[0].UOMLID());
                                stockOnHandAllByProduct[j].ProductUOMMID(product[0].UOMMID());
                                stockOnHandAllByProduct[j].ProductUOMSID(product[0].UOMSID());
                                stockOnHandAllByProduct[j].ProductConversionL(product[0].ConversionL());
                                stockOnHandAllByProduct[j].ProductConversionM(product[0].ConversionM());
                                stockOnHandAllByProduct[j].ProductConversionS(product[0].ConversionS());
                            }

                            dataSource_vStockOnHandAll = stockOnHandAll;
                            dataSource_vStockOnHandAllByProduct = stockOnHandAllByProduct;

                            productLotLoaded();

                            hideLoadingPanel();
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                            hideLoadingPanel();
                        });
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Opname',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];

    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // PIC
        value = form.getEditor('PIC').option('value');
        DXUtility.addFilterExpression(filterExpr, 'PIC', 'contains', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockOpnames.AddNewStockOpname');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockOpnames.EditStockOpname');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vStockOpnames_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('StockOpnames.EditStockOpname');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px'
    }, {
        dataField: 'PIC', caption: 'PIC', width: '180px'
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px'
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var stockOpnameEditDataAttachmentFile = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_editDataAttachmentFile', 'dxFileUploader'); }

    var stockOpnameSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnameSummaryDataGrid', 'dxDataGrid'); }

    var stockOpnamePrint = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnamePrint', 'dxButton'); }
    var stockOpnamePost = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnamePost', 'dxButton'); }
    var stockOpnameDiscard = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnameDiscard', 'dxButton'); }
    var stockOpnameSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnameSaveAsDraftAndNew', 'dxButton'); }

    var stockOpnameSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnameSummaryNewRow', 'dxButton'); }
    var stockOpnameSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vStockOpnames_stockOpnameSummaryDeleteRows', 'dxButton'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Opname Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vStockOpnames_stockOpnameSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        stockOpnameSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Opname Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vStockOpnames_stockOpnameSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(stockOpnameSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vStockOpnames_stockOpnameSummaryDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            selection: {
                mode: 'multiple',
                allowSelectAll: true
            },
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onSelectionChanged: function (e) {
                stockOpnameSummaryDeleteRows().option('disabled', !e.selectedRowsData.length);
            },
            onInitNewRow: function (info) {
                info.data.QtyOpnameGood = 0;
                info.data.QtyOpnameHold = 0;
                info.data.QtyOpnameBad = 0;

                info.data.QtyOpnameConvGood = '0/0/0';
                info.data.QtyOpnameConvHold = '0/0/0';
                info.data.QtyOpnameConvBad = '0/0/0';
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAllByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '832px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vStockOpnames_productIDLookup', ea.element, null);
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, null);
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHandGood', item.QtyOnHandGood());
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHandHold', item.QtyOnHandHold());
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHandBad', item.QtyOnHandBad());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversionGood = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOpnameConvGood'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            var conversionHold = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOpnameConvHold'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            var conversionBad = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyOpnameConvBad'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyOpnameGood', conversionGood.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvLGood', conversionGood.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvMGood', conversionGood.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvSGood', conversionGood.qtyConvS);

                                            DXUtility.setValue(e.row.data, 'QtyOpnameHold', conversionHold.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvLHold', conversionHold.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvMHold', conversionHold.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvSHold', conversionHold.qtyConvS);

                                            DXUtility.setValue(e.row.data, 'QtyOpnameBad', conversionBad.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvLBad', conversionBad.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvMBad', conversionBad.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvSBad', conversionBad.qtyConvS);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(
                                e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if ((e.dataField == 'QtyOpnameConvGood') || (e.dataField == 'QtyOpnameConvHold') ||
                        (e.dataField == 'QtyOpnameConvBad')) {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                stockOpnameSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyOpname'), conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyConvL'), conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyConvM'), conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyConvS'), conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                stockOpnameSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                stockOpnameSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyOpnameConvGood) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyOpnameConvGood,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvLGood = conversion.qtyConvL;
                    info.newData.QtyConvMGood = conversion.qtyConvM;
                    info.newData.QtyConvSGood = conversion.qtyConvS;
                    info.newData.QtyOpnameGood = conversion.qtyTransaction;
                }

                if (info.newData.QtyOpnameConvHold) {
                    var conversion = CommonUtility.getConversion(
                        info.newData.QtyOpnameConvHold,
                        DXUtility.getValue(info.oldData, 'ProductConversionL'),
                        DXUtility.getValue(info.oldData, 'ProductConversionM'),
                        DXUtility.getValue(info.oldData, 'ProductConversionS')
                    );

                    info.newData.QtyConvLHold = conversion.qtyConvL;
                    info.newData.QtyConvMHold = conversion.qtyConvM;
                    info.newData.QtyConvSHold = conversion.qtyConvS;
                    info.newData.QtyOpnameHold = conversion.qtyTransaction;
                }

                if (info.newData.QtyOpnameConvBad) {
                    var conversion = CommonUtility.getConversion(
                        info.newData.QtyOpnameConvBad,
                        DXUtility.getValue(info.oldData, 'ProductConversionL'),
                        DXUtility.getValue(info.oldData, 'ProductConversionM'),
                        DXUtility.getValue(info.oldData, 'ProductConversionS')
                    );

                    info.newData.QtyConvLBad = conversion.qtyConvL;
                    info.newData.QtyConvMBad = conversion.qtyConvM;
                    info.newData.QtyConvSBad = conversion.qtyConvS;
                    info.newData.QtyOpnameBad = conversion.qtyTransaction;
                }

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHandGood = DXUtility.getValue(e.newData, 'QtyOnHandGood');
                if (qtyOnHandGood == undefined)
                    qtyOnHandGood = DXUtility.getValue(e.oldData, 'QtyOnHandGood');

                var qtyOnHandHold = DXUtility.getValue(e.newData, 'QtyOnHandHold');
                if (qtyOnHandHold == undefined)
                    qtyOnHandHold = DXUtility.getValue(e.oldData, 'QtyOnHandHold');

                var qtyOnHandBad = DXUtility.getValue(e.newData, 'QtyOnHandBad');
                if (qtyOnHandBad == undefined)
                    qtyOnHandBad = DXUtility.getValue(e.oldData, 'QtyOnHandBad');

                var qtyOpnameGood = DXUtility.getValue(e.newData, 'QtyOpnameGood');
                if (qtyOpnameGood == undefined)
                    qtyOpnameGood = DXUtility.getValue(e.oldData, 'QtyOpnameGood');

                var qtyOpnameHold = DXUtility.getValue(e.newData, 'QtyOpnameHold');
                if (qtyOpnameHold == undefined)
                    qtyOpnameHold = DXUtility.getValue(e.oldData, 'QtyOpnameHold');

                var qtyOpnameBad = DXUtility.getValue(e.newData, 'QtyOpnameBad');
                if (qtyOpnameBad == undefined)
                    qtyOpnameBad = DXUtility.getValue(e.oldData, 'QtyOpnameBad');

                if ((qtyOnHandGood == 0) && (qtyOpnameGood <= 0) &&
                    (qtyOnHandHold == 0) && (qtyOpnameHold <= 0) &&
                    (qtyOnHandBad == 0) && (qtyOpnameBad <= 0)) {
                    e.errorText = 'Opname Qty Good/Hold/Bad must be greater than 0 when On Hand Qty Good/Hold/Bad is 0.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(stockOpnameSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (stockOpnameSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                        tr += '       <td class="dx-datagrid-action" colspan="3">' + 'On Hand Qty (Pcs)' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Opname Qty (L/M/S)' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHandGood', caption: 'Good', width: '70px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'QtyOnHandHold', caption: 'Hold', width: '70px', allowEditing: false,
                dataType: 'number',
            }, {
                dataField: 'QtyOnHandBad', caption: 'Bad', width: '70px', allowEditing: false,
                dataType: 'number',
            }, {
                dataField: 'QtyOpnameConvGood', caption: 'Good', width: '90px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOpnameConvGood', 1)); // Good
                }
            }, {
                dataField: 'QtyOpnameConvHold', caption: 'Hold', width: '90px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOpnameConvHold', 2)); // Hold
                }
            }, {
                dataField: 'QtyOpnameConvBad', caption: 'Bad', width: '90px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyOpnameConvBad', 3)); // Bad
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrint = $('<div id="vStockOpnames_stockOpnamePrint" style="margin-right: 32px;">').dxButton({
            text: 'Print', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrint(this); }
        });

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPost = $('<div id="vStockOpnames_stockOpnamePost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vStockOpnames_stockOpnameDiscard" style="margin-right: 16px;">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vStockOpnames_stockOpnameSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrint);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrint = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printEditing(data.DocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.formOptions.customizeItem = function (item) {
        if (item.dataField == 'AttachmentFile') {
            item.template = function (data, itemElement) {
                itemElement.append(CommonUtility.createEditDataAttachmentFileUploader('vStockOpnames', 'StockOpnames'));
            }
        }
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        form.getEditor('Company').option('value', e.selectedItem.Company());
                    } else if (e.previousValue != null)
                        form.getEditor('Company').option('value', null);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Opname',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAll = [];
                    dataSource_vStockOnHandAllByProduct = [];
                    var form = commonPopupEdit.form();
                    if (e.value) {
                        var filters = [
                          ['WarehouseID', '=', e.value], 'and',
                          ['DocumentStatusID', '=', 2]
                        ];
                        var dataSource = new DevExpress.data.DataSource({
                            select: [
                                "TransactionDate",
                            ],
                            filter: filters,
                            store: Dismoyo_Ciptoning_Client.DB.vStockOpnames,
                            map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOpnameViewModel(item); }
                        });

                        dataSource.load()
                            .done(function (result) {
                                result.sort(function (a, b) {
                                    var c = new Date(a.TransactionDate());
                                    var d = new Date(b.TransactionDate());
                                    return c - d;
                                });
                                if (result.length > 0) {
                                    form.getEditor('TransactionDate').option('min', result[result.length - 1].TransactionDate());
                                    if (new Date(form.getEditor('TransactionDate').option('value')).setHours(0, 0, 0, 0) < new Date(form.getEditor('TransactionDate').option('min')).setHours(0, 0, 0, 0)) {
                                        form.validate().isValid = false
                                        form.getEditor('TransactionDate').option('isValid', false);

                                    }
                                }
                            });
                    }

                    if (e.value && !preventChangeWarehouseID) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = stockOpnameSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        showLoadingPanel();

                        new DevExpress.data.DataSource({
                            store: Dismoyo_Ciptoning_Client.DB.vProducts,
                            select: [
                                'ID',
                                'Code',
                                'Product',
                                'UOMLID',
                                'UOMMID',
                                'UOMSID',
                                'ConversionL',
                                'ConversionM',
                                'ConversionS'
                            ],
                            sort: ['ID'],
                            paginate: false,
                            map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
                        }).load()
                            .done(function (result) {
                                var productDataSource = result;

                                var dataSource = new DevExpress.data.DataSource({
                                    store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                                    select: [
                                        'ProductID',
                                        'ProductLotID',
                                        'ProductLotCode',
                                        'QtyOnHandGood',
                                        'QtyOnHandHold',
                                        'QtyOnHandBad'
                                    ],
                                    filter: [
                                        ['WarehouseID', '=', e.value], 'and',
                                        [
                                            ['QtyOnHandGood', '>', 0], 'or',
                                            ['QtyOnHandHold', '>', 0], 'or',
                                            ['QtyOnHandBad', '>', 0],
                                        ]
                                    ],
                                    sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                                    paginate: false,
                                    map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                                });

                                dataSource.load()
                                    .done(function (result2) {
                                        var product = null;
                                        var summaries = [];
                                        for (var i = 0; i < result2.length; i++) {
                                            var j = summaries.length - 1;
                                            var productID = result2[i].ProductID();
                                            if ((i == 0) || (summaries[j].ProductID() != productID)) {
                                                summaries.push(new Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel());

                                                j++;
                                                product = $.grep(result, function (e) { return (e.ID() == productID); });

                                                summaries[j].ProductID(product[0].ID());
                                                summaries[j].ProductCode(product[0].Code());
                                                summaries[j].Product(product[0].Product());
                                                summaries[j].ProductUOMLID(product[0].UOMLID());
                                                summaries[j].ProductUOMMID(product[0].UOMMID());
                                                summaries[j].ProductUOMSID(product[0].UOMSID());
                                                summaries[j].ProductConversionL(product[0].ConversionL());
                                                summaries[j].ProductConversionM(product[0].ConversionM());
                                                summaries[j].ProductConversionS(product[0].ConversionS());

                                                summaries[j].QtyOpnameConvGood('0/0/0');
                                                summaries[j].QtyOpnameConvHold('0/0/0');
                                                summaries[j].QtyOpnameConvBad('0/0/0');

                                                summaries[j].QtyOpnameGood(0);
                                                summaries[j].QtyOpnameHold(0);
                                                summaries[j].QtyOpnameBad(0);

                                                summaries[j].QtyOnHandGood(result2[i].QtyOnHandGood());
                                                summaries[j].QtyOnHandHold(result2[i].QtyOnHandHold());
                                                summaries[j].QtyOnHandBad(result2[i].QtyOnHandBad());

                                                summaries[j].ChildDetails([]);
                                            } else {
                                                summaries[j].QtyOnHandGood(summaries[j].QtyOnHandGood() + result2[i].QtyOnHandGood());
                                                summaries[j].QtyOnHandHold(summaries[j].QtyOnHandHold() + result2[i].QtyOnHandHold());
                                                summaries[j].QtyOnHandBad(summaries[j].QtyOnHandBad() + result2[i].QtyOnHandBad());
                                            }

                                            var details = new Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel();

                                            details.ProductID(product[0].ID());
                                            details.ProductCode(product[0].Code());
                                            details.Product(product[0].Product());
                                            details.ProductUOMLID(product[0].UOMLID());
                                            details.ProductUOMMID(product[0].UOMMID());
                                            details.ProductUOMSID(product[0].UOMSID());
                                            details.ProductConversionL(product[0].ConversionL());
                                            details.ProductConversionM(product[0].ConversionM());
                                            details.ProductConversionS(product[0].ConversionS());

                                            details.ProductLotID(result2[i].ProductLotID());
                                            details.ProductLotCode(result2[i].ProductLotCode());

                                            details.QtyOpnameConvGood('0/0/0');
                                            details.QtyOpnameConvHold('0/0/0');
                                            details.QtyOpnameConvBad('0/0/0');

                                            details.QtyOpnameGood(0);
                                            details.QtyOpnameHold(0);
                                            details.QtyOpnameBad(0);

                                            details.QtyOnHandGood(result2[i].QtyOnHandGood());
                                            details.QtyOnHandHold(result2[i].QtyOnHandHold());
                                            details.QtyOnHandBad(result2[i].QtyOnHandBad());

                                            summaries[j].ChildDetails().push(details);
                                        }

                                        data.ChildSummaries(summaries);
                                        summaryDataGrid.option('dataSource',
                                            createSummaryArrayDataSource(data.ChildSummaries()));

                                        hideLoadingPanel();
                                    })
                                    .fail(function (error) {
                                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');

                                        data.ChildSummaries([]);
                                        summaryDataGrid.option('dataSource',
                                            createSummaryArrayDataSource(data.ChildSummaries()));

                                        hideLoadingPanel();
                                    });
                            })
                            .fail(function (error) {
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');

                                data.ChildSummaries([]);
                                summaryDataGrid.option('dataSource',
                                    createSummaryArrayDataSource(data.ChildSummaries()));

                                hideLoadingPanel();
                            });
                    }

                    preventChangeWarehouseID = false;
                }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AttachmentFile',
            label: { text: 'Attachment File' },
            colSpan: 2,
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';
    




    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.events.performDeleteRows = function () {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var dataGrid = productLotPopupEdit.dataGrid();
        var dataSource = dataGrid.option('dataSource');

        var selectedRowsData = dataGrid.getSelectedRowsData();
        var errorMsg = '';
        var deletedRowKeys = [];

        for (var i = 0; i < selectedRowsData.length; i++) {
            var data = selectedRowsData[i];
            if (DXUtility.getValue(data, productLotColumns.qtyOnHandColumn) > 0) {
                if (errorMsg == '')
                    errorMsg = 'Following product lot code cannot be deleted due to the On Hand Qty (Pcs) is greater than 0: ';
                else
                    errorMsg += ', ';

                errorMsg += DXUtility.getValue(data, 'ProductLotCode');
                continue;
            }

            deletedRowKeys.push({
                ProductID: DXUtility.getValue(data, 'ProductID'),
                ProductLotID: DXUtility.getValue(data, 'ProductLotID'),
            });
        }

        for (var i = 0; i < deletedRowKeys.length; i++) {
            dataSource.store().remove(deletedRowKeys[i])
                .done(function (result) {
                    if (i >= (deletedRowKeys.length - 1))
                        dataSource.load().done(function (result) { dataGrid.refresh(); });
                })
                .fail(function (error) {
                    if (i >= (deletedRowKeys.length - 1))
                        dataSource.load().done(function (result) { dataGrid.refresh(); });
                });
        }

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Delete Product Lot');
        }
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        info.data[productLotColumns.qtyOpnameColumn] = 0;
        info.data[productLotColumns.qtyOpnameConvColumn] = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAll,
                            filter: ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }],
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLot',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vStockOpnames_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHandGood', item.QtyOnHandGood());
                                    DXUtility.setValue(e.row.data, 'QtyOnHandHold', item.QtyOnHandHold());
                                    DXUtility.setValue(e.row.data, 'QtyOnHandBad', item.QtyOnHandBad());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyOpnameConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, productLotColumns.qtyOpnameColumn, conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, productLotColumns.qtyConvLColumn, conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, productLotColumns.qtyConvMColumn, conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, productLotColumns.qtyConvSColumn, conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.name == 'QtyOpnameConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    //onKeyDown: DXUtility.preventInputCharacters,
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    onValueChanged: function (ea) {
                        // commented by Asep 
                        //if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                        //    ea.value = '';
                        //}

                        // commented by Asep
                        //// will convert the units to quantity (in the input is in units)
                        //if (ea.value.indexOf('/') > -1) {
                        //    var qty = 0;
                        //    var units = ea.value.split('/');
                        //    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                        //        if (units[unitIndex] == '')
                        //            break;
                        //        var value = parseInt(units[unitIndex]);
                        //        if (unitIndex == 0)
                        //            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                        //        else if (unitIndex == 1) {
                        //            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                        //                qty += value;
                        //            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                        //                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                        //        }
                        //        else if (unitIndex == 2)
                        //            qty += value;
                        //    }
                        //    ea.value = qty + "";
                        //    DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyOpname'), qty);
                        //}

                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyOpname'), conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyConvL'), conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyConvM'), conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyOpnameConv', 'QtyConvS'), conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            productLotColumns.qtyConvLColumn,
            productLotColumns.qtyConvMColumn,
            productLotColumns.qtyConvSColumn,
            productLotColumns.qtyOpnameConvColumn,
            productLotColumns.qtyOpnameColumn
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoving = function (info) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (info.data[productLotColumns.qtyOnHandColumn]() > 0) {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                'Deleting product lot is not allowed when Qty On Hand (Pcs) is greater than 0.'), 'Delete Product Lot Failed');
            info.cancel = true;
        }
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, productLotColumns.qtyOnHandColumn);
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, productLotColumns.qtyOnHandColumn);

        var qtyOpname = DXUtility.getValue(e.newData, productLotColumns.qtyOpnameColumn);
        if (qtyOpname == undefined)
            qtyOpname = DXUtility.getValue(e.oldData, productLotColumns.qtyOpnameColumn);

        if ((qtyOnHand == 0) && (qtyOpname <= 0)) {
            e.errorText = 'Opname Qty must be greater than 0 when On Hand Qty is 0.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyOpnameConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyOpnameConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
            var productLotColumns = getProductLotColumns(itemStatusID);

            CommonUtility.updateProductLotEditingSummary(options,
                productLotColumns.qtyOpnameConvColumn,
                productLotColumns.qtyOpnameColumn);
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        name: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '180px', allowEditing: false,
        dataType: 'number'
    }, {
        name: 'QtyOpnameConv', caption: 'Opname Qty (L/M/S)', width: '180px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyOpname',
            label: { text: 'Opname Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOpnameConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];



    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_opname_32px.png',

        dataSource_vStockOpnameDetails: dataSource_vStockOpnameDetails,
        dataSource_vStockOpnameSummary: dataSource_vStockOpnameSummary,
        dataSource_vStockOnHandAll: dataSource_vStockOnHandAll,
        dataSource_vStockOnHandAllByProduct: dataSource_vStockOnHandAllByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        stockOpnameSummaryDataGrid: stockOpnameSummaryDataGrid,
        stockOpnamePrint: stockOpnamePrint,
        stockOpnamePost: stockOpnamePost,
        stockOpnameDiscard: stockOpnameDiscard,
        stockOpnameSaveAsDraftAndNew: stockOpnameSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vStockReceives = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevStockReceivesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vStockReceives');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vStockReceives.off('modified', handlevStockReceivesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockReceives,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockReceiveViewModel(item); }
    });


    Dismoyo_Ciptoning_Client.DB.vStockReceives.on('modified', handlevStockReceivesModification);



    var dataSource_vStockReceiveDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockReceiveDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockReceiveDetailsViewModel(item); }
    });

    var dataSource_vStockReceiveSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockReceiveSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAll;
    var dataSource_vStockOnHandAllByProduct;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-12-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else
            isLotNumberEntryRequired = undefined;

        var warehouseDataSource = DataUtility.GetLookupWarehouseDataSource([
            ['SiteID', '=', siteID], 'and',
            ['TypeID', '=', 1] // Main warehouse only
        ]);

        form.getEditor('WarehouseID').option('value', null);
        form.getEditor('WarehouseID').option('dataSource', []);
        warehouseDataSource.load()
            .done(function (result) {
                form.getEditor('WarehouseID').option('dataSource', warehouseDataSource);
            });
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            stockReceiveSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            stockReceiveSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummariesArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            stockReceiveSummaryDataGrid().option('dataSource').store(),
            'vStockReceiveSummaryViewModel',
            summary
        );
    }

    function createSummaryArrayDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vStockReceiveSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyReceiveConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyReceiveConvColumn]()));
        commands.append('&nbsp;');

        if (isLotNumberEntryRequired) {
            var column = qtyReceiveConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyReceiveConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed) {
        var option = stockReceiveSummaryDataGrid().option('editing');
        var selection = stockReceiveSummaryDataGrid().option('selection');

        selection.mode = (allowed) ? 'multiple' : 'none';

        //option.allowAdding = allowed;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed;
        stockReceiveSummaryDataGrid().option('editing', option);
        stockReceiveSummaryDataGrid().option('selection', selection);
        stockReceiveSummaryNewRow().option('disabled', !allowed);
        stockReceiveSummaryDeleteRows().option('disabled', true);
        stockReceiveSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vStockReceives.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vStockReceiveViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vStockReceiveViewModel();
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Stock Receival');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var disabled = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            data.TerritoryID(user.TerritoryID());
            data.RegionID(user.RegionID());
            data.AreaID(user.AreaID());
            data.SiteID(user.SiteID());
            data.SiteCode(user.SiteCode());
            data.CompanyID(user.CompanyID());
            data.Company(user.Company());

            documentCode = previewDocumentCode(data.SiteCode());
        } else {
            summaries = data.ChildSummaries();
            if ((data.DocumentStatusID() == 1) && !isLotNumberEntryRequired) { // Draft
                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3)) { // Posted or Discarded
                disabled = true;
            }
        }

        setSummaryDataGridEditing(!disabled);

        stockReceivePost().option('disabled', newData || disabled);
        stockReceiveDiscard().option('disabled', newData || disabled);
        stockReceiveSaveAsDraftAndNew().option('disabled', disabled);
        commonPopupEdit.ok().option('disabled', disabled);

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.TerritoryID());
            form.getEditor('RegionID').option('value', data.RegionID());
            form.getEditor('AreaID').option('value', data.AreaID());
            form.getEditor('SiteID').option('value', data.SiteID());
            form.getEditor('Company').option('value', data.Company());

            form.getEditor('TerritoryID').option('readOnly', disabled);
            form.getEditor('RegionID').option('readOnly', disabled);
            form.getEditor('AreaID').option('readOnly', disabled);
            form.getEditor('SiteID').option('readOnly', disabled);
        }

        updateSiteChildEditor(form, data.SiteID());

        form.getEditor('PrincipalName').option('value', 'PT. Amerta Indah Otsuka');

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('WarehouseID').option('value', data.WarehouseID());
        form.getEditor('PIC').option('value', data.PIC());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());

        var fileUploader = stockReceiveEditDataAttachmentFile();
        CommonUtility.createEditDataAttachmentFileDownloader('vStockReceives', fileUploader,
            'StockReceives', data.AttachmentFile());
        fileUploader.option('value', null);

        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        form.getEditor('TransactionDate').option('readOnly', disabled);
        form.getEditor('WarehouseID').option('readOnly', disabled);
        form.getEditor('PIC').option('readOnly', disabled);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);
        
        var fileUploaderInput = $('.dx-fileuploader-input-wrapper');
        if (disabled)
            fileUploaderInput.hide();
        else
            fileUploaderInput.show();

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = stockReceiveSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryArrayDataSource(data.ChildSummaries()));
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = stockReceiveSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length < 1) {
                errorMsg = 'Please specify at least one item in Receival Details.';
                isValid = false;
            }
        }

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyReceive = 0;
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];
                    sumQtyReceive += details.QtyReceive();
                }

                if (summary.QtyReceive() != sumQtyReceive) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Receival Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }
                
        if (isValid && ($('.dx-fileuploader-button.dx-fileuploader-upload-button.dx-widget.dx-button-has-icon.dx-button.dx-button-normal').length > 0)) {
            errorMsg = 'You have selected an attachment file. Please upload or cancel the attachment file.';
            isValid = false;
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.WarehouseID(form.getEditor('WarehouseID').option('value'));
            data.PIC(form.getEditor('PIC').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            var fileUploader = stockReceiveEditDataAttachmentFile();
            data.AttachmentFile((fileUploader.option('values').length > 0) ? fileUploader.fileName : null);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.Qty = details.QtyReceive * -1;
                }

                summary.Qty = summary.QtyReceive * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyReceiveColumn = 'QtyReceive' + itemStatusName;
        var qtyReceiveConvColumn = 'QtyReceiveConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyReceiveColumn: qtyReceiveColumn,
            qtyReceiveConvColumn: qtyReceiveConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data.QtyOnHand());
        form.getEditor('QtyReceiveConv').option('value', data.QtyReceiveConv());
        form.getEditor('QtyReceive').option('value', data.QtyReceive());

        data = validateSummariesArrayStore(data);

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vStockReceiveDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            ko.toJS(data.ChildDetails()));

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = stockReceiveSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAll, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    if (dataSourceItems[i].ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(dataSourceItems[i].ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length > 0) {
                            var item = items[0];
                            item.QtyConvL(DXUtility.getValue(details, 'QtyConvL'));
                            item.QtyConvM(DXUtility.getValue(details, 'QtyConvM'));
                            item.QtyConvS(DXUtility.getValue(details, 'QtyConvS'));
                            item.QtyReceive(DXUtility.getValue(details, 'QtyReceive'));
                            item.QtyReceiveConv(DXUtility.getValue(details, 'QtyReceiveConv'));
                        } else
                            dataSourceItems[i].ChildDetails().push(
                                new Dismoyo_Ciptoning_Client.vStockReceiveDetailsViewModel(details));

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyReceive').option('value'),
            'Receive',
            'vStockReceiveDetailsViewModel',
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyReceiveConv',
            'QtyReceive',
            false)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            stockReceiveSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAll.length == 0) && (dataSource_vStockOnHandAllByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vProducts,
                select: [
                    'ID',
                    'Code',
                    'Product',
                    'UOMLID',
                    'UOMMID',
                    'UOMSID',
                    'ConversionL',
                    'ConversionM',
                    'ConversionS'
                ],
                sort: ['ID'],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
            }).load()
            .done(function (result) {
                var productDataSource = result;
                var warehouseID = form.getEditor('WarehouseID').option('value');

                var dataSource = new DevExpress.data.DataSource({
                    store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAlls,
                    select: [
                        'ProductID',
                        'ProductLotID',
                        'ProductLotCode',
                        'ProductLot',
                        'ProductLotExpiredDate',
                        'QtyOnHandGood'
                    ],
                    filter: [
                        ['WarehouseID', '=', warehouseID]
                    ],
                    sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                    paginate: false,
                    map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(item); }
                });

                dataSource.load()
                    .done(function (result2) {
                        var product = null;
                        var stockOnHandAll = [];
                        var stockOnHandAllByProduct = [];
                        for (var i = 0; i < result2.length; i++) {
                            stockOnHandAll.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));

                            var j = stockOnHandAllByProduct.length - 1;
                            var productID = result2[i].ProductID();
                            if ((i == 0) || (stockOnHandAllByProduct[j].ProductID() != productID)) {
                                stockOnHandAllByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel(result2[i].toJS()));
                                j++;
                                product = $.grep(result, function (e) { return (e.ID() == productID); });
                            } else {
                                stockOnHandAllByProduct[j].QtyOnHandGood(stockOnHandAllByProduct[j].QtyOnHandGood() +
                                    result2[i].QtyOnHandGood());
                                stockOnHandAllByProduct[j].QtyOnHandHold(stockOnHandAllByProduct[j].QtyOnHandHold() +
                                    result2[i].QtyOnHandHold());
                                stockOnHandAllByProduct[j].QtyOnHandBad(stockOnHandAllByProduct[j].QtyOnHandBad() +
                                    result2[i].QtyOnHandBad());
                            }

                            stockOnHandAll[i].ProductCode(product[0].Code());
                            stockOnHandAll[i].Product(product[0].Product());
                            stockOnHandAll[i].ProductUOMLID(product[0].UOMLID());
                            stockOnHandAll[i].ProductUOMMID(product[0].UOMMID());
                            stockOnHandAll[i].ProductUOMSID(product[0].UOMSID());
                            stockOnHandAll[i].ProductConversionL(product[0].ConversionL());
                            stockOnHandAll[i].ProductConversionM(product[0].ConversionM());
                            stockOnHandAll[i].ProductConversionS(product[0].ConversionS());

                            stockOnHandAllByProduct[j].ProductCode(product[0].Code());
                            stockOnHandAllByProduct[j].Product(product[0].Product());
                            stockOnHandAllByProduct[j].ProductUOMLID(product[0].UOMLID());
                            stockOnHandAllByProduct[j].ProductUOMMID(product[0].UOMMID());
                            stockOnHandAllByProduct[j].ProductUOMSID(product[0].UOMSID());
                            stockOnHandAllByProduct[j].ProductConversionL(product[0].ConversionL());
                            stockOnHandAllByProduct[j].ProductConversionM(product[0].ConversionM());
                            stockOnHandAllByProduct[j].ProductConversionS(product[0].ConversionS());
                        }

                        dataSource_vStockOnHandAll = stockOnHandAll;
                        dataSource_vStockOnHandAllByProduct = stockOnHandAllByProduct;

                        productLotLoaded();

                        hideLoadingPanel();
                    })
                    .fail(function (error) {
                        DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                        hideLoadingPanel();
                    });
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                hideLoadingPanel();
            });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Receival',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // PIC
        value = form.getEditor('PIC').option('value');
        DXUtility.addFilterExpression(filterExpr, 'PIC', 'contains', value, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockReceives.AddNewStockReceive');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockReceives.EditStockReceive');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vStockReceives_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                var allowUpdating = user.isAuthorized('StockReceives.EditStockReceive');                
                if (allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('StockReceives.EditStockReceive');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'Warehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px'
    }, {
        dataField: 'PIC', caption: 'PIC', width: '180px'
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px'
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var stockReceiveEditDataAttachmentFile = function () { return DXUtility.getDXInstance(null, '#vStockReceives_editDataAttachmentFile', 'dxFileUploader'); }

    var stockReceiveSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vStockReceives_stockReceiveSummaryDataGrid', 'dxDataGrid'); }

    var stockReceivePost = function () { return DXUtility.getDXInstance(null, '#vStockReceives_stockReceivePost', 'dxButton'); }
    var stockReceiveDiscard = function () { return DXUtility.getDXInstance(null, '#vStockReceives_stockReceiveDiscard', 'dxButton'); }
    var stockReceiveSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vStockReceives_stockReceiveSaveAsDraftAndNew', 'dxButton'); }
    var stockReceiveSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vStockReceives_stockReceiveSummaryNewRow', 'dxButton'); }
    var stockReceiveSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vStockReceives_stockReceiveSummaryDeleteRows', 'dxButton'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Receival Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vStockReceives_stockReceiveSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        stockReceiveSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Receival Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vStockReceives_stockReceiveSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(stockReceiveSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vStockReceives_stockReceiveSummaryDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            selection: {
                mode: 'multiple',
                allowSelectAll: true
            },
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onInitNewRow: function (info) {
                info.data.QtyReceive = 0;
                info.data.QtyReceiveConv = '0/0/0';
            },
            onSelectionChanged: function (e) {
                stockReceiveSummaryDeleteRows().option('disabled', !e.selectedRowsData.length);
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAllByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '712px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vStockReceives_productIDLookup', ea.element, 1); // Good
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, 1); // Good
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item.QtyOnHand());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversion = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyReceiveConv'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyReceive', conversion.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(
                                e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if (e.dataField == 'QtyReceiveConv') {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                stockReceiveSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                                    ea.value = '';
                                }

                                // will convert the units to quantity (in the input is in units)
                                if (ea.value.indexOf('/') > -1) {
                                    var qty = 0;
                                    var units = ea.value.split('/');
                                    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                                        if (units[unitIndex] == '')
                                            break;
                                        var value = parseInt(units[unitIndex]);
                                        if (unitIndex == 0)
                                            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                                        else if (unitIndex == 1) {
                                            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                                                qty += value;
                                            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                                                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                                        }
                                        else if (unitIndex == 2)
                                            qty += value;
                                    }
                                    ea.value = qty + "";
                                    DXUtility.setValue(e.row.data, e.dataField.replace('QtyReceiveConv', 'QtyReceive'), qty);
                                }

                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                //DXUtility.setValue(e.row.data, e.dataField.replace('QtyReceiveConv', 'QtyReceive'), conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyReceiveConv', 'QtyConvL'), conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyReceiveConv', 'QtyConvM'), conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyReceiveConv', 'QtyConvS'), conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                stockReceiveSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                stockReceiveSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyReceiveConv) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyReceiveConv,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvL = conversion.qtyConvL;
                    info.newData.QtyConvM = conversion.qtyConvM;
                    info.newData.QtyConvS = conversion.qtyConvS;
                    info.newData.QtyReceive = conversion.qtyTransaction;
                }

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyReceive = DXUtility.getValue(e.newData, 'QtyReceive');
                if (qtyReceive == undefined)
                    qtyReceive = DXUtility.getValue(e.oldData, 'QtyReceive');

                if (qtyReceive <= 0) {
                    e.errorText = 'Receival Qty must be greater than 0.';
                    e.isValid = false;
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(stockReceiveSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (stockReceiveSummaryDataGrid().option('selection').mode == 'none') ? false : true;

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '150px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'QtyReceiveConv', caption: 'Receival Qty (L/M/S)', width: '180px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyReceiveConv', 1)); // Good
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPost = $('<div id="vStockReceives_stockReceivePost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vStockReceives_stockReceiveDiscard" style="margin-right: 16px;">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vStockReceives_stockReceiveSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.formOptions.customizeItem = function (item) {
        if (item.dataField == 'AttachmentFile') {
            item.template = function (data, itemElement) {
                itemElement.append(CommonUtility.createEditDataAttachmentFileUploader('vStockReceives', 'StockReceives'));
            }
        }
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var company = null;

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        company = e.selectedItem.Company();
                    }

                    form.getEditor('Company').option('value', company);

                    updateSiteChildEditor(form, e.value);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Receival',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    dataSource_vStockOnHandAll = [];
                    dataSource_vStockOnHandAllByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = stockReceiveSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryArrayDataSource(data.ChildSummaries()));
                    }
                }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'PrincipalName',
            label: { text: 'Principal' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 3
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxLength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AttachmentFile',
            label: { text: 'Attachment File' },
            colSpan: 2,
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        info.data.QtyReceive = 0;
        info.data.QtyReceiveConv = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAll,
                            filter: ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '602px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vStockReceives_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyReceiveConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, 'QtyReceive', conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.dataField == 'QtyReceiveConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    //onKeyDown: DXUtility.preventInputCharacters,
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    onValueChanged: function (ea) {
                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, 'QtyReceive', conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, 'QtyConvL', conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, 'QtyConvM', conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, 'QtyConvS', conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vStockReceiveDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            'QtyConvL',
            'QtyConvM',
            'QtyConvS',
            'QtyReceiveConv',
            'QtyReceive'
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyReceive = DXUtility.getValue(e.newData, 'QtyReceive');
        if (qtyReceive == undefined)
            qtyReceive = DXUtility.getValue(e.oldData, 'QtyReceive');

        if (qtyReceive <= 0) {
            e.errorText = 'Receival Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyReceiveConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyReceiveConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            CommonUtility.updateProductLotEditingSummary(options,
                'QtyReceiveConv',
                'QtyReceive');
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        dataField: 'QtyReceiveConv', caption: 'Receival Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyReceive',
            label: { text: 'Receival Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyReceiveConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];



    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_receive_32px.png',

        dataSource_vStockReceiveDetails: dataSource_vStockReceiveDetails,
        dataSource_vStockReceiveSummary: dataSource_vStockReceiveSummary,
        dataSource_vStockOnHandAll: dataSource_vStockOnHandAll,
        dataSource_vStockOnHandAllByProduct: dataSource_vStockOnHandAllByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        productLotPopupEdit: productLotPopupEdit,

        stockReceiveSummaryDataGrid: stockReceiveSummaryDataGrid,
        stockReceivePost: stockReceivePost,
        stockReceiveDiscard: stockReceiveDiscard,
        stockReceiveSaveAsDraftAndNew: stockReceiveSaveAsDraftAndNew,
        isLotNumberEntryRequired: isLotNumberEntryRequired
    };
};

Dismoyo_Ciptoning_Client.vStockTransfers = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;
    var isDataGridRefreshRequired;
    var isLotNumberEntryRequired;

    function handlevStockTransfersModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vStockTransfers');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['SourceTerritoryID', '=', user.TerritoryID()], 'and',
                ['SourceRegionID', '=', user.RegionID()], 'and',
                ['SourceAreaID', '=', user.AreaID()], 'and',
                ['SourceCompanyID', '=', user.CompanyID()], 'and',
                ['SourceSiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vStockTransfers.off('modified', handlevStockTransfersModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockTransfers,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockTransferViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vStockTransfers.on('modified', handlevStockTransfersModification);



    var dataSource_vStockTransferDetails = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockTransferDetails,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockTransferDetailsViewModel(item); }
    });

    var dataSource_vStockTransferSummary = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockTransferSummaries,
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel(item); }
    });

    var dataSource_vStockOnHandAvailable;
    var dataSource_vStockOnHandAvailableByProduct;

    var conversionValidationRule = {
        type: 'pattern',
        pattern: '(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)',
        message: 'Format must be L/M/S or M/S or S.'
    };

    function previewDocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-08-(Auto Generated)';
    }

    function previewDODocumentCode(siteCode) {
        return ((siteCode) ? siteCode : '(Site Code)') + '-YY-10-(Auto Generated)';
    }

    function updateSiteChildEditor(form, siteID, companyID) {
        if (siteID) {
            Dismoyo_Ciptoning_Client.DB.vSites.byKey(siteID)
                .done(function (result) {
                    isLotNumberEntryRequired = result.IsLotNumberEntryRequired;
                });
        } else {
            siteID = null;
            isLotNumberEntryRequired = undefined;
        }

        var sourceWarehouseDataSource = DataUtility.GetLookupWarehouseDataSource(['SiteID', '=', siteID]);

        form.getEditor('SourceWarehouseID').option('value', null);
        form.getEditor('SourceWarehouseID').option('dataSource', []);
        sourceWarehouseDataSource.load()
            .done(function (result) {
                form.getEditor('SourceWarehouseID').option('dataSource', sourceWarehouseDataSource);
            });

        var destinationSiteDataSource = DataUtility.GetLookupSiteDataSource(['CompanyID', '=', companyID]);

        form.getEditor('DestinationSiteID').option('value', null);
        form.getEditor('DestinationSiteID').option('dataSource', []);
        destinationSiteDataSource.load()
            .done(function (result) {
                form.getEditor('DestinationSiteID').option('dataSource', destinationSiteDataSource);
            });
    }


    function getValueFromSystemParameter(value) {
        var sysParam = Dismoyo_Ciptoning_Client.LocalStore.vSystemParameters.dataByFilter(['ID', '=', value]);
        if (sysParam.length > 0)
            return sysParam[0].Value();

        return null;
    }
    
    function validateCreatedBySFA(createdByUserName) {
        var sfaUserName = getValueFromSystemParameter('User.SFAUserName');
        return ((createdByUserName != undefined) && (createdByUserName != null) &&
            (createdByUserName.toLowerCase() == sfaUserName.toLowerCase()));
    }


    function updateSummariesArrayStore(summary) {
        CommonUtility.updateSummariesArrayStore(
            stockTransferSummaryDataGrid().option('dataSource').store(),
            summary
        );
    }

    function updateDeferSummariesArrayStore(productID, summary) {
        CommonUtility.updateDeferSummariesArrayStore(
            stockTransferSummaryDataGrid().option('dataSource').store(),
            productID,
            summary
        );
    }

    function validateSummariesArrayStore(summary) {
        return CommonUtility.validateSummaryArrayStore(
            stockTransferSummaryDataGrid().option('dataSource').store(),
            'vStockTransferSummaryViewModel',
            summary
        );
    }

    function createSummaryArrayDataSource(summaries) {
        return CommonUtility.createArrayDataSource(
            'vStockTransferSummaryViewModel',
            ['ProductID'],
            summaries
        );
    }

    function createProductLotEditCommands(data, qtyTransferConvColumn, itemStatusID) {
        var commands = $('<div class="dx-command-edit" style="text-align: right; padding-right: 5px;">');

        commands.append($('<a style="color: inherit;">').text(data[qtyTransferConvColumn]()));
        commands.append('&nbsp;');
        if (isLotNumberEntryRequired) {
            var column = qtyTransferConvColumn.replace("Conv", "");
            var qty = data[column]();
            var childDetails = data["ChildDetails"]();
            var total = 0;
            for (var o in childDetails) {
                total += childDetails[o][column]();
            }

            commands.append($('<a class="dx-link dxcustom-linkbutton dx-icon-icons8-view-details" title="Edit Lot Number">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a><span id="LotMark_' + data["ProductID"]() + '_' + qtyTransferConvColumn + '" class="dx-icon-overflow ' + (total == qty ? 'hidden' : '') + '" style="color:red; font-size: 14px; margin-left: -6px;"></span>').on('dxclick', function () {
                downloadProductLot(function () {
                    openProductLotEditing(data, itemStatusID); // Open product lot popup entry
                });
            }));
            commands.append('&nbsp;');
        }

        return commands;
    }

    function setSummaryDataGridEditing(allowed, createdBySFA) {
        var option = stockTransferSummaryDataGrid().option('editing');
        var selection = stockTransferSummaryDataGrid().option('selection');

        selection.mode = (allowed && !createdBySFA) ? 'multiple' : 'none';

        //option.allowAdding = allowed && !createdBySFA;
        option.allowUpdating = allowed;
        option.allowDeleting = allowed && !createdBySFA;
        stockTransferSummaryDataGrid().option('editing', option);
        stockTransferSummaryDataGrid().option('selection', selection);
        stockTransferSummaryNewRow().option('disabled', !(allowed && !createdBySFA));
        stockTransferSummaryDeleteRows().option('disabled', true);
        stockTransferSummaryDataGrid().repaint();
    }

    function openSelectedEditing(documentID, refreshRequired) {
        showLoadingPanel();

        Dismoyo_Ciptoning_Client.DB.vStockTransfers.byKey(
            documentID, { expand: ['ChildSummaries/ChildDetails'] })
            .done(function (result) {
                hideLoadingPanel();

                isDataGridRefreshRequired = refreshRequired;
                openEditing(new Dismoyo_Ciptoning_Client.vStockTransferViewModel(result));
            })
            .fail(function (error) {
                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to load selected data.'), 'Load Failed');
                hideLoadingPanel();
            });
    }

    function openEditing(data) {
        var newData = false;
        if (!data) {
            data = new Dismoyo_Ciptoning_Client.vStockTransferViewModel();
            data.DocumentStatusID(null);
            newData = true;
        }

        commonPopupEdit.popupEditData(data);

        commonPopupEdit.popupEdit().option('title', ((newData) ? 'New' : 'Edit') + ' Stock Transfer');
        commonPopupEdit.popupEditOptions.editingKey = data.DocumentID();
        commonPopupEdit.popupEditOptions.visible(true);
        commonPopupEdit.popupContent().scrollTo(0);

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var form = commonPopupEdit.form();
        DXUtility.resetFormValidation(form);

        // Disable/enable operation buttons
        var documentCode = data.DocumentCode();
        var doDocumentCode = data.DODocumentCode();
        var disabled = false;
        var createdBySFA = false;
        var summaries = [];

        isLotNumberEntryRequired = data.IsSourceSiteLotNumberEntryRequired();

        if (newData) {
            data.DocumentID(new DevExpress.data.Guid());
            data.DocumentStatusID(null);

            data.SourceTerritoryID(user.TerritoryID());
            data.SourceRegionID(user.RegionID());
            data.SourceAreaID(user.AreaID());
            data.SourceSiteID(user.SiteID());
            data.SourceSiteCode(user.SiteCode());
            data.SourceCompanyID(user.CompanyID());
            data.SourceCompany(user.Company());

            documentCode = previewDocumentCode(data.SourceSiteCode());
            doDocumentCode = previewDODocumentCode(data.SourceSiteCode());
        } else {
            summaries = data.ChildSummaries();
            if ((data.DocumentStatusID() == 1) && !isLotNumberEntryRequired) { // Draft
                createdBySFA = validateCreatedBySFA(data.CreatedByUserName());

                // Check whether it required download product lot or not to keep performance.
                var downloadSummaries = [];
                var indexSummaries = 0;

                for (var i = 0; i < summaries.length; i++) {
                    var childDetails = summaries[i].ChildDetails();
                    var notDummy = 0;

                    for (var j = 0; j < childDetails.length; j++) {
                        if (childDetails[j].ProductLotCode().indexOf("DUMMY") < 0) {
                            notDummy++;
                        }
                    }

                    if (notDummy > 0) {
                        downloadSummaries[indexSummaries] = summaries[i];
                        indexSummaries++;
                    }
                }

                if (downloadSummaries.length > 0) {
                    downloadProductLot(function () {
                        for (var i = 0; i < downloadSummaries.length; i++) {
                            var e = {
                                data: downloadSummaries[i].toJS()
                            };
                            addDummyData(e, downloadSummaries);
                        }
                    });
                }
            } else if ((data.DocumentStatusID() == 2) || (data.DocumentStatusID() == 3)) // Posted or Discarded
                disabled = true;
        }

        setSummaryDataGridEditing(!disabled, createdBySFA);

        stockTransferPrintDO().option('disabled', newData);
        stockTransferPost().option('disabled', newData || disabled);
        stockTransferDiscard().option('disabled', newData || disabled);
        stockTransferSaveAsDraftAndNew().option('disabled', disabled || createdBySFA);
        commonPopupEdit.ok().option('disabled', disabled || createdBySFA);

        // Set editor values
        if (form.itemOption('Organization').visible) {
            form.getEditor('TerritoryID').option('value', data.SourceTerritoryID());
            form.getEditor('RegionID').option('value', data.SourceRegionID());
            form.getEditor('AreaID').option('value', data.SourceAreaID());
            form.getEditor('SiteID').option('value', data.SourceSiteID());
            form.getEditor('Company').option('value', data.SourceCompany());

            form.getEditor('TerritoryID').option('readOnly', disabled || createdBySFA);
            form.getEditor('RegionID').option('readOnly', disabled || createdBySFA);
            form.getEditor('AreaID').option('readOnly', disabled || createdBySFA);
            form.getEditor('SiteID').option('readOnly', disabled || createdBySFA);
        }

        updateSiteChildEditor(form, data.SourceSiteID(), data.SourceCompanyID());

        form.getEditor('DocumentCode').option('value', documentCode);
        form.getEditor('TransactionDate').option('value', data.TransactionDate());
        form.getEditor('SourceWarehouseID').option('value', data.SourceWarehouseID());
        form.getEditor('SourcePIC').option('value', data.SourcePIC());
        form.getEditor('DestinationSiteID').option('value', data.DestinationSiteID());
        form.getEditor('DestinationWarehouseID').option('value', data.DestinationWarehouseID());
        form.getEditor('DestinationPIC').option('value', data.DestinationPIC());
        form.getEditor('ReferenceNumber').option('value', data.ReferenceNumber());

        var fileUploader = stockTransferEditDataAttachmentFile();
        CommonUtility.createEditDataAttachmentFileDownloader('vStockTransfers', fileUploader,
            'StockTransfers', data.AttachmentFile());
        fileUploader.option('value', null);

        form.getEditor('DocumentStatusID').option('value', data.DocumentStatusID());

        form.getEditor('DODocumentCode').option('value', doDocumentCode);
        form.getEditor('DOShipmentDate').option('value', data.DOShipmentDate());
        form.getEditor('DOReceivedDate').option('value', data.DOReceivedDate());
        form.getEditor('DOPrintedCount').option('value', data.DOPrintedCount());
        form.getEditor('DOLastPrintedDate').option('value', data.DOLastPrintedDate());

        form.getEditor('TransactionDate').option('readOnly', disabled || createdBySFA);
        form.getEditor('SourceWarehouseID').option('readOnly', disabled || createdBySFA);
        form.getEditor('SourcePIC').option('readOnly', disabled);
        form.getEditor('DestinationSiteID').option('readOnly', disabled || createdBySFA);
        form.getEditor('DestinationWarehouseID').option('readOnly', disabled || createdBySFA);
        form.getEditor('DestinationPIC').option('readOnly', disabled || createdBySFA);
        form.getEditor('ReferenceNumber').option('readOnly', disabled);

        form.getEditor('DOShipmentDate').option('readOnly', disabled);
        form.getEditor('DOReceivedDate').option('readOnly', disabled);
        
        var fileUploaderInput = $('.dx-fileuploader-input-wrapper');
        if (disabled)
            fileUploaderInput.hide();
        else
            fileUploaderInput.show();

        var today = new Date();

        if (newData) {
            DXUtility.resetFormValidation(form);

            form.getEditor('TransactionDate').option('value', today);
            form.getEditor('DOShipmentDate').option('value', today);
            //form.getEditor('DOReceivedDate').option('value', today);
        }

        // Set grid datasource for summary including details
        var summaryDataGrid = stockTransferSummaryDataGrid();
        summaryDataGrid.cancelEditData();

        data.ChildSummaries(summaries);
        summaryDataGrid.option('dataSource',
            createSummaryArrayDataSource(data.ChildSummaries()));
    }

    function addDummyData(e, summaries) {
        if (!isLotNumberEntryRequired) {
            var data = commonPopupEdit.popupEditData();
            var summaryDataGrid = stockTransferSummaryDataGrid();
            var dataSourceItems = [];

            if (!summaries) {
                var store = summaryDataGrid.option('dataSource').store();
                for (var i = 0; i < store._array.length; i++)
                    dataSourceItems.push(new Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel(store._array[i]));
            } else {
                for (var i = 0; i < summaries.length; i++)
                    summaries[i].ChildDetails([]);

                dataSourceItems = summaries;
            }

            var details = e.data;

            var productLots = $.grep(dataSource_vStockOnHandAvailable, function (e) {
                return ((e.ProductID() == DXUtility.getValue(details, 'ProductID')) &&
                    (e.ProductLotCode().indexOf('DUMMY') >= 0));
            });

            if (productLots.length > 0) {
                var dummyLot = productLots[0];

                DXUtility.setValue(details, 'ProductLotID', dummyLot.ProductLotID());
                DXUtility.setValue(details, 'ProductLotCode', dummyLot.ProductLotCode());
                DXUtility.setValue(details, 'QtyOnHandGood', dummyLot.QtyOnHandGood());
                DXUtility.setValue(details, 'QtyOnHandHold', dummyLot.QtyOnHandHold());
                DXUtility.setValue(details, 'QtyOnHandBad', dummyLot.QtyOnHandBad());

                for (var i = 0; i < dataSourceItems.length; i++) {
                    var data = dataSourceItems[i];
                    if (data.ProductID() == DXUtility.getValue(details, 'ProductID')) {
                        var items = $.grep(data.ChildDetails(), function (e) {
                            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
                        });

                        if (items.length > 0) {
                            var item = items[0];
                            var qty;

                            qty = DXUtility.getValue(details, 'QtyTransferGood');
                            if (qty != undefined) {
                                item.QtyConvLGood(DXUtility.getValue(details, 'QtyConvLGood'));
                                item.QtyConvMGood(DXUtility.getValue(details, 'QtyConvMGood'));
                                item.QtyConvSGood(DXUtility.getValue(details, 'QtyConvSGood'));
                                item.QtyTransferGood(qty);
                                item.QtyTransferConvGood(DXUtility.getValue(details, 'QtyTransferConvGood'));
                            }

                            qty = DXUtility.getValue(details, 'QtyTransferHold');
                            if (qty != undefined) {
                                item.QtyConvLHold(DXUtility.getValue(details, 'QtyConvLHold'));
                                item.QtyConvMHold(DXUtility.getValue(details, 'QtyConvMHold'));
                                item.QtyConvSHold(DXUtility.getValue(details, 'QtyConvSHold'));
                                item.QtyTransferHold(qty);
                                item.QtyTransferConvHold(DXUtility.getValue(details, 'QtyTransferConvHold'));
                            }

                            qty = DXUtility.getValue(details, 'QtyTransferBad')
                            if (qty != undefined) {
                                item.QtyConvLBad(DXUtility.getValue(details, 'QtyConvLBad'));
                                item.QtyConvMBad(DXUtility.getValue(details, 'QtyConvMBad'));
                                item.QtyConvSBad(DXUtility.getValue(details, 'QtyConvSBad'));
                                item.QtyTransferBad(qty);
                                item.QtyTransferConvBad(DXUtility.getValue(details, 'QtyTransferConvBad'));
                            }
                        } else {
                            if (details.QtyTransferGood == undefined) {
                                DXUtility.setValue(details, 'QtyConvLGood', 0);
                                DXUtility.setValue(details, 'QtyConvMGood', 0);
                                DXUtility.setValue(details, 'QtyConvSGood', 0);
                                DXUtility.setValue(details, 'QtyTransferGood', 0);
                                DXUtility.setValue(details, 'QtyTransferConvGood', '0/0/0');
                            }

                            if (details.QtyTransferHold == undefined) {
                                DXUtility.setValue(details, 'QtyConvLHold', 0);
                                DXUtility.setValue(details, 'QtyConvMHold', 0);
                                DXUtility.setValue(details, 'QtyConvSHold', 0);
                                DXUtility.setValue(details, 'QtyTransferHold', 0);
                                DXUtility.setValue(details, 'QtyTransferConvHold', '0/0/0');
                            }

                            if (details.QtyTransferBad == undefined) {
                                DXUtility.setValue(details, 'QtyConvLBad', 0);
                                DXUtility.setValue(details, 'QtyConvMBad', 0);
                                DXUtility.setValue(details, 'QtyConvSBad', 0);
                                DXUtility.setValue(details, 'QtyTransferBad', 0);
                                DXUtility.setValue(details, 'QtyTransferConvBad', '0/0/0');
                            }

                            dataSourceItems[i].ChildDetails().push(
                                new Dismoyo_Ciptoning_Client.vStockTransferDetailsViewModel(details));
                        }

                        updateSummariesArrayStore(dataSourceItems[i]);
                    }
                }
            } else {
                DevExpress.ui.dialog.alert('DUMMY Lot Number for the selected product is not available.', 'Save Failed');
            }
        }
    }

    function saveEditing(statusID, action) {
        showLoadingPanel();

        var form = commonPopupEdit.form();

        var isValid = form.validate().isValid;
        var errorMsg = (isValid) ? '' : 'Please specify the required fields.';

        var dataGrid = commonGridView.dataGrid();
        var dataSource = dataGrid.option('dataSource');
        var summaryDataSource = stockTransferSummaryDataGrid().option('dataSource');
        var summaries = [];
        for (var i = 0; i < summaryDataSource.store()._array.length; i++)
            summaries.push(new Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel(summaryDataSource.store()._array[i]));

        if (isValid) {
            if (summaries.length <= 0) {
                errorMsg = 'Please specify at least one item in Transfer Details.';
                isValid = false;
            }
        }

        if (isValid) {
            for (var i = 0; i < summaries.length; i++) {
                var summary = summaries[i];
                var sumQtyTransferGood = 0;
                var sumQtyTransferHold = 0;
                var sumQtyTransferBad = 0;
                for (var j = 0; j < summary.ChildDetails().length; j++) {
                    var details = summary.ChildDetails()[j];
                    sumQtyTransferGood += details.QtyTransferGood();
                    sumQtyTransferHold += details.QtyTransferHold();
                    sumQtyTransferBad += details.QtyTransferBad();
                }

                if ((summary.QtyTransferGood() != sumQtyTransferGood) ||
                    (summary.QtyTransferHold() != sumQtyTransferHold) ||
                    (summary.QtyTransferBad() != sumQtyTransferBad)) {
                    if (errorMsg == '')
                        errorMsg = 'Following products quantity of Transfer Details items is not matched: ';
                    else
                        errorMsg += ', ';

                    errorMsg += summary.Product();
                    isValid = false;
                }
            }
        }

        if (isValid && ($('.dx-fileuploader-button.dx-fileuploader-upload-button.dx-widget.dx-button-has-icon.dx-button.dx-button-normal').length > 0)) {
            errorMsg = 'You have selected an attachment file. Please upload or cancel the attachment file.';
            isValid = false;
        }

        var siteID = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID();
        if (form.itemOption('Organization').visible)
            siteID = form.getEditor('SiteID').option('value');

        if (isValid) {
            var data = commonPopupEdit.popupEditData();

            data.TransactionDate(form.getEditor('TransactionDate').option('value'));
            data.SourceWarehouseID(form.getEditor('SourceWarehouseID').option('value'));
            data.SourcePIC(form.getEditor('SourcePIC').option('value'));
            data.DestinationWarehouseID(form.getEditor('DestinationWarehouseID').option('value'));
            data.DestinationPIC(form.getEditor('DestinationPIC').option('value'));
            data.ReferenceNumber(form.getEditor('ReferenceNumber').option('value'));

            data.DOShipmentDate(form.getEditor('DOShipmentDate').option('value'));
            data.DOReceivedDate(form.getEditor('DOReceivedDate').option('value'));
            data.DOPrintedCount(form.getEditor('DOPrintedCount').option('value'));
            data.DOLastPrintedDate(form.getEditor('DOLastPrintedDate').option('value'));

            var fileUploader = stockTransferEditDataAttachmentFile();
            data.AttachmentFile((fileUploader.option('values').length > 0) ? fileUploader.fileName : null);

            data.ChildSummaries(summaries);
            var dataJS = ko.toJS(data);

            if (statusID)
                dataJS.DocumentStatusID = statusID;

            if (!dataJS.DocumentStatusID)
                dataJS.DocumentStatusID = 1; // Draft

            dataJS.TransactionDate = DateTimeUtility.getFirstTimeOfDay(dataJS.TransactionDate);

            dataJS.DOShipmentDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOShipmentDate);
            dataJS.DOReceivedDate = DateTimeUtility.getFirstTimeOfDay(dataJS.DOReceivedDate);

            for (var i = 0; i < dataJS.ChildSummaries.length; i++) {
                var summary = dataJS.ChildSummaries[i];
                summary.DocumentID = dataJS.DocumentID;
                for (var j = 0; j < summary.ChildDetails.length; j++) {
                    var details = summary.ChildDetails[j];

                    details.DocumentID = dataJS.DocumentID;
                    details.QtyGood = details.QtyTransferGood * -1;
                    details.QtyHold = details.QtyTransferHold * -1;
                    details.QtyBad = details.QtyTransferBad * -1;
                }

                summary.QtyGood = summary.QtyTransferGood * -1;
                summary.QtyHold = summary.QtyTransferHold * -1;
                summary.QtyBad = summary.QtyTransferBad * -1;
            }

            dataSource.store().insert(dataJS)
                .done(function (result) {
                    CommonUtility.documentSuccessMessage(result.DocumentStatusID, function () { });
                    isDataGridRefreshRequired = true;

                    switch (action) {
                        case 1: // Close dialog
                            commonPopupEdit.events.performCancel();
                            hideLoadingPanel();
                            break;
                        case 2: // New entry dialog
                            openEditing(null);
                            hideLoadingPanel();
                            break;
                        case 3: // Reload dialog
                            openSelectedEditing(data.DocumentID(), true);
                            break;
                    }
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(error.message, 'Save Failed');
                    hideLoadingPanel();
                });
        } else
            hideLoadingPanel();

        if (errorMsg != '') {
            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(errorMsg), 'Save Failed');
        }
    }

    function printDOEditing(doDocumentID) {
        commonPopupIFrame.popupEdit().option('title', 'Print Delivery Order');
        commonPopupIFrame.popupEditOptions.visible(true);

        var iframe = commonPopupIFrame.iframe();

        commonPopupIFrame.showLoadingPanel();
        iframe.attr('src', Dismoyo_Ciptoning_Client.ReportWebsite.DeliveryOrderReport.url([['DocumentID', '=', doDocumentID]]));
    }

    function getProductLotColumns(itemStatusID) {
        var itemStatusName = null;
        switch (itemStatusID) {
            case 1: itemStatusName = 'Good'; break; // Good
            case 2: itemStatusName = 'Hold'; break; // Hold
            case 3: itemStatusName = 'Bad'; break; // Bad
        }

        var qtyOnHandColumn = 'QtyOnHand' + itemStatusName;
        var qtyConvLColumn = 'QtyConvL' + itemStatusName;
        var qtyConvMColumn = 'QtyConvM' + itemStatusName;
        var qtyConvSColumn = 'QtyConvS' + itemStatusName;
        var qtyTransferColumn = 'QtyTransfer' + itemStatusName;
        var qtyTransferConvColumn = 'QtyTransferConv' + itemStatusName;

        return {
            itemStatusName: itemStatusName,
            qtyOnHandColumn: qtyOnHandColumn,
            qtyConvLColumn: qtyConvLColumn,
            qtyConvMColumn: qtyConvMColumn,
            qtyConvSColumn: qtyConvSColumn,
            qtyTransferColumn: qtyTransferColumn,
            qtyTransferConvColumn: qtyTransferConvColumn
        }
    }

    function openProductLotEditing(data, itemStatusID) {
        var editData = commonPopupEdit.popupEditData();

        productLotPopupEdit.popupEditData(data);

        productLotPopupEdit.popupEditOptions.editingKey = data.ProductID();
        productLotPopupEdit.popupEditOptions.itemStatusID = itemStatusID;
        productLotPopupEdit.popupEditOptions.visible(true);

        var dataGrid = productLotPopupEdit.dataGrid();
        var form = productLotPopupEdit.form();

        var disabled = false;
        if ((editData.DocumentStatusID() == 2) || (editData.DocumentStatusID() == 3))
            disabled = true;

        var option = productLotPopupEdit.dataGrid().option('editing');
        option.allowUpdating = !disabled;
        option.allowDeleting = !disabled;
        option.editEnabled = !disabled;
        option.removeEnabled = !disabled;
        productLotPopupEdit.dataGrid().option('editing', option);
        productLotPopupEdit.dataGrid().option('selection', { mode: (disabled) ? 'none' : 'multiple' });
        productLotPopupEdit.newRow().option('disabled', disabled);
        productLotPopupEdit.dataGrid().repaint();

        var productLotColumns = getProductLotColumns(itemStatusID);

        var colQtyOnHand = dataGrid.columnOption('QtyOnHand');
        var colQtyTransferConv = dataGrid.columnOption('QtyTransferConv');

        colQtyOnHand.dataField = productLotColumns.qtyOnHandColumn;
        colQtyTransferConv.dataField = productLotColumns.qtyTransferConvColumn;

        dataGrid.columnOption('QtyOnHand', colQtyOnHand);
        dataGrid.columnOption('QtyTransferConv', colQtyTransferConv);

        form.getEditor('Product').option('value', data.Product());
        form.getEditor('QtyOnHand').option('value', data[productLotColumns.qtyOnHandColumn]());
        form.getEditor('QtyTransferConv').option('value', data[productLotColumns.qtyTransferConvColumn]());

        var conversion = CommonUtility.getConversion(
            data[productLotColumns.qtyTransferConvColumn](),
            DXUtility.getValue(data, 'ProductConversionL'),
            DXUtility.getValue(data, 'ProductConversionM'),
            DXUtility.getValue(data, 'ProductConversionS')
        );

        form.getEditor('QtyTransfer').option('value', conversion.qtyTransaction);

        data = validateSummariesArrayStore(data);

        var childDetails = [];
        if (data.ChildDetails().length > 0) {
            var items = $.grep(data.ChildDetails(), function (e) {
                return ((e[productLotColumns.qtyConvLColumn]() > 0) ||
                    (e[productLotColumns.qtyConvMColumn]() > 0) ||
                    (e[productLotColumns.qtyConvSColumn]() > 0))
            });

            for (var i = 0; i < items.length; i++)
                childDetails.push(items[i]);
        }

        var detailsDataSource = CommonUtility.createArrayDataSource(
            'vStockTransferDetailsViewModel',
            ['ProductID', 'ProductLotID'],
            childDetails
        );

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', detailsDataSource);
    }

    function saveProductLotEditing() {
        var data = productLotPopupEdit.popupEditData();
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        if (CommonUtility.validateProductLotEditing(
            data,
            productLotPopupEdit.dataGrid().option('dataSource'),
            productLotPopupEdit.form().getEditor('QtyTransfer').option('value'),
            'Transfer',
            'vStockTransferDetailsViewModel',
            productLotColumns.qtyConvLColumn,
            productLotColumns.qtyConvMColumn,
            productLotColumns.qtyConvSColumn,
            productLotColumns.qtyTransferConvColumn,
            productLotColumns.qtyTransferColumn,
            true)) {
            updateSummariesArrayStore(data);

            productLotPopupEdit.popupEditOptions.visible(false);
            stockTransferSummaryDataGrid().refresh();
        }
    }

    function downloadProductLot(productLotLoaded) {
        if ((dataSource_vStockOnHandAvailable.length == 0) && (dataSource_vStockOnHandAvailableByProduct.length == 0)) {
            showLoadingPanel();

            var form = commonPopupEdit.form();

            new DevExpress.data.DataSource({
                store: Dismoyo_Ciptoning_Client.DB.vProducts,
                select: [
                    'ID',
                    'Code',
                    'Product',
                    'UOMLID',
                    'UOMMID',
                    'UOMSID',
                    'ConversionL',
                    'ConversionM',
                    'ConversionS'
                ],
                sort: ['ID'],
                paginate: false,
                map: function (item) { return new Dismoyo_Ciptoning_Client.vProductViewModel(item); }
            }).load()
                .done(function (result) {
                    var productDataSource = result;
                    var warehouseID = form.getEditor('SourceWarehouseID').option('value');

                    var dataSource = new DevExpress.data.DataSource({
                        store: Dismoyo_Ciptoning_Client.DB.vStockOnHandAvailables,
                        select: [
                            'ProductID',
                            'ProductLotID',
                            'ProductLotCode',
                            'ProductLot',
                            'ProductLotExpiredDate',
                            'QtyOnHandGood',
                            'QtyOnHandHold',
                            'QtyOnHandBad'
                        ],
                        filter: [
                            ['WarehouseID', '=', warehouseID], 'and',
                            [
                                ['QtyOnHandGood', '>', 0], 'or',
                                ['QtyOnHandHold', '>', 0], 'or',
                                ['QtyOnHandBad', '>', 0]
                            ]
                        ],
                        sort: ['WarehouseID', 'ProductID', 'ProductLotID'],
                        paginate: false,
                        map: function (item) { return new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(item); }
                    });

                    dataSource.load()
                        .done(function (result2) {
                            var product = null;
                            var stockOnHandAvailable = [];
                            var stockOnHandAvailableByProduct = [];
                            for (var i = 0; i < result2.length; i++) {
                                stockOnHandAvailable.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));

                                var j = stockOnHandAvailableByProduct.length - 1;
                                var productID = result2[i].ProductID();
                                if ((i == 0) || (stockOnHandAvailableByProduct[j].ProductID() != productID)) {
                                    stockOnHandAvailableByProduct.push(new Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel(result2[i].toJS()));
                                    j++;
                                    product = $.grep(result, function (e) { return (e.ID() == productID); });
                                } else {
                                    stockOnHandAvailableByProduct[j].QtyOnHandGood(stockOnHandAvailableByProduct[j].QtyOnHandGood() +
                                        result2[i].QtyOnHandGood());
                                    stockOnHandAvailableByProduct[j].QtyOnHandHold(stockOnHandAvailableByProduct[j].QtyOnHandHold() +
                                        result2[i].QtyOnHandHold());
                                    stockOnHandAvailableByProduct[j].QtyOnHandBad(stockOnHandAvailableByProduct[j].QtyOnHandBad() +
                                        result2[i].QtyOnHandBad());
                                }

                                stockOnHandAvailable[i].ProductCode(product[0].Code());
                                stockOnHandAvailable[i].Product(product[0].Product());
                                stockOnHandAvailable[i].ProductUOMLID(product[0].UOMLID());
                                stockOnHandAvailable[i].ProductUOMMID(product[0].UOMMID());
                                stockOnHandAvailable[i].ProductUOMSID(product[0].UOMSID());
                                stockOnHandAvailable[i].ProductConversionL(product[0].ConversionL());
                                stockOnHandAvailable[i].ProductConversionM(product[0].ConversionM());
                                stockOnHandAvailable[i].ProductConversionS(product[0].ConversionS());

                                stockOnHandAvailableByProduct[j].ProductCode(product[0].Code());
                                stockOnHandAvailableByProduct[j].Product(product[0].Product());
                                stockOnHandAvailableByProduct[j].ProductUOMLID(product[0].UOMLID());
                                stockOnHandAvailableByProduct[j].ProductUOMMID(product[0].UOMMID());
                                stockOnHandAvailableByProduct[j].ProductUOMSID(product[0].UOMSID());
                                stockOnHandAvailableByProduct[j].ProductConversionL(product[0].ConversionL());
                                stockOnHandAvailableByProduct[j].ProductConversionM(product[0].ConversionM());
                                stockOnHandAvailableByProduct[j].ProductConversionS(product[0].ConversionS());
                            }

                            dataSource_vStockOnHandAvailable = stockOnHandAvailable;
                            dataSource_vStockOnHandAvailableByProduct = stockOnHandAvailableByProduct;

                            if (dataSource_vStockOnHandAvailable.length == 0)
                                DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode(
                                    'Product lot stock with item status Good/Hold/Bad for the selected warehouse is empty.'),
                                    'New Transfer Details Failed');
                            else
                                productLotLoaded();

                            hideLoadingPanel();
                        })
                        .fail(function (error) {
                            DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product lot data.'), 'Download Product Lot Failed');
                            hideLoadingPanel();
                        });
                })
                .fail(function (error) {
                    DevExpress.ui.dialog.alert(HtmlUtility.htmlEncode('Failed to download product data.'), 'Download Product Failed');
                    hideLoadingPanel();
                });
        } else
            productLotLoaded();
    }





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);

                    var childSelectedItem = collapsibleFilter.form().getEditor('SourceWarehouseID').option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['SiteID']() != e.value))
                        collapsibleFilter.form().getEditor('SourceWarehouseID').option('value', null);

                    childSelectedItem = collapsibleFilter.form().getEditor('DestinationWarehouseID').option('selectedItem');
                    if (childSelectedItem && (childSelectedItem['SiteID']() != e.value))
                        collapsibleFilter.form().getEditor('DestinationWarehouseID').option('value', null);

                    collapsibleFilter.form().getEditor('SourceWarehouseID').option('dataSource',
                        DataUtility['GetLookupWarehouseDataSource']((e.value) ? ['SiteID', '=', e.value] : null));

                    collapsibleFilter.form().getEditor('DestinationWarehouseID').option('dataSource',
                       DataUtility['GetLookupWarehouseDataSource']((e.value) ? ['SiteID', '=', e.value] : null));
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Transfer',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'SourceWarehouseID',
            label: { text: 'Source Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DestinationWarehouseID',
            label: { text: 'Destination Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: { //////////////////////////////////////////
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            name: 'DocumentCode',
            dataField: '',
            label: { text: 'Document Number' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateFrom',
            label: { text: 'Transaction Date From' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'TransactionDateTo',
            label: { text: 'Transaction Date To' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'PIC',
            label: { text: 'PIC' },
            editorOptions: {
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'SourceTerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'SourceRegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'SourceAreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'SourceCompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SourceSiteID', '=', siteID, 'and');

        // SourceWarehouseID
        value = form.getEditor('SourceWarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SourceWarehouseID', '=', value, 'and');

        // DestinationWarehouseID
        value = form.getEditor('DestinationWarehouseID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DestinationWarehouseID', '=', value, 'and');

        // DocumentCode
        value = form.getEditor('DocumentCode').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentCode', 'contains', value, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDateFrom').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '>=', value, 'and');

        // TransactionDateTo
        value = form.getEditor('TransactionDateTo').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '<=', value, 'and');

        // PIC
        value = form.getEditor('PIC').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'SourcePIC', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'DestinationPIC', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        // DocumentStatusID
        value = form.getEditor('DocumentStatusID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'DocumentStatusID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.editEnabled = false,
    commonGridView.dataGridOptions.editing.removeEnabled = false;
    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockTransfers.AddNewStockTransfer');
    commonGridView.dataGridOptions.editing.allowUpdating = Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('StockTransfers.EditStockTransfer');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'SourceTerritory', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'SourceRegion', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'SourceArea', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'SourceCompany', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'SourceSite', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()
    }, {
        dataField: 'DocumentCode', caption: 'Document Number', width: '140px', sortOrder: 'desc',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vStockTransfers_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Source' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Destination' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        },
        cellTemplate: function (container, options) {
            var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
            var allowUpdating = user.isAuthorized('StockTransfers.EditStockTransfer');

            var commands = $('<div class="dx-command-edit" style="text-align: left;">');

            var lbl = $('<b>').text(options.data.DocumentCode());
            if (allowUpdating)
                lbl = $('<a class="dx-link">').text(options.data.DocumentCode()).on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                });

            commands.append(lbl);
            commands.append('&nbsp;');

            container.append(commands);
        }
    }, {
        dataField: 'TransactionDate', caption: 'Transaction Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return cellInfo.value.toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'SourceWarehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'SourcePIC', caption: 'PIC', width: '180px'
    }, {
        dataField: 'DestinationWarehouse', caption: 'Warehouse', width: '200px'
    }, {
        dataField: 'DestinationPIC', caption: 'PIC', width: '180px'
    }, {
        dataField: 'ReferenceNumber', caption: 'Reference Number', width: '120px'
    }, {
        dataField: 'DocumentStatusName', caption: 'Status', width: '80px'
    }, {
        dataField: 'PostedDate', caption: 'Posted Date', width: '100px',
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleDateString();

            return null;
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];

    if (commonGridView.dataGridOptions.editing.allowUpdating) {
        commonGridView.dataGridOptions.columns.push({
            width: 100,
            alignment: 'center',
            cellTemplate: function (container, options) {
                var commands = $('<div class="dx-command-edit" style="text-align: center;">');

                commands.append($('<a class="dx-link">').text('Edit').on('dxclick', function () {
                    openSelectedEditing(options.data.DocumentID(), false);
                }));
                commands.append('&nbsp;');

                container.append(commands);
            }
        });
    }





    // ------------------------------------------------------------------------------------------------
    // commonPopupEdit
    // ------------------------------------------------------------------------------------------------
    var commonPopupEdit = new Dismoyo_Ciptoning_Client.CommonPopupEdit();

    commonPopupEdit.okOptions.text = 'Save';
    commonPopupEdit.okOptions.icon = 'icons8-save';

    var stockTransferEditDataAttachmentFile = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_editDataAttachmentFile', 'dxFileUploader'); }

    var stockTransferSummaryDataGrid = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferSummaryDataGrid', 'dxDataGrid'); }

    var stockTransferPrintDO = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferPrintDO', 'dxButton'); }
    var stockTransferPost = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferPost', 'dxButton'); }
    var stockTransferDiscard = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferDiscard', 'dxButton'); }
    var stockTransferSaveAsDraftAndNew = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferSaveAsDraftAndNew', 'dxButton'); }

    var stockTransferSummaryNewRow = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferSummaryNewRow', 'dxButton'); }
    var stockTransferSummaryDeleteRows = function () { return DXUtility.getDXInstance(null, '#vStockTransfers_stockTransferSummaryDeleteRows', 'dxButton'); }

    commonPopupEdit.popupEditOptions.onContentReady = function (e) {
        var extContent = $('#commonPopupEdit_extContent');
        var content = DXUtility.createFormItemGroupContent();

        content.append(DXUtility.createFormItemLabelTop('Transfer Details'));

        var commands = $('<div class="desktop-commonGridView-commands">');

        var commandSummaryNewRow = $('<div id="vStockTransfers_stockTransferSummaryNewRow">').dxButton({
            text: 'New', icon: 'add',
            onClick: function () {
                var isValid = commonPopupEdit.form().validate().isValid;

                if (isValid) {
                    downloadProductLot(function () {
                        stockTransferSummaryDataGrid().addRow();
                    });
                }
                else
                    DevExpress.ui.dialog.alert('Please specify the required fields.', 'New Transfer Details Failed');
            }
        });

        var commandSummaryDeleteRows = $('<div id="vStockTransfers_stockTransferSummaryDeleteRows">').dxButton({
            text: 'Delete', icon: 'remove', disabled: true,
            onClick: function () {
                DevExpress.ui.dialog.confirm(
                    'Are you sure want to delete the selected records?', 'Delete Confirmation').done(function (dialogResult) {
                        if (dialogResult) {
                            DXUtility.deleteSelectedRows(stockTransferSummaryDataGrid());
                        }
                    });
            }
        });

        commands.append(commandSummaryNewRow);
        commands.append(commandSummaryDeleteRows);

        content.append(commands);

        content.append($('<div id="vStockTransfers_stockTransferSummaryDataGrid">').dxDataGrid({
            deferRendering: false,
            dataSource: [],
            showBorders: true,
            paging: { enabled: false },
            allowColumnResizing: false,
            columnAutoWidth: true,
            hoverStateEnabled: true,
            selection: {
                mode: 'multiple',
                allowSelectAll: true
            },
            editing: {
                editMode: 'row',
                allowAdding: false,
                allowUpdating: true,
                allowDeleting: true,
            },
            onSelectionChanged: function (e) {
                stockTransferSummaryDeleteRows().option('disabled', !e.selectedRowsData.length);
            },
            onInitNewRow: function (info) {
                info.data.QtyTransferGood = 0;
                info.data.QtyTransferHold = 0;
                info.data.QtyTransferBad = 0;

                info.data.QtyTransferConvGood = '0/0/0';
                info.data.QtyTransferConvHold = '0/0/0';
                info.data.QtyTransferConvBad = '0/0/0';
            },
            onEditorPreparing: function (e) {
                if (e.parentType == 'dataRow') {
                    if (e.dataField == 'Product') {
                        if (e.row.inserted) {
                            e.editorElement.dxLookup({
                                dataSource: dataSource_vStockOnHandAvailableByProduct,
                                displayExpr: 'Product',
                                valueExpr: 'Product',
                                searchExpr: 'Product',
                                searchPlaceholder: 'Product',
                                popupWidth: '832px',
                                showPopupTitle: false,
                                fieldEditEnabled: true,
                                value: e.value,
                                onContentReady: function (ea) {
                                    CommonUtility.createProductLookupHeader('vStockTransfers_productIDLookup', ea.element, null);
                                },
                                itemTemplate: function (data, index, element) {
                                    return CommonUtility.createProductLookupItem(data, element, null);
                                },
                                onValueChanged: function (ea) {
                                    if (ea.value) {
                                        var item = this.option('selectedItem');
                                        if (item) {
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHandGood', item.QtyOnHandGood());
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHandHold', item.QtyOnHandHold());
                                            e.component.cellValue(e.row.rowIndex, 'QtyOnHandBad', item.QtyOnHandBad());

                                            DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                            DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                            DXUtility.setValue(e.row.data, 'Product', item.Product());
                                            DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                            DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                            DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                            DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                            DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                            var conversionGood = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyTransferConvGood'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            var conversionHold = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyTransferConvHold'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            var conversionBad = CommonUtility.getConversion(
                                                e.component.cellValue(e.row.rowIndex, 'QtyTransferConvBad'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                                DXUtility.getValue(e.row.data, 'ProductConversionS')
                                            );

                                            DXUtility.setValue(e.row.data, 'QtyTransferGood', conversionGood.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvLGood', conversionGood.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvMGood', conversionGood.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvSGood', conversionGood.qtyConvS);

                                            DXUtility.setValue(e.row.data, 'QtyTransferHold', conversionHold.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvLHold', conversionHold.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvMHold', conversionHold.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvSHold', conversionHold.qtyConvS);

                                            DXUtility.setValue(e.row.data, 'QtyTransferBad', conversionBad.qtyTransaction);
                                            DXUtility.setValue(e.row.data, 'QtyConvLBad', conversionBad.qtyConvL);
                                            DXUtility.setValue(e.row.data, 'QtyConvMBad', conversionBad.qtyConvM);
                                            DXUtility.setValue(e.row.data, 'QtyConvSBad', conversionBad.qtyConvS);
                                        }
                                    }

                                    e.component.cellValue(e.row.rowIndex, 'Product', ea.value);
                                    e.setValue(ea.value);
                                }
                            });
                        } else {
                            downloadProductLot(function () { });
                            e.allowEditing = false;
                            e.editorElement.append($('<td style="padding: 5px;">').text(
                                e.row.data.Product()));
                        }

                        e.cancel = true;
                    } else if ((e.dataField == 'QtyTransferConvGood') || (e.dataField == 'QtyTransferConvHold') ||
                        (e.dataField == 'QtyTransferConvBad')) {
                        var valueBefore = '';
                        e.editorElement.dxTextBox({
                            value: e.value,
                            onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                            //onKeyDown: DXUtility.preventInputCharacters,
                            onKeyDown: function (ea) {
                                if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                                    valueBefore = ea.jQueryEvent.target.value;
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.preventDefault();
                                }
                            },
                            onKeyUp: function (ea) {
                                if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                                    // do nothing
                                } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                                    ea.jQueryEvent.target.value = valueBefore;
                                }
                            },
                            onEnterKey: function (ea) {
                                stockTransferSummaryDataGrid().saveEditData();
                            },
                            onValueChanged: function (ea) {
                                //if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                                //    ea.value = '';
                                //}

                                //// will convert the units to quantity (in the input is in units)
                                //if (ea.value.indexOf('/') > -1) {
                                //    var qty = 0;
                                //    var units = ea.value.split('/');
                                //    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                                //        if (units[unitIndex] == '')
                                //            break;
                                //        var value = parseInt(units[unitIndex]);
                                //        if (unitIndex == 0)
                                //            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                                //        else if (unitIndex == 1) {
                                //            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                                //                qty += value;
                                //            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                                //                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                                //        }
                                //        else if (unitIndex == 2)
                                //            qty += value;
                                //    }
                                //    ea.value = qty + "";
                                //    DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyTransfer'), qty);
                                //}

                                var conversion = CommonUtility.getConversion(
                                    (ea.value) ? ea.value : '0/0/0',
                                    DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                    DXUtility.getValue(e.row.data, 'ProductConversionS')
                                );

                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyTransfer'), conversion.qtyTransaction);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyConvL'), conversion.qtyConvL);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyConvM'), conversion.qtyConvM);
                                DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyConvS'), conversion.qtyConvS);

                                ea.value = conversion.qtyTransactionConv;
                                ea.component.option('value', ea.value);
                                e.setValue(ea.value);
                            }
                        });

                        e.cancel = true;
                    }
                }
            },
            onRowInserted: function (info) {
                CommonUtility.validateDataGridInsertedTransactionSummary(
                    info.component,
                    new Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel(info.data).toJS()
                );

                addDummyData(info);
                stockTransferSummaryDataGrid().clearSelection();
            },
            onRowUpdated: function (info) {
                info.data.ProductID = info.key.ProductID;
                addDummyData(info);
                stockTransferSummaryDataGrid().clearSelection();
            },
            onRowRemoved: function (info) {
                CommonUtility.validateDataGridRemovedTransactionSummary(
                    info.component,
                    info.data.toJS()
                );
            },
            onRowUpdating: function (info) {
                if (info.newData.QtyTransferConvGood) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyTransferConvGood,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvLGood = conversion.qtyConvL;
                    info.newData.QtyConvMGood = conversion.qtyConvM;
                    info.newData.QtyConvSGood = conversion.qtyConvS;
                    info.newData.QtyTransferGood = conversion.qtyTransaction;
                }

                if (info.newData.QtyTransferConvHold) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyTransferConvHold,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvLHold = conversion.qtyConvL;
                    info.newData.QtyConvMHold = conversion.qtyConvM;
                    info.newData.QtyConvSHold = conversion.qtyConvS;
                    info.newData.QtyTransferHold = conversion.qtyTransaction;
                }

                if (info.newData.QtyTransferConvBad) {
                    var conversion = CommonUtility.getConversion(
                            info.newData.QtyTransferConvBad,
                            DXUtility.getValue(info.oldData, 'ProductConversionL'),
                            DXUtility.getValue(info.oldData, 'ProductConversionM'),
                            DXUtility.getValue(info.oldData, 'ProductConversionS')
                        );

                    info.newData.QtyConvLBad = conversion.qtyConvL;
                    info.newData.QtyConvMBad = conversion.qtyConvM;
                    info.newData.QtyConvSBad = conversion.qtyConvS;
                    info.newData.QtyTransferBad = conversion.qtyTransaction;
                }

                updateDeferSummariesArrayStore(info.oldData.ProductID(), info.newData);
            },
            onRowValidating: function (e) {
                var qtyOnHandGood = DXUtility.getValue(e.newData, 'QtyOnHandGood');
                if (qtyOnHandGood == undefined)
                    qtyOnHandGood = DXUtility.getValue(e.oldData, 'QtyOnHandGood');

                var qtyOnHandHold = DXUtility.getValue(e.newData, 'QtyOnHandHold');
                if (qtyOnHandHold == undefined)
                    qtyOnHandHold = DXUtility.getValue(e.oldData, 'QtyOnHandHold');

                var qtyOnHandBad = DXUtility.getValue(e.newData, 'QtyOnHandBad');
                if (qtyOnHandBad == undefined)
                    qtyOnHandBad = DXUtility.getValue(e.oldData, 'QtyOnHandBad');

                var qtyTransferGood = DXUtility.getValue(e.newData, 'QtyTransferGood');
                if (qtyTransferGood == undefined)
                    qtyTransferGood = DXUtility.getValue(e.oldData, 'QtyTransferGood');

                var qtyTransferHold = DXUtility.getValue(e.newData, 'QtyTransferHold');
                if (qtyTransferHold == undefined)
                    qtyTransferHold = DXUtility.getValue(e.oldData, 'QtyTransferHold');

                var qtyTransferBad = DXUtility.getValue(e.newData, 'QtyTransferBad');
                if (qtyTransferBad == undefined)
                    qtyTransferBad = DXUtility.getValue(e.oldData, 'QtyTransferBad');

                if ((qtyTransferGood <= 0) && (qtyTransferHold <= 0) && (qtyTransferBad <= 0)) {
                    e.errorText = 'Transfer Qty Good/Hold/Bad must be greater than 0.';
                    e.isValid = false;
                }

                if (e.isValid && ((qtyTransferGood > qtyOnHandGood) || (qtyTransferHold > qtyOnHandHold) ||
                    (qtyTransferBad > qtyOnHandBad))) {
                    e.errorText = 'Transfer Qty Good/Hold/Bad must be less than or equal to On Hand Qty.';
                    e.isValid = false;
                }

                if (e.isValid) {
                    var data = commonPopupEdit.popupEditData();
                    
                    if (validateCreatedBySFA(DXUtility.getValue(data, 'CreatedByUserName'))) {
                        for (var i = 0; i < data.ChildSummaries().length; i++) {
                            var summary = data.ChildSummaries()[i];
                            if ((summary.ProductID() == e.oldData.ProductID()) &&
                                ((qtyTransferGood > (summary.QtyGood() * -1)) ||
                                (qtyTransferHold > (summary.QtyHold() * -1)) ||
                                (qtyTransferBad > (summary.QtyBad() * -1)))) {
                                e.errorText = 'This document was created by SFA (mobile device). ' +
                                    'New Transfer Qty Good/Hold/Bad is limited to less than or equal to original Transfer Qty.';
                                e.isValid = false;
                                break;
                            }
                        }
                    }
                }

                if (e.errorText)
                    CommonUtility.hideErrorMessageOnDataGrid();
            },
            onDataErrorOccurred: function (e) {
                var errorValue = e.component._controllers.editing._editData[0].data.Product;
                switch (e.error.__id) {
                    case 'E4008':
                        e.error.message = 'Product \'' + errorValue + '\' is already exist.';
                        break;
                }

                CommonUtility.hideErrorMessageOnDataGrid();
            },
            columns: [{
                dataField: 'DocumentID', visible: false
            }, {
                dataField: 'ProductID', visible: false
            }, {
                dataField: 'Product', caption: 'Product',
                validationRules: [{ type: 'required' }],
                headerCellTemplate: function (columnHeader, headerInfo) {
                    var dataGrid = $(stockTransferSummaryDataGrid().element());
                    if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                        var isEditable = (stockTransferSummaryDataGrid().option('selection').mode == 'none') ? false : true;
                        var option = stockTransferSummaryDataGrid().option('editing');

                        var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader" style="border-top-style: none !important;">';

                        if (isEditable)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                        tr += '       <td class="dx-datagrid-action" colspan="3">' + 'On Hand Qty (Pcs)' + '</td>';
                        tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Transfer Qty (L/M/S)' + '</td>';

                        if (isEditable || option.allowUpdating || option.allowDeleting)
                            tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                        tr += '</tr>'

                        var table = dataGrid.find('.dx-header-row:first-child');
                        $(tr).insertBefore(table[0].parentElement);
                        $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
                    }
                }
            }, {
                dataField: 'QtyOnHandGood', caption: 'Good', width: '70px', allowEditing: false,
                dataType: 'number'
            }, {
                dataField: 'QtyOnHandHold', caption: 'Hold', width: '70px', allowEditing: false,
                dataType: 'number',
            }, {
                dataField: 'QtyOnHandBad', caption: 'Bad', width: '70px', allowEditing: false,
                dataType: 'number',
            }, {
                dataField: 'QtyTransferConvGood', caption: 'Good', width: '90px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyTransferConvGood', 1)); // Good
                }
            }, {
                dataField: 'QtyTransferConvHold', caption: 'Hold', width: '90px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyTransferConvHold', 2)); // Hold
                }
            }, {
                dataField: 'QtyTransferConvBad', caption: 'Bad', width: '90px',
                alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule],
                cellTemplate: function (container, options) {
                    container.append(createProductLotEditCommands(options.data, 'QtyTransferConvBad', 3)); // Bad
                }
            }]
        }));

        var extCommands = $('#commonPopupEdit_extCommands');
        var commandPrintDO = $('<div id="vStockTransfers_stockTransferPrintDO" style="margin-right: 32px;">').dxButton({
            text: 'Print DO', icon: 'icons8-print',
            onClick: function () { commonPopupEdit.events.performPrintDO(this); }
        });

        var commandPost = $('<div id="vStockTransfers_stockTransferPost">').dxButton({
            text: 'Post', icon: 'icons8-check-green',
            onClick: function () { commonPopupEdit.events.performPost(this); }
        });

        var commandDiscard = $('<div id="vStockTransfers_stockTransferDiscard" style="margin-right: 16px;">').dxButton({
            text: 'Discard', icon: 'icons8-trash-red',
            onClick: function () { commonPopupEdit.events.performDiscard(this); }
        });

        var commandSaveAsDraftAndNew = $('<div id="vStockTransfers_stockTransferSaveAsDraftAndNew">').dxButton({
            text: 'Save & New', icon: 'icons8-save',
            onClick: function () { commonPopupEdit.events.performSaveAsDraftAndNew(this); }
        });

        extContent.append(DXUtility.createFormItemGroupWithCaption('').append(content));
        extCommands.append(commandPrintDO);
        extCommands.append(commandPost);
        extCommands.append(commandDiscard);
        extCommands.append(commandSaveAsDraftAndNew);
    };

    commonGridView.events.performNewRow = function (rootView) {
        openEditing(null);
    };

    commonPopupEdit.events.performOK = function (rootView) {
        saveEditing(null, 3); // Save with no status changes and Reload data
    };

    commonPopupEdit.events.performPrintDO = function (rootView) {
        var data = commonPopupEdit.popupEditData();

        printDOEditing(data.DODocumentID());
    };

    commonPopupEdit.events.performPost = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Post this transaction?', 'Post Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(2, 3); // Post and Reload data
        });
    };

    commonPopupEdit.events.performDiscard = function (rootView) {
        DevExpress.ui.dialog.confirm('Are you sure want to Discard this transaction?', 'Discard Confirmation').done(function (dialogResult) {
            if (dialogResult)
                saveEditing(3, 3); // Discard and Reload data
        });
    };

    commonPopupEdit.events.performSaveAsDraftAndNew = function (rootView) {
        saveEditing(1, 2); // Save as Draft and Reload data
    };

    commonPopupEdit.formOptions.customizeItem = function (item) {
        if (item.dataField == 'AttachmentFile') {
            item.template = function (data, itemElement) {
                itemElement.append(CommonUtility.createEditDataAttachmentFileUploader('vStockTransfers', 'StockTransfers'));
            }
        }
    };

    commonPopupEdit.events.performCancel = function (rootView) {
        commonPopupEdit.popupEditOptions.visible(false);

        if (isDataGridRefreshRequired) {
            commonGridView.dataGrid().refresh();
            isDataGridRefreshRequired = false;
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    commonPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(commonPopupEdit.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Site']);
                }
            }
        }, {
            dataField: 'Company',
            label: { text: 'Company' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            validationRules: [{ type: 'required' }],
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    CommonUtility.cascadeValueChanged(form, e.selectedItem, e.value, 'Site',
                       ['Area', 'Region', 'Territory'],
                       []);

                    var preDocumentCode = '';
                    var preDODocumentCode = '';
                    var company = null;
                    var companyID = null;

                    if (e.selectedItem) {
                        preDocumentCode = previewDocumentCode(e.selectedItem.Code());
                        preDODocumentCode = previewDODocumentCode(e.selectedItem.Code());
                        company = e.selectedItem.Company();
                        companyID = e.selectedItem.CompanyID();
                    }

                    form.getEditor('Company').option('value', company);

                    updateSiteChildEditor(form, e.value, companyID);

                    form.getEditor('DocumentCode').option('value', preDocumentCode);
                    form.getEditor('DODocumentCode').option('value', preDODocumentCode);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock Transfer',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOShipmentDate').option('min', data.value);
                }
            }
        }, {
            dataField: 'DocumentStatusID',
            label: { text: 'Status' },
            colSpan: 1,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSystemLookupDataSource(['Group', '=', 'DocumentStatus']),
                displayExpr: 'Name',
                valueExpr: 'Value_Int32',
                placeholder: 'NEW',
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SourceWarehouseID',
            label: { text: 'Source Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 3,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onValueChanged: function (e) {
                    var form = commonPopupEdit.form();

                    if (form.getEditor('DestinationSiteID').option('value')) {
                        var destinationWHS = form.getEditor('DestinationSiteID').option('value')
                        form.getEditor('DestinationWarehouseID').option('value', null);
                        var datasource = Dismoyo_Ciptoning_Client.LocalStore.vWarehouses.dataSource();

                        //error handling when destinationWHS or e.value is undefined
                        if (destinationWHS === undefined)
                            destinationWHS = null;

                        if (e.value === undefined)
                            e.value = null;

                        datasource.filter(['ID', '<>', e.value], "and", ['SiteID', '=', destinationWHS]);
                        form.getEditor('DestinationWarehouseID').option('dataSource', datasource);
                    }

                    dataSource_vStockOnHandAvailable = [];
                    dataSource_vStockOnHandAvailableByProduct = [];

                    if (e.value) {
                        var data = commonPopupEdit.popupEditData();

                        var summaryDataGrid = stockTransferSummaryDataGrid();
                        summaryDataGrid.cancelEditData();

                        data.ChildSummaries([]);
                        summaryDataGrid.option('dataSource',
                            createSummaryArrayDataSource(data.ChildSummaries()));
                    }
                },
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'SourcePIC',
            label: { text: 'PIC' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorOptions: {
                maxlength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'DestinationSiteID',
            label: { text: 'Destination Site' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: Dismoyo_Ciptoning_Client.LocalStore.vSites.dataSource(),
                displayExpr: 'Site',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (e) {
                    e.component.option('value', e.value);
                    var sourceWarehouseID = commonPopupEdit.form().getEditor('SourceWarehouseID').option('value');
                    var datasource = Dismoyo_Ciptoning_Client.LocalStore.vWarehouses.dataSource();

                    //error handling when sourceWarehouse or e.value is undefined
                    if (sourceWarehouseID === undefined)
                        sourceWarehouseID = null;

                    if (e.value === undefined)
                        e.value = null;

                    //  Dismoyo_Ciptoning_Client.LocalStore.vWarehouses.dataSource().filter(['ID', '<>', sourceWarehouseID], "and", ['SiteID', '=', e.value]);
                    datasource.filter(['ID', '<>', sourceWarehouseID], "and", ['SiteID', '=', e.value]);
                    commonPopupEdit.form().getEditor('DestinationWarehouseID').option('dataSource', datasource);


                }
            }
        }, {
            dataField: 'DestinationWarehouseID',
            label: { text: 'Warehouse' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: [],
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                searchExpr: ['Code', 'Name'],
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DestinationPIC',
            label: { text: 'PIC' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorOptions: {
                maxLength: 50,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'ReferenceNumber',
            label: { text: 'Reference Number' },
            colSpan: 3,
            editorOptions: {
                maxlength: 30,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'AttachmentFile',
            label: { text: 'Attachment File' },
            colSpan: 2,
            editorOptions: {
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }]
    }, {
        itemType: 'group',
        caption: 'Delivery Order',
        colCount: 6,
        colSpan: 3,
        items: [{
            dataField: 'DODocumentCode',
            label: { text: 'Document Number' },
            colSpan: 3,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commSonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOShipmentDate',
            label: { text: 'Shipment Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); },
                onValueChanged: function (data) {
                    var form = commonPopupEdit.form();

                    form.getEditor('DOReceivedDate').option('min', data.value);
                }
            }
        }, {
            itemType: 'empty',
            colSpan: 1
        }, {
            dataField: 'DOPrintedCount',
            editorType: 'dxNumberBox',
            label: { text: 'Printed Count' },
            colSpan: 1,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOLastPrintedDate',
            label: { text: 'Last Printed Date' },
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                readOnly: true,
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'DOReceivedDate',
            label: { text: 'Received Date' },
            validationRules: [{ type: 'required' }],
            colSpan: 2,
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                showClearButton: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    // ------------------------------------------------------------------------------------------------
    // commonPopupIFrame
    // ------------------------------------------------------------------------------------------------
    var commonPopupIFrame = new Dismoyo_Ciptoning_Client.CommonPopupIFrame();

    commonPopupIFrame.okOptions.visible = false;

    commonPopupIFrame.cancelOptions.text = 'Close';





    // ------------------------------------------------------------------------------------------------
    // productLotPopupEdit
    // ------------------------------------------------------------------------------------------------
    var productLotPopupEdit = new Dismoyo_Ciptoning_Client.ProductLotPopupEdit();
    productLotPopupEdit.formOptions.colCount = 4;

    productLotPopupEdit.saveOptions.icon = 'icons8-save';

    productLotPopupEdit.events.performSave = function () {
        saveProductLotEditing();
    };

    productLotPopupEdit.dataGridOptions.onInitNewRow = function (info) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        info.data[productLotColumns.qtyTransferColumn] = 0;
        info.data[productLotColumns.qtyTransferConvColumn] = '0/0/0';
    };

    productLotPopupEdit.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.dataField == 'ProductLotCode') {
                if (e.row.inserted) {
                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                    var productLotColumns = getProductLotColumns(itemStatusID);

                    e.editorElement.dxLookup({
                        dataSource: new DevExpress.data.DataSource({
                            store: dataSource_vStockOnHandAvailable,
                            filter: [
                                ['ProductID', '=', productLotPopupEdit.popupEditData().ProductID()], 'and',
                                [productLotColumns.qtyOnHandColumn, '>', 0]
                            ],
                            sort: [{ getter: 'ProductLotExpiredDate', desc: true }]
                        }),
                        displayExpr: 'ProductLotCode',
                        valueExpr: 'ProductLotCode',
                        searchExpr: 'ProductLotCode',
                        searchPlaceholder: 'Lot Number',
                        popupWidth: '582px',
                        showPopupTitle: false,
                        fieldEditEnabled: true,
                        value: e.value,
                        onContentReady: function (ea) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;

                            CommonUtility.createProductLotLookupHeader('vStockTransfers_productLotIDLookup', ea.element, itemStatusID);
                        },
                        itemTemplate: function (data, index, element) {
                            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                            var productLotColumns = getProductLotColumns(itemStatusID);

                            return CommonUtility.createProductLotLookupItem(data, element, productLotColumns.qtyOnHandColumn);
                        },
                        onValueChanged: function (ea) {
                            if (ea.value) {
                                var item = this.option('selectedItem');
                                if (item) {
                                    var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
                                    var productLotColumns = getProductLotColumns(itemStatusID);

                                    e.component.cellValue(e.row.rowIndex, 'QtyOnHand', item[productLotColumns.qtyOnHandColumn]());

                                    DXUtility.setValue(e.row.data, 'QtyOnHandGood', item.QtyOnHandGood());
                                    DXUtility.setValue(e.row.data, 'QtyOnHandHold', item.QtyOnHandHold());
                                    DXUtility.setValue(e.row.data, 'QtyOnHandBad', item.QtyOnHandBad());

                                    DXUtility.setValue(e.row.data, 'ProductID', item.ProductID());
                                    DXUtility.setValue(e.row.data, 'ProductLotID', item.ProductLotID());
                                    DXUtility.setValue(e.row.data, 'ProductCode', item.ProductCode());
                                    DXUtility.setValue(e.row.data, 'Product', item.Product());
                                    DXUtility.setValue(e.row.data, 'ProductLotCode', item.ProductLotCode());
                                    DXUtility.setValue(e.row.data, 'ProductUOMLID', item.ProductUOMLID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMMID', item.ProductUOMMID());
                                    DXUtility.setValue(e.row.data, 'ProductUOMSID', item.ProductUOMSID());
                                    DXUtility.setValue(e.row.data, 'ProductConversionL', item.ProductConversionL());
                                    DXUtility.setValue(e.row.data, 'ProductConversionM', item.ProductConversionM());
                                    DXUtility.setValue(e.row.data, 'ProductConversionS', item.ProductConversionS());

                                    var conversion = CommonUtility.getConversion(
                                        e.component.cellValue(e.row.rowIndex, 'QtyTransferConv'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionL'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionM'),
                                        DXUtility.getValue(e.row.data, 'ProductConversionS')
                                    );

                                    DXUtility.setValue(e.row.data, productLotColumns.qtyTransferColumn, conversion.qtyTransaction);
                                    DXUtility.setValue(e.row.data, productLotColumns.qtyConvLColumn, conversion.qtyConvL);
                                    DXUtility.setValue(e.row.data, productLotColumns.qtyConvMColumn, conversion.qtyConvM);
                                    DXUtility.setValue(e.row.data, productLotColumns.qtyConvSColumn, conversion.qtyConvS);
                                };
                            }

                            e.component.cellValue(e.row.rowIndex, 'ProductLotCode', ea.value);
                            e.setValue(ea.value);
                        }
                    });
                } else {
                    e.allowEditing = false;
                    e.editorElement.append($('<td style="padding: 5px;">').text(
                        e.row.data.ProductLotCode()));
                }

                e.cancel = true;
            } else if (e.name == 'QtyTransferConv') {
                var valueBefore = '';
                e.editorElement.dxTextBox({
                    value: e.value,
                    onFocusIn: function (e) { DXUtility.selectAllText(e.element, 'dxTextBox'); },
                    //onKeyDown: DXUtility.preventInputCharacters,
                    onKeyDown: function (ea) {
                        if ((ea.jQueryEvent.keyCode > 47 && ea.jQueryEvent.keyCode <= 57) || ea.jQueryEvent.keyCode == 191 || (ea.jQueryEvent.keyCode > 95 && ea.jQueryEvent.keyCode <= 105)) {
                            valueBefore = ea.jQueryEvent.target.value;
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.preventDefault();
                        }
                    },
                    onKeyUp: function (ea) {
                        if (/(^[0-9]*$)|(^[0-9]*\/[0-9]*$)|(^[0-9]*\/[0-9]*\/[0-9]*$)/.test(ea.jQueryEvent.target.value)) {
                            // do nothing
                        } else if (ea.jQueryEvent.keyCode != 8 && ea.jQueryEvent.keyCode != 46 && ea.jQueryEvent.keyCode != 13 && ea.jQueryEvent.keyCode != 9) {
                            ea.jQueryEvent.target.value = valueBefore;
                        }
                    },
                    onValueChanged: function (ea) {
                        //if (DXUtility.getValue(e.row.data, 'Product') == undefined) {
                        //    ea.value = '';
                        //}

                        //// will convert the units to quantity (in the input is in units)
                        //if (ea.value.indexOf('/') > -1) {
                        //    var qty = 0;
                        //    var units = ea.value.split('/');
                        //    for (var unitIndex = 0; unitIndex < units.length; unitIndex++) {
                        //        if (units[unitIndex] == '')
                        //            break;
                        //        var value = parseInt(units[unitIndex]);
                        //        if (unitIndex == 0)
                        //            qty += value * DXUtility.getValue(e.row.data, 'ProductConversionL');
                        //        else if (unitIndex == 1) {
                        //            if (units.length == 2 && DXUtility.getValue(e.row.data, 'Product').indexOf('Single') > -1)
                        //                qty += value;
                        //            else if (DXUtility.getValue(e.row.data, 'ProductConversionM') != null)
                        //                qty += value * DXUtility.getValue(e.row.data, 'ProductConversionM');
                        //        }
                        //        else if (unitIndex == 2)
                        //            qty += value;
                        //    }
                        //    ea.value = qty + "";
                        //    DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyTransfer'), qty);
                        //}

                        var conversion = CommonUtility.getConversion(
                            (ea.value) ? ea.value : '0/0/0',
                            DXUtility.getValue(e.row.data, 'ProductConversionL'),
                            DXUtility.getValue(e.row.data, 'ProductConversionM'),
                            DXUtility.getValue(e.row.data, 'ProductConversionS')
                        );

                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyTransfer'), conversion.qtyTransaction);
                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyConvL'), conversion.qtyConvL);
                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyConvM'), conversion.qtyConvM);
                        DXUtility.setValue(e.row.data, e.dataField.replace('QtyTransferConv', 'QtyConvS'), conversion.qtyConvS);

                        ea.value = conversion.qtyTransactionConv;
                        ea.component.option('value', ea.value);
                        e.setValue(ea.value);
                    }
                });

                e.cancel = true;
            }
        }
    };

    productLotPopupEdit.dataGridOptions.onRowInserted = function (info) {
        CommonUtility.validateDataGridInsertedTransactionDetails(
            info.component,
            new Dismoyo_Ciptoning_Client.vStockTransferDetailsViewModel(info.data).toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowRemoved = function (info) {
        CommonUtility.validateDataGridRemovedTransactionDetails(
            info.component,
            info.data.toJS()
        );
    };

    productLotPopupEdit.dataGridOptions.onRowUpdating = function (info) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        CommonUtility.validateDataGridUpdatingTransactionDetails(
            info,
            productLotColumns.qtyConvLColumn,
            productLotColumns.qtyConvMColumn,
            productLotColumns.qtyConvSColumn,
            productLotColumns.qtyTransferConvColumn,
            productLotColumns.qtyTransferColumn
        );
    };

    productLotPopupEdit.dataGridOptions.onRowValidating = function (e) {
        var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
        var productLotColumns = getProductLotColumns(itemStatusID);

        var qtyOnHand = DXUtility.getValue(e.newData, productLotColumns.qtyOnHandColumn);
        if (qtyOnHand == undefined)
            qtyOnHand = DXUtility.getValue(e.oldData, productLotColumns.qtyOnHandColumn);

        var qtyTransfer = DXUtility.getValue(e.newData, productLotColumns.qtyTransferColumn);
        if (qtyTransfer == undefined)
            qtyTransfer = DXUtility.getValue(e.oldData, productLotColumns.qtyTransferColumn);

        if (qtyTransfer <= 0) {
            e.errorText = 'Transfer Qty must be greater than 0.';
            e.isValid = false;
        }

        if (e.isValid && (qtyTransfer > qtyOnHand)) {
            e.errorText = 'Transfer Qty must be less than or equal to On Hand Qty.';
            e.isValid = false;
        }

        if (e.errorText)
            CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.onDataErrorOccurred = function (e) {
        var errorValue = e.component._controllers.editing._editData[0].data.ProductLotCode;
        switch (e.error.__id) {
            case 'E4008':
                e.error.message = 'Lot Number \'' + errorValue + '\' is already exist.';
                break;
        }

        CommonUtility.hideErrorMessageOnDataGrid();
    };

    productLotPopupEdit.dataGridOptions.summary = {
        totalItems: [{
            name: 'TotalQtyPcs',
            showInColumn: 'QtyTransferConv',
            displayFormat: 'Total Qty (Pcs): {0}',
            valueFormat: 'decimal',
            summaryType: 'custom'
        }, {
            name: 'TotalQtyLMS',
            showInColumn: 'QtyTransferConv',
            displayFormat: '(L/M/S): {0}',
            valueFormat: 'string',
            summaryType: 'custom'
        }],
        calculateCustomSummary: function (options) {
            var itemStatusID = productLotPopupEdit.popupEditOptions.itemStatusID;
            var productLotColumns = getProductLotColumns(itemStatusID);

            CommonUtility.updateProductLotEditingSummary(options,
                productLotColumns.qtyTransferConvColumn,
                productLotColumns.qtyTransferColumn);
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Product Lot Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    productLotPopupEdit.dataGridOptions.columns = [{
        dataField: 'DocumentID', visible: false
    }, {
        dataField: 'ProductID', visible: false
    }, {
        dataField: 'ProductLotID', visible: false
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number',
        validationRules: [{ type: 'required' }]
    }, {
        name: 'QtyOnHand', caption: 'On Hand Qty (Pcs)', width: '120px', allowEditing: false,
        dataType: 'number'
    }, {
        name: 'QtyTransferConv', caption: 'Transfer Qty (L/M/S)', width: '150px',
        alignment: 'right', validationRules: [{ type: 'required' }, conversionValidationRule]
    }]

    // ------------------------------------------------------------------------------------------------
    // Product Lot Popup Edit Items: Specify items of the edit data here.
    // ------------------------------------------------------------------------------------------------    
    productLotPopupEdit.formOptions.items = [{
        itemType: 'group',
        caption: 'Product',
        colCount: 4,
        colSpan: 4,
        items: [{
            dataField: 'Product',
            label: { text: 'Product' },
            colSpan: 4,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyOnHand',
            label: { text: 'On Hand Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            itemType: 'empty',
            colSpan: 2
        }, {
            dataField: 'QtyTransfer',
            label: { text: 'Transfer Qty (Pcs)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }, {
            dataField: 'QtyTransferConv',
            label: { text: '(L/M/S)' },
            colSpan: 2,
            editorOptions: {
                readOnly: true,
                onEnterKey: function () { commonPopupEdit.events.performOK(this); }
            }
        }]
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_transfer_32px.png',

        dataSource_vStockTransferDetails: dataSource_vStockTransferDetails,
        dataSource_vStockTransferSummary: dataSource_vStockTransferSummary,
        dataSource_vStockOnHandAvailable: dataSource_vStockOnHandAvailable,
        dataSource_vStockOnHandAvailableByProduct: dataSource_vStockOnHandAvailableByProduct,

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView,

        commonPopupEdit: commonPopupEdit,
        commonPopupIFrame: commonPopupIFrame,
        productLotPopupEdit: productLotPopupEdit,

        stockTransferSummaryDataGrid: stockTransferSummaryDataGrid,
        stockTransferPrintDO: stockTransferPrintDO,
        stockTransferPost: stockTransferPost,
        stockTransferDiscard: stockTransferDiscard,
        stockTransferSaveAsDraftAndNew: stockTransferSaveAsDraftAndNew
    };
};

Dismoyo_Ciptoning_Client.vStockViews = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevStockViewsModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vStockViews');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vStockViews.off('modified', handlevStockViewsModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vStockViews,
        select: [
            'ProductID',
            'Product',
            'ProductLotID',
            'ProductLotCode',
            'WarehouseID',
            'Warehouse',
            'QtyOnHandGood',
            'QtyOnHandHold',
            'QtyOnHandBad'
        ],
        sort: ['ProductID', 'ProductLotID']
    });

    Dismoyo_Ciptoning_Client.DB.vStockViews.on('modified', handlevStockViewsModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            colSpan: 2,
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        ['Warehouse']);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Stock View',
        colCount: 3,
        colSpan: 3,
        items: [{
            dataField: 'TransactionDate',
            label: { text: 'Transaction Date' },
            editorType: 'dxDateBox',
            editorOptions: {
                width: '100%',
                placeholder: 'mm/dd/yyyy',
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'WarehouseID',
            label: { text: 'Warehouse' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupWarehouseDataSource(
                    (Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ? null : ['SiteID', '=', Dismoyo_Ciptoning_Client.app.CurrentUser.SiteID()]
                ),
                displayExpr: 'Warehouse',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'ProductID',
            label: { text: 'Product' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: Dismoyo_Ciptoning_Client.LocalStore.vProducts.dataSource(),
                displayExpr: 'Product',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // TransactionDateFrom
        value = form.getEditor('TransactionDate').option('value');
        if (value instanceof Date) {
            value = DateTimeUtility.getFirstTimeOfDay(value);
            DXUtility.addFilterExpression(filterExpr, 'TransactionDate', '=', value, 'and');
        }

        // WarehouseID
        value = form.getEditor('WarehouseID').option('value');        
        DXUtility.addFilterExpression(filterExpr, 'WarehouseID', '=', value, 'and');

        // ProductID
        value = form.getEditor('ProductID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'ProductID', '=', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.selection.mode = 'single';

    commonGridView.dataGridOptions.editing.editEnabled = false;
    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.newRowOptions.visible = false;
    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.dataGridOptions.grouping = {
        autoExpandAll: false,
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'Warehouse', caption: 'Product -> Lot Number -> Warehouse',
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vStockViews_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none; border-left-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none; border-left-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'Item Status' + '</td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Product', caption: 'Product', groupIndex: 0
    }, {
        dataField: 'ProductLotCode', caption: 'Lot Number', groupIndex: 1        
    }, {
        dataField: 'QtyOnHandGood', caption: 'Good', width: '100px'
    }, {
        dataField: 'QtyOnHandHold', caption: 'Hold', width: '100px'
    }, {
        dataField: 'QtyOnHandBad', caption: 'Bad', width: '100px'
    }];

    commonGridView.dataGridOptions.customizeColumns = function (columns) {
        $.each(columns, function (e, element) {
            element.groupCellTemplate = function (groupCell, info) {
                groupCell.append($('<div>').html(info.text).css('font-weight', 'normal').css('font-style', 'normal'));
            };
        });
    };

    commonGridView.dataGridOptions.summary = {
        groupItems: [{
            column: 'QtyOnHandGood',
            summaryType: 'sum',
            displayFormat: '{0}',
            showInGroupFooter: false,
            alignByColumn: true
        }, {
            column: 'QtyOnHandHold',
            summaryType: 'sum',
            displayFormat: '{0}',
            showInGroupFooter: false,
            alignByColumn: true
        }, {
            column: 'QtyOnHandBad',
            summaryType: 'sum',
            displayFormat: '{0}',
            showInGroupFooter: false,
            alignByColumn: true
        }]
    }





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/stock_view_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vSystemParameters = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevSystemParametersModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vSystemParameters');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vSystemParameters.off('modified', handlevSystemParametersModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vSystemParameters,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vSystemParameterViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vSystemParameters.on('modified', handlevSystemParametersModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'SystemParameter',
        dataField: '',
        label: { text: 'System Parameter' },
        editorOptions: {
            placeholder: 'ID/Description',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // SystemParameter
        value = form.getEditor('SystemParameter').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'ID', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Description', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.dataGridOptions.editing.removeEnabled = false;

    commonGridView.newRowOptions.visible = false;
    commonGridView.deleteRowsOptions.visible = false;

    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow' && e.dataField == 'Code') {
            if (!e.row.inserted) {
                e.allowEditing = false;
                e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                e.cancel = true;
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', caption: 'ID', width: '180px',
        onlyAllowAdd: true,        
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vSystemParameters_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" colspan="3">' + 'SystemParameter' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Description', width: '250px',
        onlyAllowAdd: true,
    }, {
        dataField: 'Value', width: '180px',
        editorOptions: {
            maxLength: 256
        },
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/system_parameter_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vTerritories = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevTerritoriesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vTerritories');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vTerritories.off('modified', handlevTerritoriesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vTerritories,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vTerritoryViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vTerritories.on('modified', handlevTerritoriesModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'Territory',
        dataField: '',
        label: { text: 'Territory' },
        editorOptions: {
            placeholder: 'Code/Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: '',
        label: { text: '', visible: false },
        editorOptions: { visible: false }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // Territory
        value = form.getEditor('Territory').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;

    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Territories.AddNewTerritory');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Territories.EditTerritory');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Territories.DeleteTerritory');
    
    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow' && e.dataField == 'Code') {
            if (!e.row.inserted) {
                e.allowEditing = false;
                e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                e.cancel = true;
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Code', caption: 'Code', width: '70px',
        validationRules: [{ type: 'required' }],
        onlyAllowAdd: true,
        editorOptions: {
            maxLength: 10
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vTerritories_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Territory' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', width: '180px',
        editorOptions: {
            maxLength: 50
        },
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/territory_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vUsers = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevUsersModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vUsers');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vUsers.off('modified', handlevUsersModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vUsers,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vUserViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vUsers.on('modified', handlevUsersModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        name: 'User',
        dataField: '',        
        label: { text: 'User' },
        editorOptions: {
            placeholder: 'Name',
            onEnterKey: function () { collapsibleFilter.events.performSearch(); }
        }
    }, {
        dataField: 'TerritoryID',
        label: { text: 'Territory' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupTerritoryDataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                    [],
                    ['Region']);
            }
        }
    }, {
        dataField: 'RegionID',
        label: { text: 'Region' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupRegionDataSource(null),
            displayExpr: 'Region',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                    ['Territory'],
                    ['Area']);
            }
        }
    }, {
        dataField: 'AreaID',
        label: { text: 'Area' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupAreaDataSource(null),
            displayExpr: 'Area',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                    ['Region', 'Territory'],
                    ['Site']);
            }
        }
    }, {
        dataField: 'CompanyID',
        label: { text: 'Company' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupCompanyDataSource(null),
            displayExpr: 'Company',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
        }
    }, {
        dataField: 'SiteID',
        label: { text: 'Site' },
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: DataUtility.GetLookupSiteDataSource(null),
            displayExpr: 'Site',
            valueExpr: 'ID',
            placeholder: '(All)',
            searchEnabled: true,
            showClearButton: true,
            onEnterKey: function () { collapsibleFilter.events.performSearch(); },
            onValueChanged: function (e) {
                CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                    ['Company', 'Area', 'Region', 'Territory'],
                    []);
            }
        }
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        // TerritoryID
        value = form.getEditor('TerritoryID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', value, 'and');

        // RegionID
        value = form.getEditor('RegionID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', value, 'and');

        // AreaID
        value = form.getEditor('AreaID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', value, 'and');

        // CompanyID
        value = form.getEditor('CompanyID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', value, 'and');

        // SiteID
        value = form.getEditor('SiteID').option('value');
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', value, 'and');

        // User
        value = form.getEditor('User').option('value');
        DXUtility.addFilterExpression(filterExpr, 'Name', 'contains', value, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;
    
    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Users.AddNewUser');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Users.EditUser');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Users.DeleteUser');

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------
    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'Name', caption: 'User Name', width: '180px',
        validationRules: [{ type: 'required' }],
        onlyAllowAdd: true,
        editorOptions: {
            maxLength: 256
        },
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vUsers_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                tr += '</tr>'

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'IsHeadOffice', caption: 'Head Office', width: '100px', dataType: 'boolean',
        defaultValue: false,
        setCellValue: function (rowData, value) {
            var disabled = (value) ? true : false;
            if (disabled) {
                rowData.TerritoryID = null;
                rowData.RegionID = null;
                rowData.AreaID = null;
                rowData.SiteID = null;
                rowData.Company = null;                
            }
            
            var dataGrid = commonGridView.dataGrid();
            var cols = [
                'TerritoryID',
                'RegionID',
                'AreaID',
                'SiteID'
            ];

            for (var i = 0; i < cols.length; i++) {
                var col = dataGrid.columnOption(cols[i]);

                var index = -1;
                if (col.validationRules) {
                    for (var j = 0; j < col.validationRules.length; j++) {
                        if (col.validationRules[j].type == 'required') {
                            index = j;
                            break;
                        }
                    }
                }

                if (index >= 0)
                    col.validationRules.splice(0, 1);

                if (!disabled)
                    col.validationRules.splice(0, 0, { type: 'required' });

                col.allowEditing = !disabled;
                dataGrid.columnOption(cols[i], col);
            }

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'TerritoryID', caption: 'Territory', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vTerritories.dataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            rowData.RegionID = null;
            rowData.AreaID = null;
            rowData.SiteID = null;
            rowData.Company = null;
            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'RegionID', caption: 'Region', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'TerritoryID',
                    DataUtility.vRegions.dataSource);
            },
            displayExpr: 'Region',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID']);

            if (!value)
                rowData.TerritoryID = null;

            rowData.AreaID = null;
            rowData.SiteID = null;
            rowData.Company = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'AreaID', caption: 'Area', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'RegionID',
                    DataUtility.vAreas.dataSource);
            },
            displayExpr: 'Area',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID', 'RegionID']);

            if (!value) {
                rowData.TerritoryID = null;
                rowData.RegionID = null;
            }

            rowData.SiteID = null;
            rowData.Company = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', allowEditing: false
    }, {
        dataField: 'SiteID', caption: 'Site', width: '200px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'AreaID',
                    DataUtility.vSites.dataSource);
            },
            displayExpr: 'Site',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupGuidValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID', 'RegionID', 'AreaID', 'Company']);

            if (!value) {
                rowData.TerritoryID = null;
                rowData.RegionID = null;
                rowData.AreaID = null;
                rowData.Company = null;
            }

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'StatusID', caption: 'Status', width: '100px',
        defaultValue: 1,
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vSystemLookups.dataSource(['Group', '=', 'UserStatus']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/user_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};

Dismoyo_Ciptoning_Client.vWarehouses = function (params, viewInfo) {
    'use strict';

    var shouldReload = false;
    var openCreateViewAsRoot = viewInfo.layoutController.name === 'split';
    var isReady = $.Deferred();
    var dataSourceObservable = ko.observable();
    var dataSource;

    function handlevWarehousesModification() { shouldReload = true; }

    var pane;

    function checkContainer() {
        pane = CommonUtility.configureCommonGridViewLayout('vWarehouses');
        if (!pane)
            setTimeout(checkContainer, 50);
    }

    function handleViewShowing() {
        checkContainer();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            var filters = [
                ['TerritoryID', '=', user.TerritoryID()], 'and',
                ['RegionID', '=', user.RegionID()], 'and',
                ['AreaID', '=', user.AreaID()], 'and',
                ['CompanyID', '=', user.CompanyID()], 'and',
                ['SiteID', '=', user.SiteID()]
            ];

            dataSource.filter(filters);
        }

        if (!dataSourceObservable()) {
            dataSourceObservable(dataSource);
            dataSource.load().always(function () { isReady.resolve(); });
        }
        else if (shouldReload)
            refreshList();
    }

    function handleViewDisposing() { Dismoyo_Ciptoning_Client.DB.vWarehouses.off('modified', handlevWarehousesModification); }


    function refreshList() {
        shouldReload = false; dataSource.pageIndex(0); dataSource.load();
    }

    function createCodeMask(siteID) {
        return "\\" + siteID.split("").join("\\") + "-AAAAA";
    }

    dataSource = new DevExpress.data.DataSource({
        store: Dismoyo_Ciptoning_Client.DB.vWarehouses,
        map: function (item) { return new Dismoyo_Ciptoning_Client.vWarehouseViewModel(item); }
    });

    Dismoyo_Ciptoning_Client.DB.vWarehouses.on('modified', handlevWarehousesModification);





    // ------------------------------------------------------------------------------------------------
    // collapsibleFilter
    // ------------------------------------------------------------------------------------------------
    var collapsibleFilter = new Dismoyo_Ciptoning_Client.CollapsibleFilter();

    collapsibleFilter.filterOptions.onInitialized = function () {
        collapsibleFilter.filter().element().resize(function () {
            if (pane)
                pane.resizeAll();
        });
    };

    // ------------------------------------------------------------------------------------------------
    // Filter Items: Specify items of the filter here.
    // ------------------------------------------------------------------------------------------------    
    collapsibleFilter.formOptions.items = [{
        itemType: 'group',
        caption: 'Organization',
        colCount: 3,
        colSpan: 3,
        visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        items: [{
            dataField: 'TerritoryID',
            label: { text: 'Territory' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupTerritoryDataSource(null),
                displayExpr: 'Territory',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Territory',
                        [],
                        ['Region']);
                }
            }
        }, {
            dataField: 'RegionID',
            label: { text: 'Region' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupRegionDataSource(null),
                displayExpr: 'Region',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Region',
                        ['Territory'],
                        ['Area']);
                }
            }
        }, {
            dataField: 'AreaID',
            label: { text: 'Area' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupAreaDataSource(null),
                displayExpr: 'Area',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Area',
                        ['Region', 'Territory'],
                        ['Company', 'Site']);
                }
            }
        }, {
            dataField: 'CompanyID',
            label: { text: 'Company' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupCompanyDataSource(null),
                displayExpr: 'Company',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(this); }
            }
        }, {
            dataField: 'SiteID',
            label: { text: 'Site' },
            editorType: 'dxSelectBox',
            editorOptions: {
                dataSource: DataUtility.GetLookupSiteDataSource(null),
                displayExpr: 'Site',
                valueExpr: 'ID',
                placeholder: '(All)',
                searchEnabled: true,
                showClearButton: true,
                onEnterKey: function () { collapsibleFilter.events.performSearch(); },
                onValueChanged: function (e) {
                    CommonUtility.cascadeValueChanged(collapsibleFilter.form(), e.selectedItem, e.value, 'Site',
                        ['Company', 'Area', 'Region', 'Territory'],
                        []);
                }
            }
        }]
    }, {
        itemType: 'group',
        caption: 'Warehouse',
        colCount: 3,
        colSpan: 3,
        items: [{
            name: 'Warehouse',
            dataField: '',
            label: { text: 'Warehouse' },
            editorType: 'dxTextBox',
            editorOptions: {
                placeholder: 'Code/Name',
                onEnterKey: function () { collapsibleFilter.events.performSearch(); }
            }
        }, {
            dataField: '',
            label: { text: '', visible: false },
            editorOptions: { visible: false }
        }]
    }];



    // ------------------------------------------------------------------------------------------------
    // Perform search by specified criteria (filter).
    // ------------------------------------------------------------------------------------------------
    collapsibleFilter.events.performSearch = function () {
        var dataGrid = commonGridView.dataGrid();
        var form = collapsibleFilter.form();

        var filterExpr = [];
        var value;

        dataGrid.clearFilter();

        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        var territoryID = user.TerritoryID();
        var regionID = user.RegionID();
        var areaID = user.AreaID();
        var companyID = user.CompanyID();
        var siteID = user.SiteID();

        if (form.itemOption('Organization').visible) {
            territoryID = form.getEditor('TerritoryID').option('value');
            regionID = form.getEditor('RegionID').option('value');
            areaID = form.getEditor('AreaID').option('value');
            companyID = form.getEditor('CompanyID').option('value');
            siteID = form.getEditor('SiteID').option('value');
        }

        // TerritoryID
        DXUtility.addFilterExpression(filterExpr, 'TerritoryID', '=', territoryID, 'and');

        // RegionID
        DXUtility.addFilterExpression(filterExpr, 'RegionID', '=', regionID, 'and');

        // AreaID
        DXUtility.addFilterExpression(filterExpr, 'AreaID', '=', areaID, 'and');

        // CompanyID
        DXUtility.addFilterExpression(filterExpr, 'CompanyID', '=', companyID, 'and');

        // SiteID
        DXUtility.addFilterExpression(filterExpr, 'SiteID', '=', siteID, 'and');

        // Warehouse
        value = form.getEditor('Warehouse').option('value');
        var groupFilterExpr = [];
        DXUtility.addFilterExpression(groupFilterExpr, 'Code', 'contains', value, 'or');
        DXUtility.addFilterExpression(groupFilterExpr, 'Name', 'contains', value, 'or');
        DXUtility.addGroupFilterExpression(filterExpr, groupFilterExpr, 'and');

        if (filterExpr.length > 0)
            dataGrid.filter(filterExpr);
        else
            dataGrid.refresh();
    };





    // ------------------------------------------------------------------------------------------------
    // commonGridView
    // ------------------------------------------------------------------------------------------------
    var commonGridView = new Dismoyo_Ciptoning_Client.CommonGridView();
    commonGridView.dataGridOptions.dataSource = dataSource;
    
    commonGridView.newRowOptions.disabled = !Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Warehouses.AddNewWarehouse');
    commonGridView.dataGridOptions.editing.editEnabled = commonGridView.dataGridOptions.editing.allowUpdating =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Warehouses.EditWarehouse');
    commonGridView.dataGridOptions.editing.removeEnabled = commonGridView.dataGridOptions.editing.allowDeleting =
        Dismoyo_Ciptoning_Client.app.CurrentUser.isAuthorized('Warehouses.DeleteWarehouse');

    commonGridView.events.initRow = function (info) {
        var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
        if (!user.IsHeadOffice()) {
            info.data.TerritoryID = user.TerritoryID();
            info.data.RegionID = user.RegionID();
            info.data.AreaID = user.AreaID();
            info.data.SiteID = user.SiteID();
            info.data.CompanyID = user.CompanyID();
        }
    };

    //commonGridView.dataGridOptions.onInitNewRow = function (info) {
    //    info.data.StatusID = 1; // Active
    //};

    //// For masking purpose (not use yet)
    //commonGridView.dataGridOptions.onEditorPrepared = function (e) {
    //    if (!Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
    //        if (e.dataField == 'Code') {
    //            e.editorElement.dxTextBox('instance')
    //                .option('mask', createCodeMask(Dismoyo_Ciptoning_Client.app.CurrentUser.SiteCode()));
    //        }
    //    }
    //};

    commonGridView.dataGridOptions.onEditorPreparing = function (e) {
        if (e.parentType == 'dataRow') {
            if (e.row) {
                e.component.editRowIndex = e.row.rowIndex;

                //// For masking purpose (not use yet)
                //if (e.dataField == 'Site') {
                //    e.editorElement.dxSelectBox({
                //        dataSource: Dismoyo_Ciptoning_Client.LocalStore.vAreas.dataSource(),
                //        displayExpr: 'Site',
                //        valueExpr: 'ID',
                //        allowClearing: true,
                //        value: e.value,
                //        validationRules: [{ type: 'required' }],
                //        onValueChanged: function (ea) {
                //            if (ea.value) {
                //                var item = this.option('selectedItem');
                //                if (item) {
                //                    e.component.cellValue(e.row.rowIndex, 'TerritoryID', item.TerritoryID());
                //                    e.component.cellValue(e.row.rowIndex, 'RegionID', item.RegionID());
                //                    e.component.cellValue(e.row.rowIndex, 'AreaID', item.AreaID());
                //                    e.component.cellValue(e.row.rowIndex, 'Company', item.Company());

                //                    e.component.cellValue(e.row.rowIndex, 'Code', ea.selectedItem.Code() + "-");
                //                    var codeTextBox = e.component.getCellElement(e.row.rowIndex, 'Code').find('.dx-textbox').dxTextBox('instance');
                //                    codeTextBox.option('mask', createCodeMask(ea.selectedItem.Code()));
                //                }
                //            }

                //            e.component.cellValue(e.row.rowIndex, 'Site', ea.value);
                //            e.setValue(ea.value);
                //        },
                //        itemTemplate: function (data, index, element) {
                //            if (typeof data.Site == "function")
                //                data = data.toJS();

                //            var div = "<p title='" + data.Site + "'>" + data.Site + "</p>";
                //            return div;
                //        }
                //    });

                //    e.cancel = true;
                //}

                //if (e.dataField == 'Code') {
                //    if (!e.row.inserted) {
                //        e.allowEditing = false;
                //        e.editorElement.append($('<td style="padding: 5px;">').text(e.row.data.Code()));
                //        e.cancel = true;
                //    }
                //}
            }
        }
    };

    // ------------------------------------------------------------------------------------------------
    // Data Grid Columns: Specify columns of the data grid here.
    // ------------------------------------------------------------------------------------------------

    // Added by Andhika 2016.05.16 UAT Issue No.157 -------
    var codeValidationFormat = {
        type: 'pattern',
        pattern: /^\w+\-\w+$/,
        message: 'Format must be [Site Code]-[Warehouse Code].'
    };

    var codeValidationCustom = {
        type: 'custom',
        validationCallback: function (options) {
            var valid = true;
            var siteCode = "";
            if (!Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) {
                siteCode = Dismoyo_Ciptoning_Client.app.CurrentUser.SiteCode()
            } else {
                var data = options.validator._validationGroup.data;
                if (data.SiteID) {
                    var row = Dismoyo_Ciptoning_Client.LocalStore.vSites.dataByFilter(['ID', '=', data.SiteID._value])[0];
                    if (row) {
                        siteCode = row.Code();
                    }
                }
            }

            if (siteCode != "" && siteCode != undefined) {
                if (siteCode != options.value.split("-")[0]) {
                    valid = false;
                }
            }

            return valid;
        },
        message: 'Site Code must be ' + ((!Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ?
            Dismoyo_Ciptoning_Client.app.CurrentUser.SiteCode() + "." : 'same as selected Site.')
    }
    //------------------------------------------------------

    commonGridView.dataGridOptions.columns = [{
        dataField: 'ID', visible: false
    }, {
        dataField: 'TerritoryID', caption: 'Territory', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vTerritories.dataSource(null),
            displayExpr: 'Territory',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            rowData.RegionID = null;
            rowData.AreaID = null;
            rowData.SiteID = null;
            rowData.Company = null;
            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'RegionID', caption: 'Region', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'TerritoryID',
                    DataUtility.vRegions.dataSource);
            },
            displayExpr: 'Region',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID']);

            rowData.AreaID = null;
            rowData.SiteID = null;
            rowData.Company = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'AreaID', caption: 'Area', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'RegionID',
                    DataUtility.vAreas.dataSource);
            },
            displayExpr: 'Area',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID', 'RegionID']);

            rowData.SiteID = null;
            rowData.Company = null;

            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'Company', caption: 'Company', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(), allowEditing: false
    }, {
        dataField: 'SiteID', caption: 'Site', width: '200px', visible: Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice(),
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: function (options) {
                return CommonUtility.cascadeLoadLookupDataSource(options.data, 'AreaID',
                    DataUtility.vSites.dataSource);
            },
            displayExpr: 'Site',
            valueExpr: 'ID',
            allowClearing: true
        },
        setCellValue: function (rowData, value) {
            CommonUtility.cascadeLookupGuidValueChanged(this.lookup.items, rowData, 'ID', value,
                ['TerritoryID', 'RegionID', 'AreaID', 'Company']);

            rowData.Code = $.grep(this.lookup.items, function (e) { return e.ID()._value == value._value; })[0].Code() + "-";
            
            this.defaultSetCellValue(rowData, value);
        }
    }, {
        dataField: 'Code', width: '120px',
        defaultValue: (!Dismoyo_Ciptoning_Client.app.CurrentUser.IsHeadOffice()) ?
            Dismoyo_Ciptoning_Client.app.CurrentUser.SiteCode() + "-" : undefined,
        validationRules: [{ type: 'required' }, codeValidationFormat, codeValidationCustom],
        editorOptions: {
            maxLength: 12
        },
        onlyAllowAdd: true,
        headerCellTemplate: function (columnHeader, headerInfo) {
            var dataGrid = $('#vWarehouses_commonGridView').find('.dx-datagrid:first-child');
            if (!dataGrid.find('.datagrid-bandedHeader:first').length > 0) {
                var tr = '<tr class="dx-row dx-column-lines datagrid-bandedHeader">';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                var user = Dismoyo_Ciptoning_Client.app.CurrentUser;
                if (user.IsHeadOffice()) {
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                }

                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Warehouse' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;">' + '' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Created' + '</td>';
                tr += '       <td class="dx-datagrid-action" colspan="2">' + 'Modified' + '</td>';

                if (commonGridView.dataGridOptions.editing.allowUpdating ||
                    commonGridView.dataGridOptions.editing.allowDeleting)
                    tr += '       <td class="dx-datagrid-action" style="border-bottom-style: none;"></td>';

                tr += '</tr>';

                var table = dataGrid.find('.dx-header-row:first-child');
                $(tr).insertBefore(table[0].parentElement);
                $(columnHeader).append(HtmlUtility.htmlEncode(headerInfo.column.caption));
            }
        }
    }, {
        dataField: 'Name', width: '180px',
        editorOptions: {
            maxLength: 50
        },
        validationRules: [{ type: 'required' }]
    }, {
        dataField: 'TypeID', caption: 'Type', width: '120px',
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vSystemLookups.dataSource(['Group', '=', 'WarehouseType']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        }
    }, {
        dataField: 'StatusID', caption: 'Status', width: '100px',
        defaultValue: 1,
        validationRules: [{ type: 'required' }],
        lookup: {
            dataSource: DataUtility.vSystemLookups.dataSource(['Group', '=', 'WarehouseStatus']),
            displayExpr: 'Name',
            valueExpr: 'Value_Int32',
            allowClearing: true
        }
    }, {
        dataField: 'CreatedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'CreatedByUserName', caption: 'By', width: '140px', allowEditing: false
    }, {
        dataField: 'ModifiedDate', caption: 'Date', width: '140px', allowEditing: false,
        customizeText: function (cellInfo) {
            if (cellInfo.value)
                return DateTimeUtility.convertToLocal(cellInfo.value).toLocaleString();

            return null;
        }
    }, {
        dataField: 'ModifiedByUserName', caption: 'By', width: '140px', allowEditing: false
    }];





    return {
        isReady: isReady.promise(),
        dataSource: dataSource,
        refreshList: refreshList,
        viewShowing: handleViewShowing,
        viewDisposing: handleViewDisposing,
        openCreateViewAsRoot: openCreateViewAsRoot,


        // ------------------------------------------------------------------------------------------------
        // Register Public Properties/Methods
        // ------------------------------------------------------------------------------------------------

        icon: 'Images/warehouse_32px.png',

        collapsibleFilter: collapsibleFilter,

        commonGridView: commonGridView
    };
};