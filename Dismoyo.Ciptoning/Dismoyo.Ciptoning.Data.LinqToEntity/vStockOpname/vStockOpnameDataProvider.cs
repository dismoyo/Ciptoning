// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vStockOpnameDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vStockOpnameDataProvider : DefaultViewDataProvider<vStockOpname>, IvStockOpnameDataProvider
    {

        #region Methods

        protected override void OnInsertData(vStockOpname obj, bool useTransaction)
        {
            var stockOpnameDataProvider = DataConfiguration.GetDefaultDataProvider<IStockOpnameDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();

            var stockOpname = new StockOpname();
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);

            stockOpname.DocumentID = (obj.DocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DocumentID);
            stockOpname.DocumentCode = string.Format("{0}-{1}-06-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 6).ToString().PadLeft(7, '0'));
            stockOpname.TransactionDate = obj.TransactionDate;
            stockOpname.WarehouseID = obj.WarehouseID;
            stockOpname.PIC = obj.PIC;
            stockOpname.ReferenceNumber = obj.ReferenceNumber;
            stockOpname.AttachmentFile = obj.AttachmentFile;
            stockOpname.DocumentStatusID = 1; // Draft

            stockOpnameDataProvider.InsertData(stockOpname, useTransaction);
            if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
            {
                // Insert new child data.
                var vStockOpnameSummaryDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvStockOpnameSummaryDataProvider>();
                foreach (var summary in obj.ChildSummaries)
                {
                    summary.DocumentID = stockOpname.DocumentID;
                    vStockOpnameSummaryDataProvider.InsertData(summary, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vStockOpname obj, bool useTransaction)
        {
            var stockOpnameDataProvider = DataConfiguration.GetDefaultDataProvider<IStockOpnameDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();

            var stockOpname = stockOpnameDataProvider.GetData(obj.DocumentID);
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);

            var stockOpnameSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<IStockOpnameSummaryDataProvider>();
            var vStockOpnameSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<IvStockOpnameSummaryDataProvider>();

            if (stockOpname.DocumentStatusID == 1) // Draft
            {
                stockOpname.TransactionDate = obj.TransactionDate;
                stockOpname.PIC = obj.PIC;
                stockOpname.ReferenceNumber = obj.ReferenceNumber;
                if (obj.AttachmentFile != null)
                    stockOpname.AttachmentFile = obj.AttachmentFile;

                if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                {
                    var insertChilds = obj.ChildSummaries.ToList();
                    var deleteChilds = stockOpnameSummaryDataProvider.GetDataByDocumentID(stockOpname.DocumentID);
                    var updateChilds = new List<vStockOpnameSummary>();
                    int i = 0;
                    while (i < deleteChilds.Count)
                    {
                        var data = insertChilds.SingleOrDefault(p => (p.ProductID == deleteChilds[i].ProductID));
                        if (data != null)
                        {
                            insertChilds.Remove(data);
                            deleteChilds.RemoveAt(i);
                            updateChilds.Add(data);
                            continue;
                        }

                        i++;
                    }

                    // Removes existing and unused child data.
                    foreach (var summary in deleteChilds)
                        stockOpnameSummaryDataProvider.DeleteData(summary, useTransaction);

                    // Update existing child data.
                    foreach (var summary in updateChilds)
                        vStockOpnameSummaryDataProvider.UpdateData(summary, useTransaction);

                    // Insert new child data.
                    foreach (var summary in insertChilds)
                    {
                        summary.DocumentID = stockOpname.DocumentID;
                        vStockOpnameSummaryDataProvider.InsertData(summary, useTransaction);
                    }
                }
            }

            if (stockOpname.DocumentStatusID != obj.DocumentStatusID)
            {
                if ((stockOpname.DocumentStatusID == 1) && (obj.DocumentStatusID == 2)) // Draft to Posted
                {
                    string message = "Stock Opname transaction can only be Posted when there is no another pending transaction. " +
                        "Please make sure all Draft transactions has been Posted/Discarded.";
                    if (IsAnyDraftInStockOpname(obj.DocumentID, obj.WarehouseID))
                    {
                        throw new Exception(message);
                    }

                    if (IsAnyDraftInStockReceival(obj.WarehouseID))
                    {
                        throw new Exception(message);
                    }

                    if (IsAnyDraftInStockChange(obj.WarehouseID))
                    {
                        throw new Exception(message);
                    }

                    if (IsAnyDraftInStockDisposal(obj.WarehouseID))
                    {
                        throw new Exception(message);
                    }

                    if (IsAnyDraftInStockTransfer(obj.WarehouseID))
                    {
                        throw new Exception(message);
                    }

                    var closingPeriodDataProvider = DataConfiguration.GetDefaultDataProvider<IClosingPeriodDataProvider>();

                    if (!closingPeriodDataProvider.IsOpenPeriod(vWarehouse.SiteID.Value, obj.TransactionDate.Year,
                        obj.TransactionDate.Month))
                        throw new Exception(string.Format("This Site for {0:MMM} {0:yyyy} period is already Closed.",
                            obj.TransactionDate));

                    stockOpname.PostedDate = DefaultDataContext.GetDBServerUtcDateTime();
                    
                    // Insert data to Stock Transaction.
                    var stockTransactionDataProvider = DataConfiguration.GetDefaultDataProvider<IStockTransactionDataProvider>();
                    var stockOnHandCurrentDataProvider = DataConfiguration.GetDefaultDataProvider<IStockOnHandCurrentDataProvider>();

                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                int qtyOnHandGood = stockOnHandCurrentDataProvider.GetProductSummaryStockOnHand(
                                    stockOpname.WarehouseID, summary.ProductID, 1);
                                int qtyOnHandHold = stockOnHandCurrentDataProvider.GetProductSummaryStockOnHand(
                                    stockOpname.WarehouseID, summary.ProductID, 2);
                                int qtyOnHandBad = stockOnHandCurrentDataProvider.GetProductSummaryStockOnHand(
                                    stockOpname.WarehouseID, summary.ProductID, 3);

                                foreach (var details in summary.ChildDetails)
                                {
                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = stockOpname.DocumentID;
                                    stockTransaction.TransactionDate = stockOpname.TransactionDate;
                                    stockTransaction.TransactionTypeID = 6; // Stock Opname
                                    stockTransaction.DocumentCode = stockOpname.DocumentCode;
                                    stockTransaction.SourceID = stockOpname.WarehouseID;
                                    stockTransaction.DestinationID = null;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;
                                    stockTransaction.QtyGood = details.QtyGood;
                                    stockTransaction.QtyHold = details.QtyHold;
                                    stockTransaction.QtyBad = details.QtyBad;

                                    var stockOnHandCurrent = stockOnHandCurrentDataProvider.GetData(stockOpname.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    details.QtyOnHandGood = 0;
                                    details.QtyOnHandHold = 0;
                                    details.QtyOnHandBad = 0;

                                    if (stockOnHandCurrent == null)
                                    {
                                        stockOnHandCurrent = new StockOnHandCurrent();
                                        stockOnHandCurrent.WarehouseID = stockOpname.WarehouseID;
                                        stockOnHandCurrent.ProductID = summary.ProductID;
                                        stockOnHandCurrent.ProductLotID = details.ProductLotID;
                                        stockOnHandCurrent.QtyOnHandGood = details.QtyGood;
                                        stockOnHandCurrent.QtyOnHandHold = details.QtyHold;
                                        stockOnHandCurrent.QtyOnHandBad = details.QtyBad;

                                        stockOnHandCurrentDataProvider.InsertData(stockOnHandCurrent, useTransaction);
                                    }
                                    else
                                    {
                                        details.QtyOnHandGood = stockOnHandCurrent.QtyOnHandGood;
                                        details.QtyOnHandHold = stockOnHandCurrent.QtyOnHandHold;
                                        details.QtyOnHandBad = stockOnHandCurrent.QtyOnHandBad;

                                        stockOnHandCurrent.QtyOnHandGood += details.QtyGood;
                                        stockOnHandCurrent.QtyOnHandHold += details.QtyHold;
                                        stockOnHandCurrent.QtyOnHandBad += details.QtyBad;

                                        stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrent, useTransaction);
                                    }

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }

                                if ((summary.QtyOnHandGood != qtyOnHandGood) ||
                                    (summary.QtyOnHandHold != qtyOnHandHold) ||
                                    (summary.QtyOnHandBad != qtyOnHandBad))
                                {
                                    summary.QtyOnHandGood = qtyOnHandGood;
                                    summary.QtyOnHandHold = qtyOnHandHold;
                                    summary.QtyOnHandBad = qtyOnHandBad;
                                    vStockOpnameSummaryDataProvider.UpdateData(summary, useTransaction);
                                }
                            }
                        }
                    }

                    stockOpname.DocumentStatusID = 2; // Posted
                }
                else if ((stockOpname.DocumentStatusID == 1) && (obj.DocumentStatusID == 3)) // Draft to Discarded
                {
                    stockOpname.DocumentStatusID = 3; // Discarded
                }
            }

            stockOpnameDataProvider.UpdateData(stockOpname);
        }


        public IEnumerable<StockOpname> GetStockOpnames(Guid WarehouseID, Guid ThisDocumentID)
        {
            IQueryable<StockOpname> query = (from obj in DataContext.Set<StockOpname>()
                                             where obj.WarehouseID == WarehouseID && obj.DocumentID != ThisDocumentID
                                             select obj);
            return query;
        }

        public IEnumerable<StockOpnameDetails> GetStockOpnameDetails(Guid DocumentID)
        {
            IQueryable<StockOpnameDetails> query = (from obj in DataContext.Set<StockOpnameDetails>()
                                             where obj.DocumentID == DocumentID
                                             select obj);
            return query;
        }

        public bool IsAnyDraftInStockOpname(Guid DocumentID, Guid WarehouseID)
        {
            IQueryable<StockOpname> query = (from obj in DataContext.Set<StockOpname>()
                                             where obj.WarehouseID == WarehouseID
                                             && obj.DocumentID != DocumentID
                                             && obj.DocumentStatusID == 1
                                             select obj);
            return query.Count() > 0;
        }

        public bool IsAnyDraftInStockReceival(Guid WarehouseID)
        {
            IQueryable<StockReceive> query = (from obj in DataContext.Set<StockReceive>()
                                              where obj.WarehouseID == WarehouseID
                                              && obj.DocumentStatusID == 1
                                              select obj);
            return query.Count() > 0;
        }

        public bool IsAnyDraftInStockChange(Guid WarehouseID)
        {
            IQueryable<StockChanges> query = (from obj in DataContext.Set<StockChanges>()
                                              where obj.WarehouseID == WarehouseID
                                              && obj.DocumentStatusID == 1
                                              select obj);
            return query.Count() > 0;
        }

        public bool IsAnyDraftInStockDisposal(Guid WarehouseID)
        {
            IQueryable<StockDisposal> query = (from obj in DataContext.Set<StockDisposal>()
                                              where obj.WarehouseID == WarehouseID
                                              && obj.DocumentStatusID == 1
                                              select obj);
            return query.Count() > 0;
        }

        public bool IsAnyDraftInStockTransfer(Guid WarehouseID)
        {
            IQueryable<StockTransfer> query = (from obj in DataContext.Set<StockTransfer>()
                                              where obj.SourceWarehouseID == WarehouseID
                                              && obj.DocumentStatusID == 1
                                              select obj);
            return query.Count() > 0;
        }

        #endregion

    }

}
