// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSalesOrderSwapDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesOrderSwapDataProvider : DefaultViewDataProvider<vSalesOrderSwap>, IvSalesOrderSwapDataProvider
    {

        #region Methods

        protected override void OnInsertData(vSalesOrderSwap obj, bool useTransaction)
        {
            var salesOrderSwapDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSwapDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();
            var deliveryOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IDeliveryOrderDataProvider>();

            var salesOrderSwap = new SalesOrderSwap();
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);
            var deliveryOrder = new DeliveryOrder();

            salesOrderSwap.DocumentID = (obj.DocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DocumentID);
            salesOrderSwap.DocumentCode = string.Format("{0}-{1}-03-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 3).ToString().PadLeft(7, '0'));
            salesOrderSwap.TransactionDate = obj.TransactionDate;

            salesOrderSwap.ReferenceNumber = obj.ReferenceNumber;
            salesOrderSwap.DocumentStatusReason = obj.DocumentStatusReason;
            salesOrderSwap.AttachmentFile = obj.AttachmentFile;
            salesOrderSwap.SalesmanID = obj.SalesmanID;
            salesOrderSwap.WarehouseID = obj.WarehouseID;
            salesOrderSwap.CustomerID = obj.CustomerID;
            salesOrderSwap.SFAInvoiceDocumentCode = obj.SFAInvoiceDocumentCode;

            deliveryOrder.DocumentID = (obj.DODocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DODocumentID);
            deliveryOrder.DocumentCode = string.Format("{0}-{1}-10-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 10).ToString().PadLeft(7, '0'));
            deliveryOrder.TransactionDate = salesOrderSwap.TransactionDate;
            deliveryOrder.RefDocumentID = salesOrderSwap.DocumentID;
            deliveryOrder.RefTransactionTypeID = 3; // Sales Order Swap
            deliveryOrder.ShipmentDate = obj.DOShipmentDate;
            deliveryOrder.ReceivedDate = obj.DOReceivedDate;
            deliveryOrder.PrintedCount = 0;

            salesOrderSwap.DODocumentID = deliveryOrder.DocumentID;

            salesOrderSwap.DocumentStatusID = 1; // Draft
            deliveryOrder.DocumentStatusID = salesOrderSwap.DocumentStatusID;

            salesOrderSwap.TotalWeight = obj.TotalWeight;
            salesOrderSwap.TotalDimension = obj.TotalDimension;
            salesOrderSwap.PrintCount = obj.PrintCount;

            salesOrderSwapDataProvider.InsertData(salesOrderSwap, useTransaction);
            deliveryOrderDataProvider.InsertData(deliveryOrder, useTransaction);

            if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
            {
                // Insert new child data.
                var vSalesOrderSwapSummaryDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderSwapSummaryDataProvider>();
                foreach (var summary in obj.ChildSummaries)
                {
                    summary.DocumentID = salesOrderSwap.DocumentID;
                    vSalesOrderSwapSummaryDataProvider.InsertData(summary, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesOrderSwap obj, bool useTransaction)
        {
            var salesOrderSwapDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSwapDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();
            var deliveryOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IDeliveryOrderDataProvider>();

            var salesOrderSwap = salesOrderSwapDataProvider.GetData(obj.DocumentID);
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);
            var deliveryOrder = deliveryOrderDataProvider.GetData(obj.DODocumentID);

            var salesOrderSwapSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<ISalesOrderSwapSummaryDataProvider>();
            var vSalesOrderSwapSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<IvSalesOrderSwapSummaryDataProvider>();

            if (salesOrderSwap.DocumentStatusID == 1) // Draft
            {
                salesOrderSwap.TransactionDate = obj.TransactionDate;
                salesOrderSwap.ReferenceNumber = obj.ReferenceNumber;
                salesOrderSwap.DocumentStatusReason = obj.DocumentStatusReason;
                salesOrderSwap.AttachmentFile = obj.AttachmentFile;
                salesOrderSwap.SalesmanID = obj.SalesmanID;
                salesOrderSwap.WarehouseID = obj.WarehouseID;
                salesOrderSwap.CustomerID = obj.CustomerID;
                salesOrderSwap.SFAInvoiceDocumentCode = obj.SFAInvoiceDocumentCode;

                deliveryOrder.ShipmentDate = obj.DOShipmentDate;
                deliveryOrder.ReceivedDate = obj.DOReceivedDate;
                deliveryOrder.PrintedCount = obj.DOPrintedCount;
                deliveryOrder.LastPrintedDate = obj.DOLastPrintedDate;

                salesOrderSwap.TotalWeight = obj.TotalWeight;
                salesOrderSwap.TotalDimension = obj.TotalDimension;
                
                if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                {
                    var insertChilds = obj.ChildSummaries.ToList();
                    var deleteChilds = salesOrderSwapSummaryDataProvider.GetDataByDocumentID(salesOrderSwap.DocumentID);
                    var updateChilds = new List<vSalesOrderSwapSummary>();
                    int i = 0;
                    while (i < deleteChilds.Count)
                    {
                        var data = insertChilds.SingleOrDefault(p => (p.ProductID == deleteChilds[i].ProductID));
                        if (data != null)
                        {
                            insertChilds.Remove(data);
                            deleteChilds.RemoveAt(i);
                            updateChilds.Add(data);
                            continue;
                        }

                        i++;
                    }

                    // Removes existing and unused child data.
                    foreach (var summary in deleteChilds)
                        salesOrderSwapSummaryDataProvider.DeleteData(summary, useTransaction);

                    // Update existing child data.
                    foreach (var summary in updateChilds)
                        vSalesOrderSwapSummaryDataProvider.UpdateData(summary, useTransaction);

                    // Insert new child data.
                    foreach (var summary in insertChilds)
                    {
                        summary.DocumentID = salesOrderSwap.DocumentID;
                        vSalesOrderSwapSummaryDataProvider.InsertData(summary, useTransaction);
                    }
                }
            }

            if (salesOrderSwap.DocumentStatusID != obj.DocumentStatusID)
            {
                var stockTransactionDataProvider = DataConfiguration.GetDefaultDataProvider<IStockTransactionDataProvider>();
                var stockOnHandCurrentDataProvider = DataConfiguration.GetDefaultDataProvider<IStockOnHandCurrentDataProvider>();

                if ((salesOrderSwap.DocumentStatusID == 1) && (obj.DocumentStatusID == 2)) // Draft to Posted
                {
                    var closingPeriodDataProvider = DataConfiguration.GetDefaultDataProvider<IClosingPeriodDataProvider>();

                    if (!closingPeriodDataProvider.IsOpenPeriod(vWarehouse.SiteID.Value, obj.TransactionDate.Year,
                        obj.TransactionDate.Month))
                        throw new Exception(string.Format("This Site for {0:MMM} {0:yyyy} period is already Closed.",
                            obj.TransactionDate));

                    salesOrderSwap.PostedDate = DefaultDataContext.GetDBServerUtcDateTime();

                    // Insert data to Stock Transaction.
                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                int qtyOnHand = stockOnHandCurrentDataProvider.GetProductSummaryStockOnHand(
                                    salesOrderSwap.WarehouseID, summary.ProductID, 1);

                                var productLotDataProvider = DataConfiguration.GetDefaultDataProvider<IProductLotDataProvider>();

                                StockTransaction stockTransactionDummyLot = null;
                                var productLot = productLotDataProvider.GetDataDummyByProductID(summary.ProductID);
                                if (productLot != null)
                                {
                                    stockTransactionDummyLot = new StockTransaction();

                                    stockTransactionDummyLot.DocumentID = salesOrderSwap.DocumentID;
                                    stockTransactionDummyLot.TransactionDate = salesOrderSwap.TransactionDate;
                                    stockTransactionDummyLot.TransactionTypeID = 3; // Sales Order Swap
                                    stockTransactionDummyLot.DocumentCode = salesOrderSwap.DocumentCode;

                                    stockTransactionDummyLot.SourceID = salesOrderSwap.WarehouseID;
                                    stockTransactionDummyLot.DestinationID = salesOrderSwap.CustomerID;

                                    stockTransactionDummyLot.ProductID = productLot.ProductID;

                                    stockTransactionDummyLot.ProductLotID = productLot.ID;

                                    stockTransactionDummyLot.QtyGood = 0;
                                    stockTransactionDummyLot.QtyHold = 0;
                                    stockTransactionDummyLot.QtyBad = 0;
                                }

                                foreach (var details in summary.ChildDetails)
                                {
                                    var stockOnHandCurrentDummyLot = stockOnHandCurrentDataProvider.GetData(salesOrderSwap.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    if ((stockOnHandCurrentDummyLot == null) || ((stockOnHandCurrentDummyLot.QtyOnHandGood + details.Qty) < 0))
                                        throw new Exception("There is not enough stock for Product '" + summary.Product +
                                            "', Lot Number '" + details.ProductLotCode + "'.");

                                    if (stockTransactionDummyLot != null)
                                    {
                                        stockTransactionDummyLot.QtyBad += details.Qty * -1;

                                        stockOnHandCurrentDummyLot.QtyOnHandBad += details.Qty * -1;

                                        if (stockTransactionDummyLot.ProductLotID == details.ProductLotID)
                                        {
                                            stockTransactionDummyLot.QtyGood = details.Qty;

                                            stockOnHandCurrentDummyLot.QtyOnHandGood += details.Qty;

                                            continue;
                                        }
                                        else
                                        {
                                            stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrentDummyLot, useTransaction);
                                        }
                                    }

                                    var stockOnHandCurrent = stockOnHandCurrentDataProvider.GetData(salesOrderSwap.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    if ((stockOnHandCurrent == null) || ((stockOnHandCurrent.QtyOnHandGood + details.Qty) < 0))
                                        throw new Exception("There is not enough stock for Product '" + summary.Product +
                                            "', Lot Number '" + details.ProductLotCode + "'.");

                                    details.QtyOnHand = stockOnHandCurrent.QtyOnHandGood;

                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = salesOrderSwap.DocumentID;
                                    stockTransaction.TransactionDate = salesOrderSwap.TransactionDate;
                                    stockTransaction.TransactionTypeID = 3; // Sales Order Swap
                                    stockTransaction.DocumentCode = salesOrderSwap.DocumentCode;

                                    stockTransaction.SourceID = salesOrderSwap.WarehouseID;
                                    stockTransaction.DestinationID = salesOrderSwap.CustomerID;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;

                                    stockTransaction.QtyGood = details.Qty;
                                    stockTransaction.QtyHold = 0;
                                    stockTransaction.QtyBad = 0;

                                    stockOnHandCurrent.QtyOnHandGood += details.Qty;
                                    stockOnHandCurrent.QtyOnHandHold += 0;
                                    stockOnHandCurrent.QtyOnHandBad += 0;

                                    stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrent, useTransaction);

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }

                                if (stockTransactionDummyLot != null)
                                    stockTransactionDataProvider.InsertData(stockTransactionDummyLot, useTransaction);
                                                                
                                if (summary.QtyOnHand != qtyOnHand)
                                {
                                    summary.QtyOnHand = qtyOnHand;
                                    vSalesOrderSwapSummaryDataProvider.UpdateData(summary, useTransaction);
                                }
                            }
                        }
                    }

                    salesOrderSwap.DocumentStatusID = 2; // Posted
                }
                else if ((salesOrderSwap.DocumentStatusID == 1) && (obj.DocumentStatusID == 3)) // Draft to Discarded
                {
                    salesOrderSwap.DocumentStatusID = 3; // Discarded
                }
                else if ((salesOrderSwap.DocumentStatusID == 2) && (obj.DocumentStatusID == 4)) // Posted to Voided
                {
                    // Insert data to Stock Transaction.
                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                var productLotDataProvider = DataConfiguration.GetDefaultDataProvider<IProductLotDataProvider>();

                                StockTransaction stockTransactionDummyLot = null;
                                var productLot = productLotDataProvider.GetDataDummyByProductID(summary.ProductID);
                                if (productLot != null)
                                {
                                    stockTransactionDummyLot = new StockTransaction();

                                    stockTransactionDummyLot.DocumentID = Guid.NewGuid();
                                    stockTransactionDummyLot.RefVoidedDocumentID = salesOrderSwap.DocumentID;
                                    stockTransactionDummyLot.TransactionDate = DefaultDataContext.GetDBServerUtcDateTime();
                                    stockTransactionDummyLot.TransactionTypeID = 3; // Sales Order Swap
                                    stockTransactionDummyLot.DocumentCode = salesOrderSwap.DocumentCode;

                                    stockTransactionDummyLot.SourceID = salesOrderSwap.WarehouseID;
                                    stockTransactionDummyLot.DestinationID = salesOrderSwap.CustomerID;

                                    stockTransactionDummyLot.ProductID = productLot.ProductID;

                                    stockTransactionDummyLot.ProductLotID = productLot.ID;

                                    stockTransactionDummyLot.QtyGood = 0;
                                    stockTransactionDummyLot.QtyHold = 0;
                                    stockTransactionDummyLot.QtyBad = 0;
                                }

                                foreach (var details in summary.ChildDetails)
                                {
                                    if (stockTransactionDummyLot != null)
                                    {
                                        stockTransactionDummyLot.QtyBad += details.Qty;

                                        if (stockTransactionDummyLot.ProductLotID == details.ProductLotID)
                                        {
                                            stockTransactionDummyLot.QtyGood = details.Qty * -1;
                                            continue;
                                        }
                                    }

                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = Guid.NewGuid();
                                    stockTransaction.RefVoidedDocumentID = salesOrderSwap.DocumentID;
                                    stockTransaction.TransactionDate = DefaultDataContext.GetDBServerUtcDateTime();
                                    stockTransaction.TransactionTypeID = 3; // Sales Order Swap
                                    stockTransaction.DocumentCode = salesOrderSwap.DocumentCode;

                                    stockTransaction.SourceID = salesOrderSwap.WarehouseID;
                                    stockTransaction.DestinationID = salesOrderSwap.CustomerID;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;

                                    stockTransaction.QtyGood = details.Qty * -1;
                                    stockTransaction.QtyHold = 0;
                                    stockTransaction.QtyBad = 0;

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }

                                if (stockTransactionDummyLot != null)
                                    stockTransactionDataProvider.InsertData(stockTransactionDummyLot, useTransaction);
                            }
                        }
                    }

                    salesOrderSwap.DocumentStatusID = 4; // Voided
                }
            }

            salesOrderSwap.PrintCount = obj.PrintCount;

            salesOrderSwapDataProvider.UpdateData(salesOrderSwap, useTransaction);
            deliveryOrderDataProvider.UpdateData(deliveryOrder, useTransaction);
        }

        #endregion

    }

}
