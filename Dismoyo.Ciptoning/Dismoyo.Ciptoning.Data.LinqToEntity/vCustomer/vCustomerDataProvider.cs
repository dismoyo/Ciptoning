// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vCustomerDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vCustomerDataProvider : DefaultViewDataProvider<vCustomer>, IvCustomerDataProvider
    {

        #region Methods

        public IQueryable<SalesOrder> GetSalesOrderByCustomerID(Guid CustomerID)
        {
            IQueryable<SalesOrder> query = (from obj in DataContext.Set<SalesOrder>()
                                            where obj.CustomerID == CustomerID
                                            select obj);
            return query;
        }
        public IQueryable<SalesOrderFOC> GetSalesOrderFOCByCustomerID(Guid CustomerID)
        {
            IQueryable<SalesOrderFOC> query = (from obj in DataContext.Set<SalesOrderFOC>()
                                               where obj.CustomerID == CustomerID
                                               select obj);
            return query;
        }
        public IQueryable<SalesOrderSample> GetSalesOrderSampleByCustomerID(Guid CustomerID)
        {
            IQueryable<SalesOrderSample> query = (from obj in DataContext.Set<SalesOrderSample>()
                                                  where obj.CustomerID == CustomerID
                                                  select obj);
            return query;
        }

        protected override void OnInsertData(vCustomer obj, bool useTransaction)
        {
            var customerDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerDataProvider>();
            var customerAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerAddressDataProvider>();
            var customerBillAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerBillAddressDataProvider>();
            var customerTaxAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerTaxAddressDataProvider>();
            var customerAdditionalInfoDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerAdditionalInfoDataProvider>();
            var customerCategoryInfoDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerCategoryInfoDataProvider>();

            var customer = new Customer();
            var customerAddress = new CustomerAddress();
            var customerBillAddress = new CustomerBillAddress();
            var customerTaxAddress = new CustomerTaxAddress();
            var customerAdditionalInfo = new CustomerAdditionalInfo();
            var customerCategoryInfo = new CustomerCategoryInfo();

            customer.ID = (obj.ID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.ID);
            customer.Code = string.Format("{0}-{1}-20-{2}", obj.Code.Substring(0, 5),
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(obj.SiteID.Value, 20).ToString().PadLeft(7, '0'));
            customer.Name = obj.Name;
            customer.SalesmanID = obj.SalesmanID;
            customer.RegisteredDate = obj.RegisteredDate;
            customer.TermOfPaymentID = obj.TermOfPaymentID;
            customer.CreditLimit = obj.CreditLimit;
            customer.PriceGroupID = obj.PriceGroupID;
            customer.DiscountGroupID = obj.DiscountGroupID;
            customer.IsTaxNumberAvailable = obj.IsTaxNumberAvailable;
            customer.TaxNumber = (customer.IsTaxNumberAvailable) ? obj.TaxNumber : null;
            customer.Photo = obj.Photo;
            customer.StatusID = obj.StatusID;
            customer.TaxSAPCode = obj.TaxSAPCode;
            

            customerAddress.Address1 = obj.Address1;
            customerAddress.Address2 = obj.Address2;
            customerAddress.Address3 = obj.Address3;
            customerAddress.City = obj.City;
            customerAddress.StateProvince = obj.StateProvince;
            customerAddress.CountryID = obj.CountryID;
            customerAddress.ZipCode = obj.ZipCode;
            customerAddress.Phone1 = obj.Phone1;
            customerAddress.Phone2 = obj.Phone2;
            customerAddress.Phone3 = obj.Phone3;
            customerAddress.Fax = obj.Fax;
            customerAddress.Email = obj.Email;
            customerAddress.Longitude = obj.Longitude;
            customerAddress.Latitude = obj.Latitude;


            customerBillAddress.IsSameAsAddress = obj.IsBillSameAsAddress;
            customerBillAddress.Name = obj.BillName;
            customerBillAddress.Address1 = obj.BillAddress1;
            customerBillAddress.Address2 = obj.BillAddress2;
            customerBillAddress.Address3 = obj.BillAddress3;
            customerBillAddress.City = obj.BillCity;
            customerBillAddress.StateProvince = obj.BillStateProvince;
            customerBillAddress.CountryID = obj.BillCountryID;
            customerBillAddress.ZipCode = obj.BillZipCode;
            customerBillAddress.Phone1 = obj.BillPhone1;
            customerBillAddress.Phone2 = obj.BillPhone2;
            customerBillAddress.Phone3 = obj.BillPhone3;
            customerBillAddress.Fax = obj.BillFax;
            customerBillAddress.Email = obj.BillEmail;
            

            customerTaxAddress.IsSameAsAddress = (obj.IsTaxSameAsAddress == null ? false : obj.IsTaxSameAsAddress);
            customerTaxAddress.IsSameAsBillAddress = (obj.IsTaxSameAsBillAddress == null ? false : obj.IsTaxSameAsBillAddress);
            customerTaxAddress.Name = obj.TaxName;
            customerTaxAddress.Address1 = obj.TaxAddress1;
            customerTaxAddress.Address2 = obj.TaxAddress2;
            customerTaxAddress.Address3 = obj.TaxAddress3;
            customerTaxAddress.City = obj.TaxCity;
            customerTaxAddress.StateProvince = obj.TaxStateProvince;
            customerTaxAddress.CountryID = obj.TaxCountryID;
            customerTaxAddress.ZipCode = obj.TaxZipCode;
            customerTaxAddress.Phone1 = obj.TaxPhone1;
            customerTaxAddress.Phone2 = obj.TaxPhone2;
            customerTaxAddress.Phone3 = obj.TaxPhone3;
            customerTaxAddress.Fax = obj.TaxFax;
            customerTaxAddress.Email = obj.TaxEmail;


            customerAdditionalInfo.AdditionalInfo1 = obj.AdditionalInfo1;
            customerAdditionalInfo.AdditionalInfo2 = obj.AdditionalInfo2;
            customerAdditionalInfo.AdditionalInfo3 = obj.AdditionalInfo3;
            customerAdditionalInfo.AdditionalInfo4 = obj.AdditionalInfo4;
            customerAdditionalInfo.AdditionalInfo5 = obj.AdditionalInfo5;
            customerAdditionalInfo.AdditionalInfo6 = obj.AdditionalInfo6;
            customerAdditionalInfo.AdditionalInfo7 = obj.AdditionalInfo7;
            customerAdditionalInfo.AdditionalInfo8 = obj.AdditionalInfo8;
            customerAdditionalInfo.AdditionalInfo9 = obj.AdditionalInfo9;
            customerAdditionalInfo.AdditionalInfo10 = obj.AdditionalInfo10;


            customerCategoryInfo.Category1ID = obj.Category1ID;
            customerCategoryInfo.Category2ID = obj.Category2ID;
            customerCategoryInfo.Category3ID = obj.Category3ID;
            customerCategoryInfo.Category4ID = obj.Category4ID;
            customerCategoryInfo.Category5ID = obj.Category5ID;
            customerCategoryInfo.Category6ID = obj.Category6ID;
            customerCategoryInfo.Category7ID = obj.Category7ID;
            customerCategoryInfo.Category8ID = obj.Category8ID;
            customerCategoryInfo.Category9ID = obj.Category9ID;
            customerCategoryInfo.Category10ID = obj.Category10ID;
            

            customerDataProvider.InsertData(customer, useTransaction);

            customerAddress.CustomerID = customer.ID;
            customerAddressDataProvider.InsertData(customerAddress, useTransaction);

            customerBillAddress.CustomerID = customer.ID;
            customerBillAddressDataProvider.InsertData(customerBillAddress, useTransaction);

            customerTaxAddress.CustomerID = customer.ID;
            customerTaxAddressDataProvider.InsertData(customerTaxAddress, useTransaction);

            customerCategoryInfo.CustomerID = customer.ID;
            customerCategoryInfoDataProvider.InsertData(customerCategoryInfo, useTransaction);

            customerAdditionalInfo.CustomerID = customer.ID;
            customerAdditionalInfoDataProvider.InsertData(customerAdditionalInfo, useTransaction);
        }

        protected override void OnUpdateData(vCustomer obj, bool useTransaction)
        {
            var customerDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerDataProvider>();
            var customerAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerAddressDataProvider>();
            var customerBillAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerBillAddressDataProvider>();
            var customerTaxAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerTaxAddressDataProvider>();
            var customerAdditionalInfoDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerAdditionalInfoDataProvider>();
            var customerCategoryInfoDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerCategoryInfoDataProvider>();

            var customer = customerDataProvider.GetData(obj.ID);
            var customerAddress = customerAddressDataProvider.GetData(obj.ID);
            var customerBillAddress = customerBillAddressDataProvider.GetData(obj.ID);
            var customerTaxAddress = customerTaxAddressDataProvider.GetData(obj.ID);
            var customerAdditionalInfo = customerAdditionalInfoDataProvider.GetData(obj.ID);
            var customerCategoryInfo = customerCategoryInfoDataProvider.GetData(obj.ID);

            //customer.Code = obj.Code;
            customer.Name = obj.Name;
            
            if (!customer.SalesmanID.Equals(obj.SalesmanID))
            {
                var routePlanDataProvider = DataConfiguration.GetDefaultDataProvider<IRoutePlanDataProvider>();

                var routePlans = routePlanDataProvider.GetDataBySalesmanIDAndCustomerID(customer.SalesmanID,
                    customer.ID);
                foreach (var item in routePlans)
                    routePlanDataProvider.DeleteData(item, useTransaction);

                customer.SalesmanID = obj.SalesmanID;
            }
                        
            customer.RegisteredDate = obj.RegisteredDate;
            customer.TermOfPaymentID = obj.TermOfPaymentID;
            customer.CreditLimit = obj.CreditLimit;
            customer.PriceGroupID = obj.PriceGroupID;
            customer.DiscountGroupID = obj.DiscountGroupID;
            customer.IsTaxNumberAvailable = obj.IsTaxNumberAvailable;
            customer.TaxNumber = (customer.IsTaxNumberAvailable) ? obj.TaxNumber : null;
            customer.Photo = obj.Photo;
            customer.StatusID = obj.StatusID;
            customer.TaxSAPCode = obj.TaxSAPCode;


            customerAddress.Address1 = obj.Address1;
            customerAddress.Address2 = obj.Address2;
            customerAddress.Address3 = obj.Address3;
            customerAddress.City = obj.City;
            customerAddress.StateProvince = obj.StateProvince;
            customerAddress.CountryID = obj.CountryID;
            customerAddress.ZipCode = obj.ZipCode;
            customerAddress.Phone1 = obj.Phone1;
            customerAddress.Phone2 = obj.Phone2;
            customerAddress.Phone3 = obj.Phone3;
            customerAddress.Fax = obj.Fax;
            customerAddress.Email = obj.Email;
            customerAddress.Longitude = obj.Longitude;
            customerAddress.Latitude = obj.Latitude;


            customerBillAddress.IsSameAsAddress = obj.IsBillSameAsAddress;
            customerBillAddress.Name = obj.BillName;
            customerBillAddress.Address1 = obj.BillAddress1;
            customerBillAddress.Address2 = obj.BillAddress2;
            customerBillAddress.Address3 = obj.BillAddress3;
            customerBillAddress.City = obj.BillCity;
            customerBillAddress.StateProvince = obj.BillStateProvince;
            customerBillAddress.CountryID = obj.BillCountryID;
            customerBillAddress.ZipCode = obj.BillZipCode;
            customerBillAddress.Phone1 = obj.BillPhone1;
            customerBillAddress.Phone2 = obj.BillPhone2;
            customerBillAddress.Phone3 = obj.BillPhone3;
            customerBillAddress.Fax = obj.BillFax;
            customerBillAddress.Email = obj.BillEmail;
            

            customerTaxAddress.IsSameAsAddress = (obj.IsTaxSameAsAddress == null ? false : obj.IsTaxSameAsAddress);
            customerTaxAddress.IsSameAsBillAddress = (obj.IsTaxSameAsBillAddress == null ? false : obj.IsTaxSameAsBillAddress);
            customerTaxAddress.Name = obj.TaxName;
            customerTaxAddress.Address1 = obj.TaxAddress1;
            customerTaxAddress.Address2 = obj.TaxAddress2;
            customerTaxAddress.Address3 = obj.TaxAddress3;
            customerTaxAddress.City = obj.TaxCity;
            customerTaxAddress.StateProvince = obj.TaxStateProvince;
            customerTaxAddress.CountryID = obj.TaxCountryID;
            customerTaxAddress.ZipCode = obj.TaxZipCode;
            customerTaxAddress.Phone1 = obj.TaxPhone1;
            customerTaxAddress.Phone2 = obj.TaxPhone2;
            customerTaxAddress.Phone3 = obj.TaxPhone3;
            customerTaxAddress.Fax = obj.TaxFax;
            customerTaxAddress.Email = obj.TaxEmail;

            
            customerAdditionalInfo.AdditionalInfo1 = obj.AdditionalInfo1;
            customerAdditionalInfo.AdditionalInfo2 = obj.AdditionalInfo2;
            customerAdditionalInfo.AdditionalInfo3 = obj.AdditionalInfo3;
            customerAdditionalInfo.AdditionalInfo4 = obj.AdditionalInfo4;
            customerAdditionalInfo.AdditionalInfo5 = obj.AdditionalInfo5;
            customerAdditionalInfo.AdditionalInfo6 = obj.AdditionalInfo6;
            customerAdditionalInfo.AdditionalInfo7 = obj.AdditionalInfo7;
            customerAdditionalInfo.AdditionalInfo8 = obj.AdditionalInfo8;
            customerAdditionalInfo.AdditionalInfo9 = obj.AdditionalInfo9;
            customerAdditionalInfo.AdditionalInfo10 = obj.AdditionalInfo10;
            

            customerCategoryInfo.Category1ID = obj.Category1ID;
            customerCategoryInfo.Category2ID = obj.Category2ID;
            customerCategoryInfo.Category3ID = obj.Category3ID;
            customerCategoryInfo.Category4ID = obj.Category4ID;
            customerCategoryInfo.Category5ID = obj.Category5ID;
            customerCategoryInfo.Category6ID = obj.Category6ID;
            customerCategoryInfo.Category7ID = obj.Category7ID;
            customerCategoryInfo.Category8ID = obj.Category8ID;
            customerCategoryInfo.Category9ID = obj.Category9ID;
            customerCategoryInfo.Category10ID = obj.Category10ID;


            customerDataProvider.UpdateData(customer, useTransaction);
            customerAddressDataProvider.UpdateData(customerAddress, useTransaction);
            customerBillAddressDataProvider.UpdateData(customerBillAddress, useTransaction);
            customerTaxAddressDataProvider.UpdateData(customerTaxAddress, useTransaction);
            customerAdditionalInfoDataProvider.UpdateData(customerAdditionalInfo, useTransaction);
            customerCategoryInfoDataProvider.UpdateData(customerCategoryInfo, useTransaction);
        }

        protected override void OnDeleteData(vCustomer obj, bool useTransaction)
        {
            var customerDataProvider = DataConfiguration.GetDefaultDataProvider<ICustomerDataProvider>();

            var customer = customerDataProvider.GetData(obj.ID);
            var salesOrder = GetSalesOrderByCustomerID(obj.ID);
            var salesOrderFOC = GetSalesOrderFOCByCustomerID(obj.ID);
            var salesOrderSample = GetSalesOrderSampleByCustomerID(obj.ID);
            if (salesOrder.Count() > 0 || salesOrderFOC.Count() > 0 || salesOrderSample.Count() > 0)
            {
                Exception ex = new Exception("Cannot Delete,This Customer Is Already Have Transaction");
                throw ex;
            }
            customer.IsDeleted = true;

            customerDataProvider.UpdateData(customer, useTransaction);
        }

        #endregion

    }

}
