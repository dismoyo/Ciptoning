// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12::51:33
// Description   : vAreaDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vAreaDataProvider : DefaultViewDataProvider<vArea>, IvAreaDataProvider
    {

        #region Methods

        public IEnumerable<Site> GetSiteByAreaID(int areaID)
        {
            IQueryable<Site> query = (from obj in DataContext.Set<Site>()
                                      where obj.AreaID == areaID
                                      select obj);
            return query;
        }

        protected override void OnInsertData(vArea obj)
        {
            var areaDataProvider = DataConfiguration.GetDefaultDataProvider<IAreaDataProvider>();

            var area = new Area();

            area.Code = obj.Code;
            area.Name = obj.Name;
            area.RegionID = obj.RegionID.Value;

            areaDataProvider.InsertData(area);
        }

        protected override void OnUpdateData(vArea obj)
        {
            var areaDataProvider = DataConfiguration.GetDefaultDataProvider<IAreaDataProvider>();

            var area = areaDataProvider.GetData(obj.ID);

            area.Code = obj.Code;
            area.Name = obj.Name;
            area.RegionID = obj.RegionID.Value;

            areaDataProvider.UpdateData(area);
        }

        protected override void OnDeleteData(vArea obj)
        {
            var areaDataProvider = DataConfiguration.GetDefaultDataProvider<IAreaDataProvider>();

            var area = areaDataProvider.GetData(obj.ID);
            var site = GetSiteByAreaID(obj.ID);
            if (site.Count() > 0)
            {
                Exception ex = new Exception("Cannot Delete,This Area Is Already used");
                throw ex;
            }
            area.IsDeleted = true;

            areaDataProvider.UpdateData(area);
        }

        #endregion

    }

}
