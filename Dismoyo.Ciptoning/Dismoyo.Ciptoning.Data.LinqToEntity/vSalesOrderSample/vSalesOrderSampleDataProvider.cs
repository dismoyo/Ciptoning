// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSalesOrderSampleDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesOrderSampleDataProvider : DefaultViewDataProvider<vSalesOrderSample>, IvSalesOrderSampleDataProvider
    {

        #region Methods

        protected override void OnInsertData(vSalesOrderSample obj, bool useTransaction)
        {
            var salesOrderSampleDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSampleDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();
            var purchaseOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IPurchaseOrderDataProvider>();
            var deliveryOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IDeliveryOrderDataProvider>();

            var salesOrderSample = new SalesOrderSample();
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);
            PurchaseOrder purchaseOrder = null;
            var deliveryOrder = new DeliveryOrder();

            salesOrderSample.DocumentID = (obj.DocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DocumentID);
            salesOrderSample.DocumentCode = string.Format("{0}-{1}-04-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 4).ToString().PadLeft(7, '0'));
            salesOrderSample.TransactionDate = obj.TransactionDate;

            if (!string.IsNullOrEmpty(obj.PODocumentCode))
            {
                purchaseOrder = new PurchaseOrder();

                purchaseOrder.DocumentID = (!obj.PODocumentID.HasValue || obj.PODocumentID.Value.Equals(Guid.Empty)) ?
                    Guid.NewGuid() : obj.PODocumentID.Value;
                purchaseOrder.DocumentCode = obj.PODocumentCode;
                purchaseOrder.SODocumentID = salesOrderSample.DocumentID;
                purchaseOrder.SOTransactionTypeID = 4; // Sales Order Sample
                purchaseOrder.TransactionDate = obj.POTransactionDate;
            }

            salesOrderSample.ReferenceNumber = obj.ReferenceNumber;
            salesOrderSample.DocumentStatusReason = obj.DocumentStatusReason;
            salesOrderSample.SalesmanID = obj.SalesmanID;
            salesOrderSample.WarehouseID = obj.WarehouseID;
            salesOrderSample.CustomerID = obj.CustomerID;
            salesOrderSample.PriceGroupID = obj.PriceGroupID;
            salesOrderSample.DiscountGroupID = obj.DiscountGroupID;
            salesOrderSample.TermOfPaymentID = obj.TermOfPaymentID;
            salesOrderSample.AddDiscountStrataReason = obj.AddDiscountStrataReason;
            salesOrderSample.SFAInvoiceDocumentCode = obj.SFAInvoiceDocumentCode;

            deliveryOrder.DocumentID = (obj.DODocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DODocumentID);
            deliveryOrder.DocumentCode = string.Format("{0}-{1}-10-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 10).ToString().PadLeft(7, '0'));
            deliveryOrder.TransactionDate = salesOrderSample.TransactionDate;
            deliveryOrder.RefDocumentID = salesOrderSample.DocumentID;
            deliveryOrder.RefTransactionTypeID = 4; // Sales Order Sample
            deliveryOrder.ShipmentDate = obj.DOShipmentDate;
            deliveryOrder.ReceivedDate = obj.DOReceivedDate;
            deliveryOrder.PrintedCount = 0;

            if (purchaseOrder != null)
            {
                salesOrderSample.PODocumentID = purchaseOrder.DocumentID;
                purchaseOrder.DocumentStatusID = 2;
            }

            salesOrderSample.DODocumentID = deliveryOrder.DocumentID;

            salesOrderSample.DocumentStatusID = 1; // Draft
            deliveryOrder.DocumentStatusID = salesOrderSample.DocumentStatusID;

            salesOrderSample.RawTotalGrossPrice = obj.RawTotalGrossPrice;
            salesOrderSample.RawTotalPrice = obj.RawTotalPrice;
            salesOrderSample.RawTotalDiscountStrata1Amount = obj.RawTotalDiscountStrata1Amount;
            salesOrderSample.RawTotalDiscountStrata2Amount = obj.RawTotalDiscountStrata2Amount;
            salesOrderSample.RawTotalDiscountStrata3Amount = obj.RawTotalDiscountStrata3Amount;
            salesOrderSample.RawTotalDiscountStrata4Amount = obj.RawTotalDiscountStrata4Amount;
            salesOrderSample.RawTotalDiscountStrata5Amount = obj.RawTotalDiscountStrata5Amount;
            salesOrderSample.RawTotalAddDiscountStrataAmount = obj.RawTotalAddDiscountStrataAmount;
            salesOrderSample.RawTotalGross = obj.RawTotalGross;
            salesOrderSample.RawTotalTax = obj.RawTotalTax;
            salesOrderSample.RawTotal = obj.RawTotal;
            salesOrderSample.TotalGrossPrice = obj.TotalGrossPrice;
            salesOrderSample.TotalPrice = obj.TotalPrice;
            salesOrderSample.TotalDiscountStrata1Amount = obj.TotalDiscountStrata1Amount;
            salesOrderSample.TotalDiscountStrata2Amount = obj.TotalDiscountStrata2Amount;
            salesOrderSample.TotalDiscountStrata3Amount = obj.TotalDiscountStrata3Amount;
            salesOrderSample.TotalDiscountStrata4Amount = obj.TotalDiscountStrata4Amount;
            salesOrderSample.TotalDiscountStrata5Amount = obj.TotalDiscountStrata5Amount;
            salesOrderSample.TotalAddDiscountStrataAmount = obj.TotalAddDiscountStrataAmount;
            salesOrderSample.TotalGross = obj.TotalGross;
            salesOrderSample.TotalTax = obj.TotalTax;
            salesOrderSample.Total = obj.Total;
            salesOrderSample.TotalWeight = obj.TotalWeight;
            salesOrderSample.TotalDimension = obj.TotalDimension;
            salesOrderSample.PrintCount = obj.PrintCount;

            salesOrderSampleDataProvider.InsertData(salesOrderSample, useTransaction);
            deliveryOrderDataProvider.InsertData(deliveryOrder, useTransaction);

            if (purchaseOrder != null)
                purchaseOrderDataProvider.InsertData(purchaseOrder, useTransaction);

            if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
            {
                // Insert new child data.
                var vSalesOrderSampleSummaryDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderSampleSummaryDataProvider>();
                foreach (var summary in obj.ChildSummaries)
                {
                    summary.DocumentID = salesOrderSample.DocumentID;
                    vSalesOrderSampleSummaryDataProvider.InsertData(summary, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesOrderSample obj, bool useTransaction)
        {
            var salesOrderSampleDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSampleDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();
            var purchaseOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IPurchaseOrderDataProvider>();
            var deliveryOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IDeliveryOrderDataProvider>();

            var salesOrderSample = salesOrderSampleDataProvider.GetData(obj.DocumentID);
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);

            PurchaseOrder purchaseOrder = null;
            if (salesOrderSample.PODocumentID.HasValue)
                purchaseOrder = purchaseOrderDataProvider.GetData(salesOrderSample.PODocumentID.Value);

            var deliveryOrder = deliveryOrderDataProvider.GetData(obj.DODocumentID);

            var salesOrderSampleSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<ISalesOrderSampleSummaryDataProvider>();
            var vSalesOrderSampleSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<IvSalesOrderSampleSummaryDataProvider>();

            bool insertPO = false;
            bool deletePO = false;
            if (salesOrderSample.DocumentStatusID == 1) // Draft
            {
                if (!string.IsNullOrEmpty(obj.PODocumentCode))
                {
                    if (purchaseOrder == null)
                    {
                        purchaseOrder = new PurchaseOrder();

                        purchaseOrder.DocumentID = (!obj.PODocumentID.HasValue || obj.PODocumentID.Value.Equals(Guid.Empty)) ?
                            Guid.NewGuid() : obj.PODocumentID.Value;
                        purchaseOrder.SODocumentID = salesOrderSample.DocumentID;
                        purchaseOrder.SOTransactionTypeID = 4; // Sales Order

                        salesOrderSample.PODocumentID = purchaseOrder.DocumentID;

                        insertPO = true;
                    }

                    purchaseOrder.DocumentCode = obj.PODocumentCode;
                    purchaseOrder.TransactionDate = obj.POTransactionDate;
                }
                else
                {
                    if (purchaseOrder != null)
                    {
                        salesOrderSample.PODocumentID = null;

                        deletePO = true;
                    }
                }

                salesOrderSample.TransactionDate = obj.TransactionDate;
                salesOrderSample.ReferenceNumber = obj.ReferenceNumber;
                salesOrderSample.DocumentStatusReason = obj.DocumentStatusReason;
                salesOrderSample.SalesmanID = obj.SalesmanID;
                salesOrderSample.WarehouseID = obj.WarehouseID;
                salesOrderSample.CustomerID = obj.CustomerID;
                salesOrderSample.PriceGroupID = obj.PriceGroupID;
                salesOrderSample.DiscountGroupID = obj.DiscountGroupID;
                salesOrderSample.TermOfPaymentID = obj.TermOfPaymentID;
                salesOrderSample.AddDiscountStrataReason = obj.AddDiscountStrataReason;
                salesOrderSample.SFAInvoiceDocumentCode = obj.SFAInvoiceDocumentCode;

                deliveryOrder.ShipmentDate = obj.DOShipmentDate;
                deliveryOrder.ReceivedDate = obj.DOReceivedDate;
                deliveryOrder.PrintedCount = obj.DOPrintedCount;
                deliveryOrder.LastPrintedDate = obj.DOLastPrintedDate;

                salesOrderSample.RawTotalGrossPrice = obj.RawTotalGrossPrice;
                salesOrderSample.RawTotalPrice = obj.RawTotalPrice;
                salesOrderSample.RawTotalDiscountStrata1Amount = obj.RawTotalDiscountStrata1Amount;
                salesOrderSample.RawTotalDiscountStrata2Amount = obj.RawTotalDiscountStrata2Amount;
                salesOrderSample.RawTotalDiscountStrata3Amount = obj.RawTotalDiscountStrata3Amount;
                salesOrderSample.RawTotalDiscountStrata4Amount = obj.RawTotalDiscountStrata4Amount;
                salesOrderSample.RawTotalDiscountStrata5Amount = obj.RawTotalDiscountStrata5Amount;
                salesOrderSample.RawTotalAddDiscountStrataAmount = obj.RawTotalAddDiscountStrataAmount;
                salesOrderSample.RawTotalGross = obj.RawTotalGross;
                salesOrderSample.RawTotalTax = obj.RawTotalTax;
                salesOrderSample.RawTotal = obj.RawTotal;
                salesOrderSample.TotalGrossPrice = obj.TotalGrossPrice;
                salesOrderSample.TotalPrice = obj.TotalPrice;
                salesOrderSample.TotalDiscountStrata1Amount = obj.TotalDiscountStrata1Amount;
                salesOrderSample.TotalDiscountStrata2Amount = obj.TotalDiscountStrata2Amount;
                salesOrderSample.TotalDiscountStrata3Amount = obj.TotalDiscountStrata3Amount;
                salesOrderSample.TotalDiscountStrata4Amount = obj.TotalDiscountStrata4Amount;
                salesOrderSample.TotalDiscountStrata5Amount = obj.TotalDiscountStrata5Amount;
                salesOrderSample.TotalAddDiscountStrataAmount = obj.TotalAddDiscountStrataAmount;
                salesOrderSample.TotalGross = obj.TotalGross;
                salesOrderSample.TotalTax = obj.TotalTax;
                salesOrderSample.Total = obj.Total;
                salesOrderSample.TotalWeight = obj.TotalWeight;
                salesOrderSample.TotalDimension = obj.TotalDimension;
                
                if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                {
                    var insertChilds = obj.ChildSummaries.ToList();
                    var deleteChilds = salesOrderSampleSummaryDataProvider.GetDataByDocumentID(salesOrderSample.DocumentID);
                    var updateChilds = new List<vSalesOrderSampleSummary>();
                    int i = 0;
                    while (i < deleteChilds.Count)
                    {
                        var data = insertChilds.SingleOrDefault(p => (p.ProductID == deleteChilds[i].ProductID));
                        if (data != null)
                        {
                            insertChilds.Remove(data);
                            deleteChilds.RemoveAt(i);
                            updateChilds.Add(data);
                            continue;
                        }

                        i++;
                    }

                    // Removes existing and unused child data.
                    foreach (var summary in deleteChilds)
                        salesOrderSampleSummaryDataProvider.DeleteData(summary, useTransaction);

                    // Update existing child data.
                    foreach (var summary in updateChilds)
                        vSalesOrderSampleSummaryDataProvider.UpdateData(summary, useTransaction);

                    // Insert new child data.
                    foreach (var summary in insertChilds)
                    {
                        summary.DocumentID = salesOrderSample.DocumentID;
                        vSalesOrderSampleSummaryDataProvider.InsertData(summary, useTransaction);
                    }
                }
            }

            if (salesOrderSample.DocumentStatusID != obj.DocumentStatusID)
            {
                var stockTransactionDataProvider = DataConfiguration.GetDefaultDataProvider<IStockTransactionDataProvider>();
                var stockOnHandCurrentDataProvider = DataConfiguration.GetDefaultDataProvider<IStockOnHandCurrentDataProvider>();

                if ((salesOrderSample.DocumentStatusID == 1) && (obj.DocumentStatusID == 2)) // Draft to Posted
                {
                    var closingPeriodDataProvider = DataConfiguration.GetDefaultDataProvider<IClosingPeriodDataProvider>();

                    if (!closingPeriodDataProvider.IsOpenPeriod(vWarehouse.SiteID.Value, obj.TransactionDate.Year,
                        obj.TransactionDate.Month))
                        throw new Exception(string.Format("This Site for {0:MMM} {0:yyyy} period is already Closed.",
                            obj.TransactionDate));

                    salesOrderSample.PostedDate = DefaultDataContext.GetDBServerUtcDateTime();

                    // Insert data to Stock Transaction.
                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                int qtyOnHand = stockOnHandCurrentDataProvider.GetProductSummaryStockOnHand(
                                    salesOrderSample.WarehouseID, summary.ProductID, 1);

                                foreach (var details in summary.ChildDetails)
                                {
                                    var stockOnHandCurrent = stockOnHandCurrentDataProvider.GetData(salesOrderSample.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    if ((stockOnHandCurrent == null) || ((stockOnHandCurrent.QtyOnHandGood + details.Qty) < 0))
                                        throw new Exception("There is not enough stock for Product '" + summary.Product +
                                            "', Lot Number '" + details.ProductLotCode + "'.");

                                    details.QtyOnHand = stockOnHandCurrent.QtyOnHandGood;

                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = salesOrderSample.DocumentID;
                                    stockTransaction.TransactionDate = salesOrderSample.TransactionDate;
                                    stockTransaction.TransactionTypeID = 4; // Sales Order Sample
                                    stockTransaction.DocumentCode = salesOrderSample.DocumentCode;

                                    stockTransaction.SourceID = salesOrderSample.WarehouseID;
                                    stockTransaction.DestinationID = salesOrderSample.CustomerID;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;

                                    stockTransaction.QtyGood = details.Qty;
                                    stockTransaction.QtyHold = 0;
                                    stockTransaction.QtyBad = 0;

                                    stockOnHandCurrent.QtyOnHandGood += details.Qty;
                                    stockOnHandCurrent.QtyOnHandHold += 0;
                                    stockOnHandCurrent.QtyOnHandBad += 0;

                                    stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrent, useTransaction);

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }

                                if (summary.QtyOnHand != qtyOnHand)
                                {
                                    summary.QtyOnHand = qtyOnHand;
                                    vSalesOrderSampleSummaryDataProvider.UpdateData(summary, useTransaction);
                                }
                            }
                        }
                    }

                    var invoiceDataProvider = DataConfiguration.GetDefaultDataProvider<IInvoiceDataProvider>();

                    var invoice = new Invoice();

                    invoice.DocumentID = Guid.NewGuid();
                    invoice.DocumentCode = string.Format("{0}-{1}-11-{2}", vWarehouse.SiteCode,
                        DateTime.Today.ToString("yy"),
                        DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 11).ToString().PadLeft(7, '0'));
                    invoice.TransactionDate = salesOrderSample.TransactionDate;
                    invoice.RefDocumentID = salesOrderSample.DocumentID;
                    invoice.RefTransactionTypeID = 4; // Sales Order Sample
                    invoice.DocumentStatusID = 1; // Draft

                    salesOrderSample.InvoiceDocumentID = invoice.DocumentID;

                    invoiceDataProvider.InsertData(invoice, useTransaction);

                    salesOrderSample.DocumentStatusID = 2; // Posted
                }
                else if ((salesOrderSample.DocumentStatusID == 1) && (obj.DocumentStatusID == 3)) // Draft to Discarded
                {
                    salesOrderSample.DocumentStatusID = 3; // Discarded
                }
                else if ((salesOrderSample.DocumentStatusID == 2) && (obj.DocumentStatusID == 4)) // Posted to Voided
                {
                    // Insert data to Stock Transaction.
                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                foreach (var details in summary.ChildDetails)
                                {
                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = Guid.NewGuid();
                                    stockTransaction.RefVoidedDocumentID = salesOrderSample.DocumentID;
                                    stockTransaction.TransactionDate = DefaultDataContext.GetDBServerUtcDateTime();
                                    stockTransaction.TransactionTypeID = 4; // Sales Order Sample
                                    stockTransaction.DocumentCode = salesOrderSample.DocumentCode;

                                    stockTransaction.SourceID = salesOrderSample.WarehouseID;
                                    stockTransaction.DestinationID = salesOrderSample.CustomerID;

                                    stockTransaction.QtyGood = details.Qty * -1;
                                    stockTransaction.QtyHold = 0;
                                    stockTransaction.QtyBad = 0;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;

                                    var stockOnHandCurrent = stockOnHandCurrentDataProvider.GetData(salesOrderSample.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    stockOnHandCurrent.QtyOnHandGood += details.Qty * -1;
                                    stockOnHandCurrent.QtyOnHandHold += 0;
                                    stockOnHandCurrent.QtyOnHandBad += 0;

                                    stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrent, useTransaction);

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }
                            }
                        }
                    }

                    salesOrderSample.DocumentStatusID = 4; // Voided
                }
            }

            salesOrderSample.PrintCount = obj.PrintCount;

            salesOrderSampleDataProvider.UpdateData(salesOrderSample, useTransaction);
            deliveryOrderDataProvider.UpdateData(deliveryOrder, useTransaction);

            if (insertPO)
                purchaseOrderDataProvider.InsertData(purchaseOrder, useTransaction);
            else if (deletePO)
                purchaseOrderDataProvider.DeleteData(purchaseOrder, useTransaction);
            else if (purchaseOrder != null)
                purchaseOrderDataProvider.UpdateData(purchaseOrder, useTransaction);
        }

        #endregion

    }

}
