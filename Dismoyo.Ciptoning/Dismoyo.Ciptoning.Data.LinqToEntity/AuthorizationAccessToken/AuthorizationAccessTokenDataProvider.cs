// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:14
// Description   : AuthorizationAccessTokenDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Data;
using Dismoyo.Web.Security;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Dismoyo.Ciptoning.Data
{

    public partial class AuthorizationAccessTokenDataProvider : DefaultTableDataProvider<AuthorizationAccessToken>, IAuthorizationAccessTokenDataProvider
    {

        #region Methods

        public AuthorizationAccessToken CreateToken(int userID, string deviceID, double minutes)
        {
            var expiredDate = DefaultDataContext.GetDBServerUtcDateTime();
            var authorizationAccessToken = GetData().SingleOrDefault(p => (p.UserID == userID) &&
                p.DeviceID.Equals(deviceID, StringComparison.OrdinalIgnoreCase) &&
                (p.ExpiredDate >= expiredDate));

            expiredDate = expiredDate.AddMinutes(minutes);

            if (authorizationAccessToken != null)
            {
                authorizationAccessToken.ExpiredDate = expiredDate;

                UpdateData(authorizationAccessToken);
            }
            else
            {
                authorizationAccessToken = new AuthorizationAccessToken();
                authorizationAccessToken.ID = Guid.NewGuid();
                authorizationAccessToken.UserID = userID;
                authorizationAccessToken.DeviceID = deviceID;
                authorizationAccessToken.ExpiredDate = expiredDate;

                InsertData(authorizationAccessToken);
            }

            return authorizationAccessToken;
        }

        public bool IsActiveToken(Guid accessToken, int userID, string deviceID)
        {
            var authorizationAccessToken = GetData(accessToken);
            if ((authorizationAccessToken != null) && (authorizationAccessToken.UserID == userID) &&
                authorizationAccessToken.DeviceID.Equals(deviceID, StringComparison.OrdinalIgnoreCase) &&
                (authorizationAccessToken.ExpiredDate > DefaultDataContext.GetDBServerUtcDateTime()))
            {
                authorizationAccessToken.ExpiredDate =
                    DefaultDataContext.GetDBServerUtcDateTime().AddMinutes(1); /////

                UpdateData(authorizationAccessToken);

                return true;
            }

            return false;
        }

        

        protected override void OnBeginInsertData(BeginOperationDataEventArgs<AuthorizationAccessToken> e)
        {
            e.Data.CreatedDate = DefaultDataContext.GetDBServerUtcDateTime();
            if (HttpContext.Current.User.Identity.IsAuthenticated)
                e.Data.CreatedByUserID = ((BasicGenericIdentity<IvUser>)HttpContext.Current.User.Identity).UserData.ID;

            base.OnBeginInsertData(e);
        }

        #endregion

    }

}
