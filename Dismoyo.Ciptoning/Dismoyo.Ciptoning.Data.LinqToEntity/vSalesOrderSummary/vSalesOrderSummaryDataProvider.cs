// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSalesOrderSummaryDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesOrderSummaryDataProvider : DefaultViewDataProvider<vSalesOrderSummary>, IvSalesOrderSummaryDataProvider
    {

        #region Methods

        protected override void OnInsertData(vSalesOrderSummary obj, bool useTransaction)
        {
            var salesOrderSummaryDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSummaryDataProvider>();

            var salesOrderSummary = new SalesOrderSummary();

            salesOrderSummary.DocumentID = obj.DocumentID;
            salesOrderSummary.ProductID = obj.ProductID;

            salesOrderSummary.QtyOnHand = obj.QtyOnHand;

            salesOrderSummary.QtyConvL = obj.QtyConvL;
            salesOrderSummary.QtyConvM = obj.QtyConvM;
            salesOrderSummary.QtyConvS = obj.QtyConvS;

            salesOrderSummary.Qty = obj.Qty;

            salesOrderSummary.PriceDate = obj.PriceDate;
            salesOrderSummary.UnitGrossPrice = obj.UnitGrossPrice;
            salesOrderSummary.UnitPrice = obj.UnitPrice;
            salesOrderSummary.DiscountStrata1Percentage = obj.DiscountStrata1Percentage;
            salesOrderSummary.DiscountStrata2Percentage = obj.DiscountStrata2Percentage;
            salesOrderSummary.DiscountStrata3Percentage = obj.DiscountStrata3Percentage;
            salesOrderSummary.DiscountStrata4Percentage = obj.DiscountStrata4Percentage;
            salesOrderSummary.DiscountStrata5Percentage = obj.DiscountStrata5Percentage;
            salesOrderSummary.AddDiscountStrataPercentage = obj.AddDiscountStrataPercentage;
            salesOrderSummary.TaxPercentage = obj.TaxPercentage;
            salesOrderSummary.RawSubtotalGrossPrice = obj.RawSubtotalGrossPrice;
            salesOrderSummary.RawSubtotalPrice = obj.RawSubtotalPrice;
            salesOrderSummary.RawSubtotalDiscountStrata1 = obj.RawSubtotalDiscountStrata1;
            salesOrderSummary.RawSubtotalDiscountStrata2 = obj.RawSubtotalDiscountStrata2;
            salesOrderSummary.RawSubtotalDiscountStrata3 = obj.RawSubtotalDiscountStrata3;
            salesOrderSummary.RawSubtotalDiscountStrata4 = obj.RawSubtotalDiscountStrata4;
            salesOrderSummary.RawSubtotalDiscountStrata5 = obj.RawSubtotalDiscountStrata5;
            salesOrderSummary.RawSubtotalGross = obj.RawSubtotalGross;
            salesOrderSummary.RawSubtotalTax = obj.RawSubtotalTax;
            salesOrderSummary.RawSubtotal = obj.RawSubtotal;
            salesOrderSummary.SubtotalGrossPrice = obj.SubtotalGrossPrice;
            salesOrderSummary.SubtotalPrice = obj.SubtotalPrice;
            salesOrderSummary.SubtotalDiscountStrata1 = obj.SubtotalDiscountStrata1;
            salesOrderSummary.SubtotalDiscountStrata2 = obj.SubtotalDiscountStrata2;
            salesOrderSummary.SubtotalDiscountStrata3 = obj.SubtotalDiscountStrata3;
            salesOrderSummary.SubtotalDiscountStrata4 = obj.SubtotalDiscountStrata4;
            salesOrderSummary.SubtotalDiscountStrata5 = obj.SubtotalDiscountStrata5;
            salesOrderSummary.SubtotalGross = obj.SubtotalGross;
            salesOrderSummary.SubtotalTax = obj.SubtotalTax;
            salesOrderSummary.Subtotal = obj.Subtotal;
            salesOrderSummary.SubtotalWeight = obj.SubtotalWeight;
            salesOrderSummary.SubtotalDimension = obj.SubtotalDimension;

            salesOrderSummaryDataProvider.InsertData(salesOrderSummary, useTransaction);
            if ((obj.ChildDetails != null) && (obj.ChildDetails.Count > 0))
            {
                // Insert new child data.
                var vSalesOrderDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderDetailsDataProvider>();
                foreach (var details in obj.ChildDetails)
                {
                    details.DocumentID = salesOrderSummary.DocumentID;
                    details.ProductID = salesOrderSummary.ProductID;
                    vSalesOrderDetailsDataProvider.InsertData(details, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesOrderSummary obj, bool useTransaction)
        {
            var salesOrderSummaryDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSummaryDataProvider>();

            var salesOrderSummary = salesOrderSummaryDataProvider.GetData(obj.DocumentID, obj.ProductID);

            salesOrderSummary.QtyOnHand = obj.QtyOnHand;

            salesOrderSummary.QtyConvL = obj.QtyConvL;
            salesOrderSummary.QtyConvM = obj.QtyConvM;
            salesOrderSummary.QtyConvS = obj.QtyConvS;

            salesOrderSummary.Qty = obj.Qty;

            salesOrderSummary.PriceDate = obj.PriceDate;
            salesOrderSummary.UnitGrossPrice = obj.UnitGrossPrice;
            salesOrderSummary.UnitPrice = obj.UnitPrice;
            salesOrderSummary.DiscountStrata1Percentage = obj.DiscountStrata1Percentage;
            salesOrderSummary.DiscountStrata2Percentage = obj.DiscountStrata2Percentage;
            salesOrderSummary.DiscountStrata3Percentage = obj.DiscountStrata3Percentage;
            salesOrderSummary.DiscountStrata4Percentage = obj.DiscountStrata4Percentage;
            salesOrderSummary.DiscountStrata5Percentage = obj.DiscountStrata5Percentage;
            salesOrderSummary.AddDiscountStrataPercentage = obj.AddDiscountStrataPercentage;
            salesOrderSummary.TaxPercentage = obj.TaxPercentage;
            salesOrderSummary.RawSubtotalGrossPrice = obj.RawSubtotalGrossPrice;
            salesOrderSummary.RawSubtotalPrice = obj.RawSubtotalPrice;
            salesOrderSummary.RawSubtotalDiscountStrata1 = obj.RawSubtotalDiscountStrata1;
            salesOrderSummary.RawSubtotalDiscountStrata2 = obj.RawSubtotalDiscountStrata2;
            salesOrderSummary.RawSubtotalDiscountStrata3 = obj.RawSubtotalDiscountStrata3;
            salesOrderSummary.RawSubtotalDiscountStrata4 = obj.RawSubtotalDiscountStrata4;
            salesOrderSummary.RawSubtotalDiscountStrata5 = obj.RawSubtotalDiscountStrata5;
            salesOrderSummary.RawSubtotalGross = obj.RawSubtotalGross;
            salesOrderSummary.RawSubtotalTax = obj.RawSubtotalTax;
            salesOrderSummary.RawSubtotal = obj.RawSubtotal;
            salesOrderSummary.SubtotalGrossPrice = obj.SubtotalGrossPrice;
            salesOrderSummary.SubtotalPrice = obj.SubtotalPrice;
            salesOrderSummary.SubtotalDiscountStrata1 = obj.SubtotalDiscountStrata1;
            salesOrderSummary.SubtotalDiscountStrata2 = obj.SubtotalDiscountStrata2;
            salesOrderSummary.SubtotalDiscountStrata3 = obj.SubtotalDiscountStrata3;
            salesOrderSummary.SubtotalDiscountStrata4 = obj.SubtotalDiscountStrata4;
            salesOrderSummary.SubtotalDiscountStrata5 = obj.SubtotalDiscountStrata5;
            salesOrderSummary.SubtotalGross = obj.SubtotalGross;
            salesOrderSummary.SubtotalTax = obj.SubtotalTax;
            salesOrderSummary.Subtotal = obj.Subtotal;
            salesOrderSummary.SubtotalWeight = obj.SubtotalWeight;
            salesOrderSummary.SubtotalDimension = obj.SubtotalDimension;

            salesOrderSummaryDataProvider.UpdateData(salesOrderSummary, useTransaction);
            if ((obj.ChildDetails != null) && (obj.ChildDetails.Count > 0))
            {
                var salesOrderDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<ISalesOrderDetailsDataProvider>();
                var vSalesOrderDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderDetailsDataProvider>();

                var insertChilds = obj.ChildDetails.ToList();
                var deleteChilds = salesOrderDetailsDataProvider.GetDataByDocumentIDAndProductID(
                    salesOrderSummary.DocumentID, salesOrderSummary.ProductID);
                var updateChilds = new List<vSalesOrderDetails>();
                int i = 0;
                while (i < deleteChilds.Count)
                {
                    var data = insertChilds.SingleOrDefault(p => (p.ProductLotID == deleteChilds[i].ProductLotID));
                    if (data != null)
                    {
                        insertChilds.Remove(data);
                        deleteChilds.RemoveAt(i);
                        updateChilds.Add(data);
                        continue;
                    }

                    i++;
                }

                // Removes existing and unused child data.
                foreach (var child in deleteChilds)
                    salesOrderDetailsDataProvider.DeleteData(child, useTransaction);

                // Update existing child data.
                foreach (var child in updateChilds)
                    vSalesOrderDetailsDataProvider.UpdateData(child, useTransaction);

                // Insert new child data.
                foreach (var child in insertChilds)
                {
                    child.DocumentID = salesOrderSummary.DocumentID;
                    child.ProductID = salesOrderSummary.ProductID;
                    vSalesOrderDetailsDataProvider.InsertData(child, useTransaction);
                }
            }
        }

        #endregion

    }

}
