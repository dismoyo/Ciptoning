// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSalesmanDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesmanDataProvider : DefaultViewDataProvider<vSalesman>, IvSalesmanDataProvider
    {

        #region Methods

        public bool isWarehouseHasBeenUsed(Warehouse w)
        {
            IQueryable<Salesman> query = (from obj in DataContext.Set<Salesman>()
                                          where obj.WarehouseID == w.ID
                                             && !obj.IsDeleted
                                          select obj);
            return query.Count() > 0;
        }

        public bool isWarehouseHasBeenUsedSalesman(Warehouse w, Salesman s)
        {
            IQueryable<Salesman> query = (from obj in DataContext.Set<Salesman>()
                                          where obj.WarehouseID == w.ID
                                             && !obj.IsDeleted && obj.ID != s.ID
                                          select obj);
            return query.Count() > 0;
        }

        public bool isExistsByCode(string code)
        {
            IQueryable<Salesman> query = (from obj in DataContext.Set<Salesman>()
                                          where obj.Code == code
                                             && !obj.IsDeleted
                                          select obj);
            return query.Count() > 0;
        }

        public bool isSalesmanHasTransaction(SalesOrder so, Salesman s)
        {
            IQueryable<Salesman> query = (from obj in DataContext.Set<Salesman>()
                                          where obj.ID == so.SalesmanID
                                             && !obj.IsDeleted
                                          select obj);
            return query.Count() > 0;
        }

        public IEnumerable<SalesOrder> GetSalesOrderBySalesmanID(Guid salesmanid)
        {
            IQueryable<SalesOrder> query = (from obj in DataContext.Set<SalesOrder>()
                                            where obj.SalesmanID == salesmanid
                                            select obj);
            return query;
        }
        public IEnumerable<SalesOrderFOC> GetSalesOrderFOCBySalesmanID(Guid salesmanid)
        {
            IQueryable<SalesOrderFOC> query = (from obj in DataContext.Set<SalesOrderFOC>()
                                               where obj.SalesmanID == salesmanid
                                               select obj);
            return query;
        }
        public IEnumerable<SalesOrderSample> GetSalesOrderSampleBySalesmanID(Guid salesmanid)
        {
            IQueryable<SalesOrderSample> query = (from obj in DataContext.Set<SalesOrderSample>()
                                                  where obj.SalesmanID == salesmanid
                                                  select obj);
            return query;
        }

        public string GetCategoryCode(int categoryID)
        {
            var systemLookupDataProvider = DataConfiguration.GetDefaultDataProvider<ISystemLookupDataProvider>();

            var systemLookup = systemLookupDataProvider.GetData().SingleOrDefault(p =>
                p.Group.Equals("SalesmanCategory", StringComparison.OrdinalIgnoreCase) &&
                (p.Value_Int32 == categoryID));

            if (systemLookup != null)
                return systemLookup.Value_String;

            return null;
        }

        public int GetCategoryAutoNumber(string prefixCode)
        {
            var salesmanDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanDataProvider>();
                        
            var code = salesmanDataProvider.GetData().Where(p => p.Code.StartsWith(prefixCode)).Max(q => q.Code);
            if (code != null)
                return Convert.ToInt32(code.Substring(prefixCode.Length, 2)) + 1;

            return 1;
        }

        protected override void OnInsertData(vSalesman obj, bool useTransaction)
        {
            var salesmanDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanDataProvider>();
            var warehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();

            obj.Code = string.Format("{0}-{1}", obj.Code.Substring(0, 5), GetCategoryCode(obj.CategoryID));
            string autoNumber = GetCategoryAutoNumber(obj.Code).ToString().PadLeft(2, '0');
            obj.Code += autoNumber;

            if (isExistsByCode(obj.Code))
            {
                Exception ex = new Exception("Code value '" + obj.Code + "' is already exist.");
                throw ex;
            }

            var warehouse = warehouseDataProvider.GetData(obj.WarehouseID);
            if (warehouse.TypeID == 2)
            {
                // if warehouse type is salesman
                if (isWarehouseHasBeenUsed(warehouse))
                {
                    throw new Exception("Warehouse '" + warehouse.Code + " " + warehouse.Name + "' with Salesman type is already exist.");
                }
            }

            if (warehouse.StatusID == 2)
                throw new Exception("Warehouse '" + warehouse.Code + " " + warehouse.Name + "' is inactive.");

            var salesman = new Salesman();

            salesman.ID = Guid.NewGuid();
            salesman.Code = obj.Code;
            salesman.Name = obj.Name;
            salesman.WarehouseID = obj.WarehouseID;
            salesman.GroupID = obj.GroupID;
            salesman.CategoryID = obj.CategoryID;
            salesman.Phone = obj.Phone;
            salesman.SFAFlag = obj.SFAFlag;
            salesman.SFA = obj.SFA;
            salesman.StatusID = obj.StatusID;

            salesmanDataProvider.InsertData(salesman, useTransaction);
            if ((obj.ChildProducts != null) && (obj.ChildProducts.Count > 0))
            {
                // Insert new child data.
                var vSalesmanProductDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesmanProductDataProvider>();
                foreach (var salesmanProduct in obj.ChildProducts)
                {
                    salesmanProduct.SalesmanID = salesman.ID;
                    vSalesmanProductDataProvider.InsertData(salesmanProduct, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesman obj, bool useTransaction)
        {
            var salesmanDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanDataProvider>();

            var warehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();

            var warehouse = warehouseDataProvider.GetData(obj.WarehouseID);
            var salesman = salesmanDataProvider.GetData(obj.ID);
            if (warehouse.TypeID == 2)
            {
                // if warehouse type is salesman
                if (isWarehouseHasBeenUsedSalesman(warehouse, salesman))
                {
                    throw new Exception("Warehouse '" + warehouse.Code + " " + warehouse.Name + "' with Salesman type is already exist.");
                }
            }

            if (warehouse.StatusID == 2)
                throw new Exception("Warehouse '" + warehouse.Code + " " + warehouse.Name + "' is inactive.");


            salesman.Name = obj.Name;
            salesman.WarehouseID = obj.WarehouseID;
            salesman.GroupID = obj.GroupID;
            salesman.CategoryID = obj.CategoryID;
            salesman.Phone = obj.Phone;
            salesman.SFAFlag = obj.SFAFlag;
            salesman.SFA = obj.SFA;
            salesman.StatusID = obj.StatusID;

            if ((obj.ChildProducts != null) && (obj.ChildProducts.Count > 0))
            {
                var salesmanProductDataProvider =
                    DataConfiguration.GetDefaultDataProvider<ISalesmanProductDataProvider>();
                var vSalesmanProductDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesmanProductDataProvider>();

                var insertChilds = obj.ChildProducts.ToList();
                var deleteChilds = salesmanProductDataProvider.GetDataBySalesmanID(salesman.ID);
                var updateChilds = new List<vSalesmanProduct>();
                int i = 0;
                while (i < deleteChilds.Count)
                {
                    var data = insertChilds.SingleOrDefault(p => (p.ProductID == deleteChilds[i].ProductID));
                    if (data != null)
                    {
                        insertChilds.Remove(data);
                        deleteChilds.RemoveAt(i);
                        updateChilds.Add(data);
                        continue;
                    }

                    i++;
                }

                // Removes existing and unused child data.
                foreach (var salesmanProduct in deleteChilds)
                    salesmanProductDataProvider.DeleteData(salesmanProduct, useTransaction);

                // Update existing child data.
                foreach (var salesmanProduct in updateChilds)
                    vSalesmanProductDataProvider.UpdateData(salesmanProduct, useTransaction);

                // Insert new child data.
                foreach (var salesmanProduct in insertChilds)
                {
                    salesmanProduct.SalesmanID = salesman.ID;
                    vSalesmanProductDataProvider.InsertData(salesmanProduct, useTransaction);
                }
            }

            salesmanDataProvider.UpdateData(salesman, useTransaction);
        }

        protected override void OnDeleteData(vSalesman obj, bool useTransaction)
        {
            var salesmanDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanDataProvider>();

            var salesman = salesmanDataProvider.GetData(obj.ID);
            var salesOrder = GetSalesOrderBySalesmanID(obj.ID);
            var salesOrderFOC = GetSalesOrderFOCBySalesmanID(obj.ID);
            var salesoOrderSample = GetSalesOrderSampleBySalesmanID(obj.ID);
            if (salesOrder.Count() > 0 || salesOrderFOC.Count() > 0 || salesoOrderSample.Count() > 0)
            {
                Exception ex = new Exception("Cannot Delete,This Salesman Is Already Have Transaction");
                throw ex;
            }

            salesman.IsDeleted = true;

            salesmanDataProvider.UpdateData(salesman);
        }

        #endregion

    }

}
