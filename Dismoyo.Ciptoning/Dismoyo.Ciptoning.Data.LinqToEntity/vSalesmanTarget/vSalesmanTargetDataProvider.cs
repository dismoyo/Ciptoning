// ===================================================================================
// Author        : System
// Created date  : 15 Mar 2016 15:24:42
// Description   : vSalesmanTargetDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesmanTargetDataProvider : DefaultViewDataProvider<vSalesmanTarget>, IvSalesmanTargetDataProvider
    {

        #region Methods

        protected override void OnInsertData(vSalesmanTarget obj, bool useTransaction)
        {
            var salesmanTargetDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanTargetDataProvider>();

            var salesmanTarget = new SalesmanTarget();

            salesmanTarget.SalesmanID = obj.SalesmanID;
            salesmanTarget.PeriodID = obj.PeriodID.Date;
            salesmanTarget.SalesOrderAmount = obj.SalesOrderAmount;
            salesmanTarget.NewCustomer = obj.NewCustomer;
            salesmanTarget.Visibility = obj.Visibility;

            salesmanTargetDataProvider.InsertData(salesmanTarget, useTransaction);

            if ((obj.ChildProductTargets != null) && (obj.ChildProductTargets.Count > 0))
            {
                // Insert new child data.
                var vSalesmanProductTargetDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesmanProductTargetDataProvider>();
                foreach (var productTarget in obj.ChildProductTargets)
                {
                    productTarget.SalesmanID = salesmanTarget.SalesmanID;
                    productTarget.PeriodID = salesmanTarget.PeriodID;
                    vSalesmanProductTargetDataProvider.InsertData(productTarget, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesmanTarget obj, bool useTransaction)
        {
            var salesmanTargetDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanTargetDataProvider>();
            var salesmanProductTargetDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanProductTargetDataProvider>();

            var salesmanTarget = salesmanTargetDataProvider.GetData(obj.SalesmanID, obj.PeriodID);
            var salesmanProductTargets = salesmanProductTargetDataProvider.GetDataBySalesmanIDAndPeriodID(obj.SalesmanID, obj.PeriodID);

            salesmanTarget.SalesOrderAmount = obj.SalesOrderAmount;
            salesmanTarget.NewCustomer = obj.NewCustomer;
            salesmanTarget.Visibility = obj.Visibility;

            salesmanTargetDataProvider.UpdateData(salesmanTarget, useTransaction);

            foreach (var productTarget in salesmanProductTargets)
            {
                var vProductTarget = obj.ChildProductTargets.SingleOrDefault(p => (p.ProductID == productTarget.ProductID));

                if (vProductTarget != null)
                {
                    productTarget.SalesOrderQty = vProductTarget.SalesOrderQty;
                    productTarget.EffectiveCall = vProductTarget.EffectiveCall;
                    productTarget.CustomerTransaction = vProductTarget.CustomerTransaction;

                    salesmanProductTargetDataProvider.UpdateData(productTarget, useTransaction);
                }
            }
        }

        protected override void OnDeleteData(vSalesmanTarget obj, bool useTransaction)
        {
            var salesmanTargetDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanTargetDataProvider>();
            var salesmanProductTargetDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesmanProductTargetDataProvider>();

            var salesmanTarget = salesmanTargetDataProvider.GetData(obj.SalesmanID, obj.PeriodID);
            var salesmanProductTargets = salesmanProductTargetDataProvider.GetDataBySalesmanIDAndPeriodID(obj.SalesmanID, obj.PeriodID);

            foreach (var productTarget in salesmanProductTargets)
                salesmanProductTargetDataProvider.DeleteData(productTarget, useTransaction);

            salesmanTargetDataProvider.DeleteData(salesmanTarget, useTransaction);
        }

        #endregion

    }

}
