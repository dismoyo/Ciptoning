// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vStockReceiveSummaryDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vStockReceiveSummaryDataProvider : DefaultViewDataProvider<vStockReceiveSummary>, IvStockReceiveSummaryDataProvider
    {

        #region Methods

        protected override void OnInsertData(vStockReceiveSummary obj, bool useTransaction)
        {
            var stockReceiveSummaryDataProvider = DataConfiguration.GetDefaultDataProvider<IStockReceiveSummaryDataProvider>();

            var stockReceiveSummary = new StockReceiveSummary();

            stockReceiveSummary.DocumentID = obj.DocumentID;
            stockReceiveSummary.ProductID = obj.ProductID;

            stockReceiveSummary.QtyOnHand = obj.QtyOnHand;

            stockReceiveSummary.QtyConvL = obj.QtyConvL;
            stockReceiveSummary.QtyConvM = obj.QtyConvM;
            stockReceiveSummary.QtyConvS = obj.QtyConvS;

            stockReceiveSummary.Qty = obj.Qty;

            stockReceiveSummaryDataProvider.InsertData(stockReceiveSummary, useTransaction);
            if ((obj.ChildDetails != null) && (obj.ChildDetails.Count > 0))
            {
                // Insert new child data.
                var vStockReceiveDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvStockReceiveDetailsDataProvider>();
                foreach (var details in obj.ChildDetails)
                {
                    details.DocumentID = stockReceiveSummary.DocumentID;
                    details.ProductID = stockReceiveSummary.ProductID;
                    vStockReceiveDetailsDataProvider.InsertData(details, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vStockReceiveSummary obj, bool useTransaction)
        {
            var stockReceiveSummaryDataProvider = DataConfiguration.GetDefaultDataProvider<IStockReceiveSummaryDataProvider>();

            var stockReceiveSummary = stockReceiveSummaryDataProvider.GetData(obj.DocumentID, obj.ProductID);

            stockReceiveSummary.QtyOnHand = obj.QtyOnHand;

            stockReceiveSummary.QtyConvL = obj.QtyConvL;
            stockReceiveSummary.QtyConvM = obj.QtyConvM;
            stockReceiveSummary.QtyConvS = obj.QtyConvS;

            stockReceiveSummary.Qty = obj.Qty;

            stockReceiveSummaryDataProvider.UpdateData(stockReceiveSummary, useTransaction);
            if ((obj.ChildDetails != null) && (obj.ChildDetails.Count > 0))
            {
                var stockReceiveDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IStockReceiveDetailsDataProvider>();
                var vStockReceiveDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvStockReceiveDetailsDataProvider>();

                var insertChilds = obj.ChildDetails.ToList();
                var deleteChilds = stockReceiveDetailsDataProvider.GetDataByDocumentIDAndProductID(
                    stockReceiveSummary.DocumentID, stockReceiveSummary.ProductID);
                var updateChilds = new List<vStockReceiveDetails>();
                int i = 0;
                while (i < deleteChilds.Count)
                {
                    var data = insertChilds.SingleOrDefault(p => (p.ProductLotID == deleteChilds[i].ProductLotID));
                    if (data != null)
                    {
                        insertChilds.Remove(data);
                        deleteChilds.RemoveAt(i);
                        updateChilds.Add(data);
                        continue;
                    }

                    i++;
                }

                // Removes existing and unused child data.
                foreach (var child in deleteChilds)
                    stockReceiveDetailsDataProvider.DeleteData(child, useTransaction);

                // Update existing child data.
                foreach (var child in updateChilds)
                    vStockReceiveDetailsDataProvider.UpdateData(child, useTransaction);

                // Insert new child data.
                foreach (var child in insertChilds)
                {
                    child.DocumentID = stockReceiveSummary.DocumentID;
                    child.ProductID = stockReceiveSummary.ProductID;
                    vStockReceiveDetailsDataProvider.InsertData(child, useTransaction);
                }
            }
        }

        #endregion

    }

}
