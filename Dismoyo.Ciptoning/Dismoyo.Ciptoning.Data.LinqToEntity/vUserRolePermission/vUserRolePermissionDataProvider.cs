// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vUserRolePermissionDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vUserRolePermissionDataProvider : DefaultViewDataProvider<vUserRolePermission>, IvUserRolePermissionDataProvider
    {

        #region Methods
        public List<vUserRolePermission> GetDataByPermissionObjectID(string permissionObjectID)
        {
            var userRolePermissions = GetData().Where(p => p.PermissionObjectID.Equals(permissionObjectID, StringComparison.OrdinalIgnoreCase)).ToList();

            return userRolePermissions;
        }

        public List<vUserRolePermission> GetDataByRoleID(int roleID)
        {
            var userRolePermissions = GetData().Where(p => !p.IsUser && (p.UserRoleID == roleID)).ToList();

            return userRolePermissions;
        }

        public List<vUserRolePermission> GetDataByUserID(int userID)
        {
            var userRolePermissions = GetData().Where(p => p.IsUser && (p.UserRoleID == userID)).ToList();

            return userRolePermissions;
        }


        protected override void OnInsertData(vUserRolePermission obj)
        {
            var userRolePermissionDataProvider = DataConfiguration.GetDefaultDataProvider<IUserRolePermissionDataProvider>();

            var userRolePermission = new UserRolePermission();

            userRolePermission.PermissionObjectID = obj.PermissionObjectID;
            userRolePermission.UserRoleID = obj.UserRoleID;
            userRolePermission.IsUser = obj.IsUser;

            userRolePermissionDataProvider.InsertData(userRolePermission);
        }

        protected override void OnUpdateData(vUserRolePermission obj)
        {
            
        }

        protected override void OnDeleteData(vUserRolePermission obj)
        {
            var userRolePermissionDataProvider = DataConfiguration.GetDefaultDataProvider<IUserRolePermissionDataProvider>();

            var userRolePermission = userRolePermissionDataProvider.GetData(obj.PermissionObjectID, obj.UserRoleID, obj.IsUser);

            userRolePermissionDataProvider.DeleteData(userRolePermission);
        }

        #endregion

    }

}
