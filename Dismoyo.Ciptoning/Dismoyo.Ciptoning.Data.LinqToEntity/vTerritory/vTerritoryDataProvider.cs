// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vTerritoryDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vTerritoryDataProvider : DefaultViewDataProvider<vTerritory>, IvTerritoryDataProvider
    {

        #region Methods

        public IQueryable<Region> GetRegionByTerritoryID(int territoryID)
        {
            IQueryable<Region> query = (from obj in DataContext.Set<Region>()
                                            where obj.TerritoryID == territoryID
                                            select obj);
            return query;
        }

        protected override void OnInsertData(vTerritory obj)
        {
            var territoryDataProvider = DataConfiguration.GetDefaultDataProvider<ITerritoryDataProvider>();

            var territory = new Territory();

            territory.Code = obj.Code;
            territory.Name = obj.Name;

            territoryDataProvider.InsertData(territory);
        }

        protected override void OnUpdateData(vTerritory obj)
        {
            var territoryDataProvider = DataConfiguration.GetDefaultDataProvider<ITerritoryDataProvider>();

            var territory = territoryDataProvider.GetData(obj.ID);

            territory.Code = obj.Code;
            territory.Name = obj.Name;

            territoryDataProvider.UpdateData(territory);
        }

        protected override void OnDeleteData(vTerritory obj)
        {
            var territoryDataProvider = DataConfiguration.GetDefaultDataProvider<ITerritoryDataProvider>();

            var territory = territoryDataProvider.GetData(obj.ID);
            var region = GetRegionByTerritoryID(obj.ID);
            if (region.Count() > 0)
            {
                Exception ex = new Exception("Cannot Delete,This Territory Is Already used");
                throw ex;
            }
            territory.IsDeleted = true;

            territoryDataProvider.UpdateData(territory);
        }

        #endregion

    }

}
