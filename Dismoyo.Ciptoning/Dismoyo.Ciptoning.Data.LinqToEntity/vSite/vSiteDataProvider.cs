// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSiteDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSiteDataProvider : DefaultViewDataProvider<vSite>, IvSiteDataProvider
    {

        #region Methods

        public IEnumerable<Warehouse> GetWarehouseBySiteID(Guid siteid)
        {
            IQueryable<Warehouse> query = (from obj in DataContext.Set<Warehouse>()
                                           where obj.SiteID == siteid
                                           select obj);
            return query;
        }


        protected override void OnInsertData(vSite obj, bool useTransaction)
        {
            var siteDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteDataProvider>();
            var siteAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteAddressDataProvider>();
            var siteAdditionalInfoDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteAdditionalInfoDataProvider>();

            var site = new Site();
            var siteAddress = new SiteAddress();
            var siteAdditionalInfo = new SiteAdditionalInfo();

            site.ID = Guid.NewGuid();
            site.Code = obj.Code;
            site.Name = obj.Name;
            site.AreaID = obj.AreaID.Value;
            site.CompanyID = obj.CompanyID.Value;
            site.DistributionTypeID = obj.DistributionTypeID;
            site.IsLotNumberEntryRequired = obj.IsLotNumberEntryRequired;
            site.SAPCode = obj.SAPCode;
            siteAddress.Address1 = obj.Address1;
            siteAddress.Address2 = obj.Address2;
            siteAddress.Address3 = obj.Address3;
            siteAddress.City = obj.City;
            siteAddress.StateProvince = obj.StateProvince;
            siteAddress.CountryID = obj.CountryID;
            siteAddress.ZipCode = obj.ZipCode;
            siteAddress.Phone1 = obj.Phone1;
            siteAddress.Phone2 = obj.Phone2;
            siteAddress.Fax = obj.Fax;
            siteAddress.Email = obj.Email;

            siteAdditionalInfo.AdditionalInfo1 = obj.AdditionalInfo1;
            siteAdditionalInfo.AdditionalInfo2 = obj.AdditionalInfo2;
            siteAdditionalInfo.AdditionalInfo3 = obj.AdditionalInfo3;
            siteAdditionalInfo.AdditionalInfo4 = obj.AdditionalInfo4;
            siteAdditionalInfo.AdditionalInfo5 = obj.AdditionalInfo5;
            siteAdditionalInfo.AdditionalInfo6 = obj.AdditionalInfo6;
            siteAdditionalInfo.AdditionalInfo7 = obj.AdditionalInfo7;
            siteAdditionalInfo.AdditionalInfo8 = obj.AdditionalInfo8;
            siteAdditionalInfo.AdditionalInfo9 = obj.AdditionalInfo9;
            siteAdditionalInfo.AdditionalInfo10 = obj.AdditionalInfo10;

            site.TaxNumber = obj.TaxNumber; /////////////////////////////////
            site.StatusID = obj.StatusID;

            siteDataProvider.InsertData(site, useTransaction);

            siteAddress.SiteID = site.ID;
            siteAddressDataProvider.InsertData(siteAddress, useTransaction);

            siteAdditionalInfo.SiteID = site.ID;
            siteAdditionalInfoDataProvider.InsertData(siteAdditionalInfo, useTransaction);
            if ((obj.ChildProducts != null) && (obj.ChildProducts.Count > 0))
            {
                // Insert new child data.
                var vSiteProductDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSiteProductDataProvider>();
                foreach (var siteProduct in obj.ChildProducts)
                {
                    siteProduct.SiteID = site.ID;
                    vSiteProductDataProvider.InsertData(siteProduct, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSite obj, bool useTransaction)
        {
            var siteDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteDataProvider>();
            var siteAddressDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteAddressDataProvider>();
            var siteAdditionalInfoDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteAdditionalInfoDataProvider>();

            var site = siteDataProvider.GetData(obj.ID);
            var siteAddress = siteAddressDataProvider.GetData(obj.ID);
            var siteAdditionalInfo = siteAdditionalInfoDataProvider.GetData(obj.ID);

            site.Code = obj.Code;
            site.Name = obj.Name;
            site.AreaID = obj.AreaID.Value;
            site.CompanyID = obj.CompanyID.Value;
            site.DistributionTypeID = obj.DistributionTypeID;
            site.IsLotNumberEntryRequired = obj.IsLotNumberEntryRequired;
            site.SAPCode = obj.SAPCode;
            siteAddress.Address1 = obj.Address1;
            siteAddress.Address2 = obj.Address2;
            siteAddress.Address3 = obj.Address3;
            siteAddress.City = obj.City;
            siteAddress.StateProvince = obj.StateProvince;
            siteAddress.CountryID = obj.CountryID;
            siteAddress.ZipCode = obj.ZipCode;
            siteAddress.Phone1 = obj.Phone1;
            siteAddress.Phone2 = obj.Phone2;
            siteAddress.Fax = obj.Fax;
            siteAddress.Email = obj.Email;



            siteAdditionalInfo.AdditionalInfo1 = obj.AdditionalInfo1;
            siteAdditionalInfo.AdditionalInfo2 = obj.AdditionalInfo2;
            siteAdditionalInfo.AdditionalInfo3 = obj.AdditionalInfo3;
            siteAdditionalInfo.AdditionalInfo4 = obj.AdditionalInfo4;
            siteAdditionalInfo.AdditionalInfo5 = obj.AdditionalInfo5;
            siteAdditionalInfo.AdditionalInfo6 = obj.AdditionalInfo6;
            siteAdditionalInfo.AdditionalInfo7 = obj.AdditionalInfo7;
            siteAdditionalInfo.AdditionalInfo8 = obj.AdditionalInfo8;
            siteAdditionalInfo.AdditionalInfo9 = obj.AdditionalInfo9;
            siteAdditionalInfo.AdditionalInfo10 = obj.AdditionalInfo10;



            site.TaxNumber = obj.TaxNumber; ////////////////////////////////
            site.StatusID = obj.StatusID;

            if ((obj.ChildProducts != null) && (obj.ChildProducts.Count > 0))
            {
                var siteProductDataProvider =
                    DataConfiguration.GetDefaultDataProvider<ISiteProductDataProvider>();
                var vSiteProductDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSiteProductDataProvider>();

                var insertChilds = obj.ChildProducts.ToList();
                var deleteChilds = siteProductDataProvider.GetDataBySiteID(site.ID);
                var updateChilds = new List<vSiteProduct>();
                int i = 0;
                while (i < deleteChilds.Count)
                {
                    var data = insertChilds.SingleOrDefault(p => (p.ProductID == deleteChilds[i].ProductID));
                    if (data != null)
                    {
                        insertChilds.Remove(data);
                        deleteChilds.RemoveAt(i);
                        updateChilds.Add(data);
                        continue;
                    }

                    i++;
                }

                // Removes existing and unused child data.
                foreach (var siteProduct in deleteChilds)
                    siteProductDataProvider.DeleteData(siteProduct, useTransaction);

                // Update existing child data.
                foreach (var siteProduct in updateChilds)
                    vSiteProductDataProvider.UpdateData(siteProduct, useTransaction);

                // Insert new child data.
                foreach (var siteProduct in insertChilds)
                {
                    siteProduct.SiteID = site.ID;
                    vSiteProductDataProvider.InsertData(siteProduct, useTransaction);
                }
            }

            if ((obj.ChildWarehouses != null) && (obj.ChildWarehouses.Count > 0))
            {
                foreach (var vWarehouse in obj.ChildWarehouses)
                {
                    var warehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();

                    var warehouse = warehouseDataProvider.GetData(vWarehouse.ID);

                    warehouse.IsSOAllowed = vWarehouse.IsSOAllowed;

                    warehouseDataProvider.UpdateData(warehouse, useTransaction);
                }
            }

            siteDataProvider.UpdateData(site, useTransaction);
            siteAddressDataProvider.UpdateData(siteAddress, useTransaction);
            siteAdditionalInfoDataProvider.UpdateData(siteAdditionalInfo, useTransaction);
        }

        protected override void OnDeleteData(vSite obj, bool useTransaction)
        {
            var siteDataProvider = DataConfiguration.GetDefaultDataProvider<ISiteDataProvider>();

            var site = siteDataProvider.GetData(obj.ID);
            var warehouse = GetWarehouseBySiteID(obj.ID);
            if (warehouse.Count() > 0)
            {
                Exception ex = new Exception("Cannot Delete,This Site Is Already used");
                throw ex;
            }
            site.IsDeleted = true;

            siteDataProvider.UpdateData(site, useTransaction);
        }

        #endregion

    }

}
