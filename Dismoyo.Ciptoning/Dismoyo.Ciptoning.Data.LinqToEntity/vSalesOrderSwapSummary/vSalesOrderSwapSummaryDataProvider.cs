// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSalesOrderSwapSummaryDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesOrderSwapSummaryDataProvider : DefaultViewDataProvider<vSalesOrderSwapSummary>, IvSalesOrderSwapSummaryDataProvider
    {

        #region Methods

        protected override void OnInsertData(vSalesOrderSwapSummary obj, bool useTransaction)
        {
            var salesOrderSwapSummaryDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSwapSummaryDataProvider>();

            var salesOrderSwapSummary = new SalesOrderSwapSummary();

            salesOrderSwapSummary.DocumentID = obj.DocumentID;
            salesOrderSwapSummary.ProductID = obj.ProductID;

            salesOrderSwapSummary.QtyOnHand = obj.QtyOnHand;

            salesOrderSwapSummary.QtyConvL = obj.QtyConvL;
            salesOrderSwapSummary.QtyConvM = obj.QtyConvM;
            salesOrderSwapSummary.QtyConvS = obj.QtyConvS;

            salesOrderSwapSummary.Qty = obj.Qty;

            salesOrderSwapSummary.SubtotalWeight = obj.SubtotalWeight;
            salesOrderSwapSummary.SubtotalDimension = obj.SubtotalDimension;

            salesOrderSwapSummaryDataProvider.InsertData(salesOrderSwapSummary, useTransaction);
            if ((obj.ChildDetails != null) && (obj.ChildDetails.Count > 0))
            {
                // Insert new child data.
                var vSalesOrderSwapDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderSwapDetailsDataProvider>();
                foreach (var details in obj.ChildDetails)
                {
                    details.DocumentID = salesOrderSwapSummary.DocumentID;
                    details.ProductID = salesOrderSwapSummary.ProductID;
                    vSalesOrderSwapDetailsDataProvider.InsertData(details, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesOrderSwapSummary obj, bool useTransaction)
        {
            var salesOrderSwapSummaryDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderSwapSummaryDataProvider>();

            var salesOrderSwapSummary = salesOrderSwapSummaryDataProvider.GetData(obj.DocumentID, obj.ProductID);

            salesOrderSwapSummary.QtyOnHand = obj.QtyOnHand;

            salesOrderSwapSummary.QtyConvL = obj.QtyConvL;
            salesOrderSwapSummary.QtyConvM = obj.QtyConvM;
            salesOrderSwapSummary.QtyConvS = obj.QtyConvS;

            salesOrderSwapSummary.Qty = obj.Qty;

            salesOrderSwapSummary.SubtotalWeight = obj.SubtotalWeight;
            salesOrderSwapSummary.SubtotalDimension = obj.SubtotalDimension;

            salesOrderSwapSummaryDataProvider.UpdateData(salesOrderSwapSummary, useTransaction);
            if ((obj.ChildDetails != null) && (obj.ChildDetails.Count > 0))
            {
                var salesOrderSwapDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<ISalesOrderSwapDetailsDataProvider>();
                var vSalesOrderSwapDetailsDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderSwapDetailsDataProvider>();

                var insertChilds = obj.ChildDetails.ToList();
                var deleteChilds = salesOrderSwapDetailsDataProvider.GetDataByDocumentIDAndProductID(
                    salesOrderSwapSummary.DocumentID, salesOrderSwapSummary.ProductID);
                var updateChilds = new List<vSalesOrderSwapDetails>();
                int i = 0;
                while (i < deleteChilds.Count)
                {
                    var data = insertChilds.SingleOrDefault(p => (p.ProductLotID == deleteChilds[i].ProductLotID));
                    if (data != null)
                    {
                        insertChilds.Remove(data);
                        deleteChilds.RemoveAt(i);
                        updateChilds.Add(data);
                        continue;
                    }

                    i++;
                }

                // Removes existing and unused child data.
                foreach (var child in deleteChilds)
                    salesOrderSwapDetailsDataProvider.DeleteData(child, useTransaction);

                // Update existing child data.
                foreach (var child in updateChilds)
                    vSalesOrderSwapDetailsDataProvider.UpdateData(child, useTransaction);

                // Insert new child data.
                foreach (var child in insertChilds)
                {
                    child.DocumentID = salesOrderSwapSummary.DocumentID;
                    child.ProductID = salesOrderSwapSummary.ProductID;
                    vSalesOrderSwapDetailsDataProvider.InsertData(child, useTransaction);
                }
            }
        }

        #endregion

    }

}
