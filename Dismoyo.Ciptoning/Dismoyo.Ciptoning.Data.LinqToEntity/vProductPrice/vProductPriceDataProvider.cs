// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vProductPriceDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vProductPriceDataProvider : DefaultViewDataProvider<vProductPrice>, IvProductPriceDataProvider
    {

        #region Methods

        public void validateProductPrice(vProductPrice obj)
        {
            var productPriceDataProvider = DataConfiguration.GetDefaultDataProvider<IProductPriceDataProvider>();
            List<ProductPrice> listProductPrice = new List<ProductPrice>();

            // update data yang valiDateFrom dan validDateTo nya outerjoin
            var productPrice1 = GetDataOuterjoint(obj.ProductID, (DateTime)obj.ValidDateFrom, (DateTime)obj.ValidDateTo);
            foreach (var data in productPrice1)
            {
                if (data.ID != obj.ID)
                {
                    data.IsDeleted = true;
                    listProductPrice.Add(data);
                }
            }

            foreach (ProductPrice p in listProductPrice)
            {
                productPriceDataProvider.UpdateData(p);
            }

            // update data yang valiDateFrom nya berisisan
            productPrice1 = GetDataDisjoint(obj.ProductID, (DateTime)obj.ValidDateFrom);
            foreach (var data in productPrice1)
            {
                if (data.ID != obj.ID)
                {
                    data.ValidDateTo = ((DateTime)obj.ValidDateFrom).AddDays(-1);
                    listProductPrice.Add(data);
                }
            }

            foreach (ProductPrice p in listProductPrice)
            {
                productPriceDataProvider.UpdateData(p);
            }

            // update data yang valiDateTo nya berisisan
            productPrice1 = GetDataDisjoint(obj.ProductID, (DateTime)obj.ValidDateTo);
            foreach (var data in productPrice1)
            {
                if (data.ID != obj.ID)
                {
                    data.ValidDateFrom = ((DateTime)obj.ValidDateTo).AddDays(+1);
                    listProductPrice.Add(data);
                }
            }

            foreach (ProductPrice p in listProductPrice)
            {
                productPriceDataProvider.UpdateData(p);
            }
        }


        protected override void OnInsertData(vProductPrice obj)
        {
            var productPriceDataProvider = DataConfiguration.GetDefaultDataProvider<IProductPriceDataProvider>();

            var productPrice = new ProductPrice();

            var existingCode = GetByCode(obj.Code);
            if (existingCode.Count() > 0)
            {
                Exception ex = new Exception("Code value '" + obj.Code + "' is already exist.");
                throw ex;
            }

            // get maximum value of validDateFrom
            ProductPrice maxValidFromData = GetMaxValidFromData(0, obj.ProductID, "add");
            if (maxValidFromData != null)
            {
                if (obj.ValidDateFrom <= maxValidFromData.ValidDateFrom)
                {
                    DateTime mustBeValidFrom = (DateTime)maxValidFromData.ValidDateFrom;
                    throw (new Exception("Valid Date From must be greater than '" + mustBeValidFrom.ToString("d") + "'"));
                }
            }

            validateProductPrice(obj);

            productPrice.Code = obj.Code;
            productPrice.ProductID = obj.ProductID;
            productPrice.ValidDateFrom = obj.ValidDateFrom;
            productPrice.ValidDateTo = obj.ValidDateTo;
            productPrice.PriceGroupID = obj.PriceGroupID;
            productPrice.GrossPrice = obj.GrossPrice;
            productPrice.TaxPercentage = obj.TaxPercentage;
            productPrice.Price = obj.Price;
            productPrice.StatusID = obj.StatusID;

            productPriceDataProvider.InsertData(productPrice);
        }

        protected override void OnUpdateData(vProductPrice obj)
        {
            var productPriceDataProvider = DataConfiguration.GetDefaultDataProvider<IProductPriceDataProvider>();

            var productPrice = productPriceDataProvider.GetData(obj.ID);
            
            // get maximum value of validDateFrom
            ProductPrice maxValidFromData = GetMaxValidFromData(obj.ID, obj.ProductID, "edit");
            if (maxValidFromData != null)
            {
                if (obj.ValidDateFrom <= maxValidFromData.ValidDateFrom)
                {
                    DateTime mustBeValidFrom = (DateTime)maxValidFromData.ValidDateFrom;
                    throw (new Exception("Valid Date From must be greater than '" + mustBeValidFrom.ToString("d") + "'"));
                }
            }

            validateProductPrice(obj);
            
            productPrice.ValidDateFrom = obj.ValidDateFrom;
            productPrice.ValidDateTo = obj.ValidDateTo;
            productPrice.PriceGroupID = obj.PriceGroupID;
            productPrice.GrossPrice = obj.GrossPrice;
            productPrice.TaxPercentage = obj.TaxPercentage;
            productPrice.Price = obj.Price;
            productPrice.StatusID = obj.StatusID;

            productPriceDataProvider.UpdateData(productPrice);
        }

        protected override void OnDeleteData(vProductPrice obj)
        {
            var productPriceDataProvider = DataConfiguration.GetDefaultDataProvider<IProductPriceDataProvider>();

            var productPrice = productPriceDataProvider.GetData(obj.ID);

            productPrice.IsDeleted = true;
            productPriceDataProvider.UpdateData(productPrice);
        }

        public IEnumerable<ProductPrice> GetByCode(string code)
        {
            IQueryable<ProductPrice> query = (from obj in DataContext.Set<ProductPrice>()
                                              where obj.Code == code
                                              && !obj.IsDeleted
                                              select obj);
            return query;
        }

        public IEnumerable<ProductPrice> GetDataDisjoint(int productID, DateTime validDate)
        {
            IQueryable<ProductPrice> query = (from obj in DataContext.Set<ProductPrice>()
                                              where obj.ProductID == productID
                                              && obj.ValidDateFrom <= validDate
                                              && obj.ValidDateTo >= validDate
                                              && !obj.IsDeleted
                                              select obj);
            return query;
        }

        public IEnumerable<ProductPrice> GetDataOuterjoint(int productID, DateTime validDateFrom, DateTime validDateTo)
        {
            IQueryable<ProductPrice> query = (from obj in DataContext.Set<ProductPrice>()
                                              where obj.ProductID == productID
                                              && obj.ValidDateFrom >= validDateFrom
                                              && obj.ValidDateTo <= validDateTo
                                              && !obj.IsDeleted
                                              select obj);
            return query;
        }

        public ProductPrice GetMaxValidFromData(int ID, int productID, string mode)
        {
            var productPrice = DataContext.Set<ProductPrice>();
            IQueryable<ProductPrice> query;
            ProductPrice obj = null;
            if (mode.Equals("add"))
            {
                query = productPrice.Where(x => !x.IsDeleted && x.ProductID == productID)
                    .OrderByDescending(x => x.ValidDateFrom);
                if (query.Count() > 0)
                {
                    obj = new ProductPrice();
                    obj = query.First();
                }
            }
            else if (mode.Equals("edit"))
            {
                query = productPrice.Where(x => !x.IsDeleted && x.ProductID == productID && x.ID < ID)
                    .OrderByDescending(x => x.ValidDateFrom);
                if (query.Count() > 0)
                {
                    obj = new ProductPrice();
                    obj = query.First();
                }
            }
            return obj;
        }

        #endregion

    }

}
