// ===================================================================================
// Author        : System
// Created date  : 11 Mar 2016 11:53:25
// Description   : vWarehouseDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vWarehouseDataProvider : DefaultViewDataProvider<vWarehouse>, IvWarehouseDataProvider
    {

        #region Methods

        public IQueryable<Warehouse> GetByCode(string code)
        {
            IQueryable<Warehouse> query = (from obj in DataContext.Set<Warehouse>()
                                           where obj.Code == code
                                           && !obj.IsDeleted
                                           select obj);
            return query;
        }

        public IEnumerable<Warehouse> GetBySiteAndType(Guid? siteID, string mode, Guid warehouseID)
        {
            IQueryable<Warehouse> query = null;
            if (mode == "add")
            {
                query = (from obj in DataContext.Set<Warehouse>()
                 where obj.SiteID == siteID
                 && obj.TypeID == 1
                 && !obj.IsDeleted
                 select obj);
            }
            else
            {
                query = (from obj in DataContext.Set<Warehouse>()
                         where obj.SiteID == siteID
                         && obj.TypeID == 1
                         && obj.ID != warehouseID
                         && !obj.IsDeleted
                         select obj);
            }
            return query;
        }

        public void validateWarehouse(vWarehouse obj, string mode)
        {

            var WarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();
            List<Warehouse> listWarehouse = new List<Warehouse>();

            if (mode == "add")
            {
                var existingData = GetByCode(obj.Code);
                if (existingData.Count() > 0)
                {
                    Exception ex = new Exception("Code value '" + obj.Code + "' is already exist.");
                    throw ex;
                }
            }

            if (obj.TypeID == 1)
            {
                // if TypeID = Main
                var existingData = GetBySiteAndType(obj.SiteID, mode, obj.ID);
                if (existingData.Count() > 0)
                {
                    Exception ex = new Exception("Warehouse Type Main is already exist on the selected Site.");
                    throw ex;
                }
            }
        }
        public IEnumerable<SalesOrder> GetSalesOrderByWarehouseID(Guid warehouseid)
        {
            IQueryable<SalesOrder> query = (from obj in DataContext.Set<SalesOrder>()
                                            where obj.WarehouseID == warehouseid
                                            select obj);
            return query;
        }
        public IEnumerable<SalesOrderFOC> GetSalesOrderFOCByWarehouseID(Guid warehouseid)
        {
            IQueryable<SalesOrderFOC> query = (from obj in DataContext.Set<SalesOrderFOC>()
                                               where obj.WarehouseID == warehouseid
                                               select obj);
            return query;
        }
        public IEnumerable<SalesOrderSample> GetSalesOrderSampleByWarehouseID(Guid warehouseid)
        {
            IQueryable<SalesOrderSample> query = (from obj in DataContext.Set<SalesOrderSample>()
                                                  where obj.WarehouseID == warehouseid
                                                  select obj);
            return query;
        }

        public IEnumerable<StockOpname> GetStockOpnameByWarehouseID(Guid warehouseid)
        {
            IQueryable<StockOpname> query = (from obj in DataContext.Set<StockOpname>()
                                                  where obj.WarehouseID == warehouseid
                                                  select obj);
            return query;
        }

        public IEnumerable<StockDisposal> GetStockDisposalByWarehouseID(Guid warehouseid)
        {
            IQueryable<StockDisposal> query = (from obj in DataContext.Set<StockDisposal>()
                                             where obj.WarehouseID == warehouseid
                                             select obj);
            return query;
        }

        public IEnumerable<StockChanges> GetStockChangeByWarehouseID(Guid warehouseid)
        {
            IQueryable<StockChanges> query = (from obj in DataContext.Set<StockChanges>()
                                               where obj.WarehouseID == warehouseid
                                               select obj);
            return query;
        }

        public IEnumerable<StockTransfer> GetStockTransferByWarehouseID(Guid warehouseid)
        {
            IQueryable<StockTransfer> query = (from obj in DataContext.Set<StockTransfer>()
                                              where obj.DestinationWarehouseID == warehouseid ||
                                              obj.SourceWarehouseID == warehouseid
                                               select obj);
            return query;
        }
        protected override void OnInsertData(vWarehouse obj, bool useTransaction)
        {
            var warehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();

            var warehouse = new Warehouse();

            validateWarehouse(obj, "add");

            warehouse.ID = Guid.NewGuid();
            warehouse.Code = obj.Code;
            warehouse.Name = obj.Name;
            warehouse.SiteID = obj.SiteID;
            warehouse.TypeID = obj.TypeID;
            warehouse.IsSOAllowed = obj.IsSOAllowed;
            warehouse.StatusID = obj.StatusID;
            
            warehouseDataProvider.InsertData(warehouse, useTransaction);
        }

        protected override void OnUpdateData(vWarehouse obj, bool useTransaction)
        {
            var warehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();

            validateWarehouse(obj, "edit");

            var warehouse = warehouseDataProvider.GetData(obj.ID);

            warehouse.Code = obj.Code;
            warehouse.Name = obj.Name;
            warehouse.SiteID = obj.SiteID;
            warehouse.TypeID = obj.TypeID;
            warehouse.IsSOAllowed = obj.IsSOAllowed;
            warehouse.StatusID = obj.StatusID;

            warehouseDataProvider.UpdateData(warehouse, useTransaction);
        }

        protected override void OnDeleteData(vWarehouse obj, bool useTransaction)
        {
            var warehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IWarehouseDataProvider>();

            var warehouse = warehouseDataProvider.GetData(obj.ID);
            var salesOrder = GetSalesOrderByWarehouseID(obj.ID);
            var salesOrderFOC = GetSalesOrderFOCByWarehouseID(obj.ID);
            var salesoOrderSample = GetSalesOrderSampleByWarehouseID(obj.ID);
            var stockchange = GetStockChangeByWarehouseID(obj.ID);
            var stockdisposal = GetStockDisposalByWarehouseID(obj.ID);
            var stocktransfer = GetStockTransferByWarehouseID(obj.ID);
            var stockopname = GetStockOpnameByWarehouseID(obj.ID);
            if (salesOrder.Count() > 0 || salesOrderFOC.Count() > 0 || salesoOrderSample.Count() > 0 || stockchange.Count() > 0|| stockdisposal.Count() > 0|| stocktransfer.Count() > 0|| stockopname.Count() > 0)
            {
                Exception ex = new Exception("Cannot Delete,This Warehouse Is Already Have Transaction");
                throw ex;
            }
            warehouse.IsDeleted = true;

            warehouseDataProvider.UpdateData(warehouse, useTransaction);
        }

        #endregion

    }

}
