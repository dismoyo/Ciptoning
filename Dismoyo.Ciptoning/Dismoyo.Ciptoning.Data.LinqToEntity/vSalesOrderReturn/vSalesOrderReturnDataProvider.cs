// ===================================================================================
// Author        : System
// Created date  : 29 Feb 2016 12:50:57
// Description   : vSalesOrderReturnDataProvider partial class.
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Dismoyo.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
//using WebMatrix.WebData;

namespace Dismoyo.Ciptoning.Data
{

    public partial class vSalesOrderReturnDataProvider : DefaultViewDataProvider<vSalesOrderReturn>, IvSalesOrderReturnDataProvider
    {

        #region Methods

        protected override void OnInsertData(vSalesOrderReturn obj, bool useTransaction)
        {
            var salesOrderReturnDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderReturnDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();
            var deliveryOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IDeliveryOrderDataProvider>();

            var salesOrderReturn = new SalesOrderReturn();
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);
            var deliveryOrder = new DeliveryOrder();

            salesOrderReturn.DocumentID = (obj.DocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DocumentID);
            salesOrderReturn.DocumentCode = string.Format("{0}-{1}-02-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 2).ToString().PadLeft(7, '0'));
            salesOrderReturn.TransactionDate = obj.TransactionDate;

            salesOrderReturn.ReferenceNumber = obj.ReferenceNumber;
            salesOrderReturn.DocumentStatusReason = obj.DocumentStatusReason;
            salesOrderReturn.SalesmanID = obj.SalesmanID;
            salesOrderReturn.WarehouseID = obj.WarehouseID;
            salesOrderReturn.CustomerID = obj.CustomerID;
            salesOrderReturn.PriceGroupID = obj.PriceGroupID;
            salesOrderReturn.DiscountGroupID = obj.DiscountGroupID;
            salesOrderReturn.TermOfPaymentID = obj.TermOfPaymentID;
            salesOrderReturn.ReasonID = obj.ReasonID;
            salesOrderReturn.AddDiscountStrataReason = obj.AddDiscountStrataReason;
            salesOrderReturn.SFAInvoiceDocumentCode = obj.SFAInvoiceDocumentCode;

            deliveryOrder.DocumentID = (obj.DODocumentID.Equals(Guid.Empty) ? Guid.NewGuid() : obj.DODocumentID);
            deliveryOrder.DocumentCode = string.Format("{0}-{1}-10-{2}", vWarehouse.SiteCode,
                DateTime.Today.ToString("yy"),
                DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 10).ToString().PadLeft(7, '0'));
            deliveryOrder.TransactionDate = salesOrderReturn.TransactionDate;
            deliveryOrder.RefDocumentID = salesOrderReturn.DocumentID;
            deliveryOrder.RefTransactionTypeID = 2; // Sales Order Return
            deliveryOrder.ShipmentDate = obj.DOShipmentDate;
            deliveryOrder.ReceivedDate = obj.DOReceivedDate;
            deliveryOrder.PrintedCount = 0;

            salesOrderReturn.DODocumentID = deliveryOrder.DocumentID;

            salesOrderReturn.DocumentStatusID = 1; // Draft
            deliveryOrder.DocumentStatusID = salesOrderReturn.DocumentStatusID;

            salesOrderReturn.RawTotalGrossPrice = obj.RawTotalGrossPrice;
            salesOrderReturn.RawTotalPrice = obj.RawTotalPrice;
            salesOrderReturn.RawTotalDiscountStrata1Amount = obj.RawTotalDiscountStrata1Amount;
            salesOrderReturn.RawTotalDiscountStrata2Amount = obj.RawTotalDiscountStrata2Amount;
            salesOrderReturn.RawTotalDiscountStrata3Amount = obj.RawTotalDiscountStrata3Amount;
            salesOrderReturn.RawTotalDiscountStrata4Amount = obj.RawTotalDiscountStrata4Amount;
            salesOrderReturn.RawTotalDiscountStrata5Amount = obj.RawTotalDiscountStrata5Amount;
            salesOrderReturn.RawTotalAddDiscountStrataAmount = obj.RawTotalAddDiscountStrataAmount;
            salesOrderReturn.RawTotalGross = obj.RawTotalGross;
            salesOrderReturn.RawTotalTax = obj.RawTotalTax;
            salesOrderReturn.RawTotal = obj.RawTotal;
            salesOrderReturn.TotalGrossPrice = obj.TotalGrossPrice;
            salesOrderReturn.TotalPrice = obj.TotalPrice;
            salesOrderReturn.TotalDiscountStrata1Amount = obj.TotalDiscountStrata1Amount;
            salesOrderReturn.TotalDiscountStrata2Amount = obj.TotalDiscountStrata2Amount;
            salesOrderReturn.TotalDiscountStrata3Amount = obj.TotalDiscountStrata3Amount;
            salesOrderReturn.TotalDiscountStrata4Amount = obj.TotalDiscountStrata4Amount;
            salesOrderReturn.TotalDiscountStrata5Amount = obj.TotalDiscountStrata5Amount;
            salesOrderReturn.TotalAddDiscountStrataAmount = obj.TotalAddDiscountStrataAmount;
            salesOrderReturn.TotalGross = obj.TotalGross;
            salesOrderReturn.TotalTax = obj.TotalTax;
            salesOrderReturn.Total = obj.Total;
            salesOrderReturn.TotalWeight = obj.TotalWeight;
            salesOrderReturn.TotalDimension = obj.TotalDimension;
            salesOrderReturn.PrintCount = obj.PrintCount;

            salesOrderReturnDataProvider.InsertData(salesOrderReturn, useTransaction);
            deliveryOrderDataProvider.InsertData(deliveryOrder, useTransaction);
            if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
            {
                // Insert new child data.
                var vSalesOrderReturnSummaryDataProvider =
                    DataConfiguration.GetDefaultDataProvider<IvSalesOrderReturnSummaryDataProvider>();
                foreach (var summary in obj.ChildSummaries)
                {
                    summary.DocumentID = salesOrderReturn.DocumentID;
                    vSalesOrderReturnSummaryDataProvider.InsertData(summary, useTransaction);
                }
            }
        }

        protected override void OnUpdateData(vSalesOrderReturn obj, bool useTransaction)
        {
            var salesOrderReturnDataProvider = DataConfiguration.GetDefaultDataProvider<ISalesOrderReturnDataProvider>();
            var vWarehouseDataProvider = DataConfiguration.GetDefaultDataProvider<IvWarehouseDataProvider>();
            var deliveryOrderDataProvider = DataConfiguration.GetDefaultDataProvider<IDeliveryOrderDataProvider>();

            var salesOrderReturn = salesOrderReturnDataProvider.GetData(obj.DocumentID);
            var vWarehouse = vWarehouseDataProvider.GetData(obj.WarehouseID);
            var deliveryOrder = deliveryOrderDataProvider.GetData(obj.DODocumentID);

            var salesOrderReturnSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<ISalesOrderReturnSummaryDataProvider>();
            var vSalesOrderReturnSummaryDataProvider =
                DataConfiguration.GetDefaultDataProvider<IvSalesOrderReturnSummaryDataProvider>();

            if (salesOrderReturn.DocumentStatusID == 1) // Draft
            {
                salesOrderReturn.TransactionDate = obj.TransactionDate;
                salesOrderReturn.ReferenceNumber = obj.ReferenceNumber;
                salesOrderReturn.DocumentStatusReason = obj.DocumentStatusReason;
                salesOrderReturn.SalesmanID = obj.SalesmanID;
                salesOrderReturn.WarehouseID = obj.WarehouseID;
                salesOrderReturn.CustomerID = obj.CustomerID;
                salesOrderReturn.PriceGroupID = obj.PriceGroupID;
                salesOrderReturn.DiscountGroupID = obj.DiscountGroupID;
                salesOrderReturn.TermOfPaymentID = obj.TermOfPaymentID;
                salesOrderReturn.ReasonID = obj.ReasonID;
                salesOrderReturn.AddDiscountStrataReason = obj.AddDiscountStrataReason;
                salesOrderReturn.SFAInvoiceDocumentCode = obj.SFAInvoiceDocumentCode;

                deliveryOrder.ShipmentDate = obj.DOShipmentDate;
                deliveryOrder.ReceivedDate = obj.DOReceivedDate;
                deliveryOrder.PrintedCount = obj.DOPrintedCount;
                deliveryOrder.LastPrintedDate = obj.DOLastPrintedDate;

                salesOrderReturn.RawTotalGrossPrice = obj.RawTotalGrossPrice;
                salesOrderReturn.RawTotalPrice = obj.RawTotalPrice;
                salesOrderReturn.RawTotalDiscountStrata1Amount = obj.RawTotalDiscountStrata1Amount;
                salesOrderReturn.RawTotalDiscountStrata2Amount = obj.RawTotalDiscountStrata2Amount;
                salesOrderReturn.RawTotalDiscountStrata3Amount = obj.RawTotalDiscountStrata3Amount;
                salesOrderReturn.RawTotalDiscountStrata4Amount = obj.RawTotalDiscountStrata4Amount;
                salesOrderReturn.RawTotalDiscountStrata5Amount = obj.RawTotalDiscountStrata5Amount;
                salesOrderReturn.RawTotalAddDiscountStrataAmount = obj.RawTotalAddDiscountStrataAmount;
                salesOrderReturn.RawTotalGross = obj.RawTotalGross;
                salesOrderReturn.RawTotalTax = obj.RawTotalTax;
                salesOrderReturn.RawTotal = obj.RawTotal;
                salesOrderReturn.TotalGrossPrice = obj.TotalGrossPrice;
                salesOrderReturn.TotalPrice = obj.TotalPrice;
                salesOrderReturn.TotalDiscountStrata1Amount = obj.TotalDiscountStrata1Amount;
                salesOrderReturn.TotalDiscountStrata2Amount = obj.TotalDiscountStrata2Amount;
                salesOrderReturn.TotalDiscountStrata3Amount = obj.TotalDiscountStrata3Amount;
                salesOrderReturn.TotalDiscountStrata4Amount = obj.TotalDiscountStrata4Amount;
                salesOrderReturn.TotalDiscountStrata5Amount = obj.TotalDiscountStrata5Amount;
                salesOrderReturn.TotalAddDiscountStrataAmount = obj.TotalAddDiscountStrataAmount;
                salesOrderReturn.TotalGross = obj.TotalGross;
                salesOrderReturn.TotalTax = obj.TotalTax;
                salesOrderReturn.Total = obj.Total;
                salesOrderReturn.TotalWeight = obj.TotalWeight;
                salesOrderReturn.TotalDimension = obj.TotalDimension;

                if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                {
                    var insertChilds = obj.ChildSummaries.ToList();
                    var deleteChilds = salesOrderReturnSummaryDataProvider.GetDataByDocumentID(salesOrderReturn.DocumentID);
                    var updateChilds = new List<vSalesOrderReturnSummary>();
                    int i = 0;
                    while (i < deleteChilds.Count)
                    {
                        var data = insertChilds.SingleOrDefault(p => (p.ProductID == deleteChilds[i].ProductID));
                        if (data != null)
                        {
                            insertChilds.Remove(data);
                            deleteChilds.RemoveAt(i);
                            updateChilds.Add(data);
                            continue;
                        }

                        i++;
                    }

                    // Removes existing and unused child data.
                    foreach (var summary in deleteChilds)
                        salesOrderReturnSummaryDataProvider.DeleteData(summary, useTransaction);

                    // Update existing child data.
                    foreach (var summary in updateChilds)
                        vSalesOrderReturnSummaryDataProvider.UpdateData(summary, useTransaction);

                    // Insert new child data.
                    foreach (var summary in insertChilds)
                    {
                        summary.DocumentID = salesOrderReturn.DocumentID;
                        vSalesOrderReturnSummaryDataProvider.InsertData(summary, useTransaction);
                    }
                }
            }

            if (salesOrderReturn.DocumentStatusID != obj.DocumentStatusID)
            {
                var stockTransactionDataProvider = DataConfiguration.GetDefaultDataProvider<IStockTransactionDataProvider>();
                var stockOnHandCurrentDataProvider = DataConfiguration.GetDefaultDataProvider<IStockOnHandCurrentDataProvider>();

                if ((salesOrderReturn.DocumentStatusID == 1) && (obj.DocumentStatusID == 2)) // Draft to Posted
                {
                    var closingPeriodDataProvider = DataConfiguration.GetDefaultDataProvider<IClosingPeriodDataProvider>();

                    if (!closingPeriodDataProvider.IsOpenPeriod(vWarehouse.SiteID.Value, obj.TransactionDate.Year,
                        obj.TransactionDate.Month))
                        throw new Exception(string.Format("This Site for {0:MMM} {0:yyyy} period is already Closed.",
                            obj.TransactionDate));

                    salesOrderReturn.PostedDate = DefaultDataContext.GetDBServerUtcDateTime();

                    // Insert data to Stock Transaction.
                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                int qtyOnHand = stockOnHandCurrentDataProvider.GetProductSummaryStockOnHand(
                                    salesOrderReturn.WarehouseID, summary.ProductID, 2);

                                foreach (var details in summary.ChildDetails)
                                {
                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = salesOrderReturn.DocumentID;
                                    stockTransaction.TransactionDate = salesOrderReturn.TransactionDate;
                                    stockTransaction.TransactionTypeID = 2; // Sales Order Return
                                    stockTransaction.DocumentCode = salesOrderReturn.DocumentCode;

                                    stockTransaction.SourceID = salesOrderReturn.CustomerID;
                                    stockTransaction.DestinationID = salesOrderReturn.WarehouseID;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;

                                    stockTransaction.QtyGood = 0;
                                    stockTransaction.QtyHold = details.Qty;
                                    stockTransaction.QtyBad = 0;

                                    var stockOnHandCurrent = stockOnHandCurrentDataProvider.GetData(salesOrderReturn.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    details.QtyOnHand = 0;

                                    if (stockOnHandCurrent == null)
                                    {
                                        stockOnHandCurrent = new StockOnHandCurrent();
                                        stockOnHandCurrent.WarehouseID = salesOrderReturn.WarehouseID;
                                        stockOnHandCurrent.ProductID = summary.ProductID;
                                        stockOnHandCurrent.ProductLotID = details.ProductLotID;
                                        stockOnHandCurrent.QtyOnHandGood = 0;
                                        stockOnHandCurrent.QtyOnHandHold = details.Qty * -1;
                                        stockOnHandCurrent.QtyOnHandBad = 0;

                                        stockOnHandCurrentDataProvider.InsertData(stockOnHandCurrent, useTransaction);
                                    }
                                    else
                                    {
                                        details.QtyOnHand = stockOnHandCurrent.QtyOnHandHold;

                                        stockOnHandCurrent.QtyOnHandGood += 0;
                                        stockOnHandCurrent.QtyOnHandHold += details.Qty * -1;
                                        stockOnHandCurrent.QtyOnHandBad += 0;

                                        stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrent, useTransaction);
                                    }

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }
                                
                                if (summary.QtyOnHand != qtyOnHand)
                                {
                                    summary.QtyOnHand = qtyOnHand;
                                    vSalesOrderReturnSummaryDataProvider.UpdateData(summary, useTransaction);
                                }
                            }
                        }
                    }

                    var invoiceDataProvider = DataConfiguration.GetDefaultDataProvider<IInvoiceDataProvider>();

                    var invoice = new Invoice();

                    invoice.DocumentID = Guid.NewGuid();
                    invoice.DocumentCode = string.Format("{0}-{1}-11-{2}", vWarehouse.SiteCode,
                        DateTime.Today.ToString("yy"),
                        DefaultDataContext.GetAutoNumberCounter(vWarehouse.SiteID.Value, 11).ToString().PadLeft(7, '0'));
                    invoice.TransactionDate = salesOrderReturn.TransactionDate;
                    invoice.RefDocumentID = salesOrderReturn.DocumentID;
                    invoice.RefTransactionTypeID = 2; // Sales Order Return
                    invoice.DocumentStatusID = 1; // Draft

                    salesOrderReturn.InvoiceDocumentID = invoice.DocumentID;

                    invoiceDataProvider.InsertData(invoice, useTransaction);

                    salesOrderReturn.DocumentStatusID = 2; // Posted
                }
                else if ((salesOrderReturn.DocumentStatusID == 1) && (obj.DocumentStatusID == 3)) // Draft to Discarded
                {
                    salesOrderReturn.DocumentStatusID = 3; // Discarded
                }
                else if ((salesOrderReturn.DocumentStatusID == 2) && (obj.DocumentStatusID == 4)) // Posted to Voided
                {
                    // Insert data to Stock Transaction.
                    if ((obj.ChildSummaries != null) && (obj.ChildSummaries.Count > 0))
                    {
                        foreach (var summary in obj.ChildSummaries)
                        {
                            if ((summary.ChildDetails != null) && (summary.ChildDetails.Count > 0))
                            {
                                foreach (var details in summary.ChildDetails)
                                {
                                    var stockTransaction = new StockTransaction();

                                    stockTransaction.DocumentID = Guid.NewGuid();
                                    stockTransaction.RefVoidedDocumentID = salesOrderReturn.DocumentID;
                                    stockTransaction.TransactionDate = DefaultDataContext.GetDBServerUtcDateTime();
                                    stockTransaction.TransactionTypeID = 2; // Sales Order Return
                                    stockTransaction.DocumentCode = salesOrderReturn.DocumentCode;

                                    stockTransaction.SourceID = salesOrderReturn.WarehouseID;
                                    stockTransaction.DestinationID = salesOrderReturn.CustomerID;

                                    stockTransaction.ProductID = summary.ProductID;

                                    stockTransaction.ProductLotID = details.ProductLotID;

                                    stockTransaction.QtyGood = 0;
                                    stockTransaction.QtyHold = details.Qty * -1;
                                    stockTransaction.QtyBad = 0;

                                    var stockOnHandCurrent = stockOnHandCurrentDataProvider.GetData(salesOrderReturn.WarehouseID,
                                        summary.ProductID, details.ProductLotID);

                                    stockOnHandCurrent.QtyOnHandGood += 0;
                                    stockOnHandCurrent.QtyOnHandHold += details.Qty;
                                    stockOnHandCurrent.QtyOnHandBad += 0;

                                    stockOnHandCurrentDataProvider.UpdateData(stockOnHandCurrent, useTransaction);

                                    stockTransactionDataProvider.InsertData(stockTransaction, useTransaction);
                                }
                            }
                        }
                    }

                    salesOrderReturn.DocumentStatusID = 4; // Voided
                }
            }

            salesOrderReturn.PrintCount = obj.PrintCount;

            salesOrderReturnDataProvider.UpdateData(salesOrderReturn);
        }

        #endregion

    }

}
