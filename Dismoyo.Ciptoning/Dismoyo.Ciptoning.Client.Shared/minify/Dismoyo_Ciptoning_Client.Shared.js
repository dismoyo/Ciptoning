// ===================================================================================
// Author        : System
// Created date  : 09 Mar 2016 11:47:54
// Description   : vAreaViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vAreaViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vAreaViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
		IsDeleted: this.IsDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 14 Nov 2016 01:29:24
// Description   : vClosingPeriodViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vClosingPeriodViewModel = function (data) {
        this.SiteID = ko.observable();
        this.YearID = ko.observable();
        this.Jan = ko.observable();
        this.Feb = ko.observable();
        this.Mar = ko.observable();
        this.Apr = ko.observable();
        this.May = ko.observable();
        this.Jun = ko.observable();
        this.Jul = ko.observable();
        this.Aug = ko.observable();
        this.Sep = ko.observable();
        this.Oct = ko.observable();
        this.Nov = ko.observable();
        this.Dec = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        
        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vClosingPeriodViewModel.prototype, {
        toJS: function () {
            return {
                SiteID: this.SiteID(),
                YearID: this.YearID(),
                Jan: this.Jan(),
                Feb: this.Feb(),
                Mar: this.Mar(),
                Apr: this.Apr(),
                May: this.May(),
                Jun: this.Jun(),
                Jul: this.Jul(),
                Aug: this.Aug(),
                Sep: this.Sep(),
                Oct: this.Oct(),
                Nov: this.Nov(),
                Dec: this.Dec(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SiteID(data.SiteID);
                this.YearID(data.YearID);
                this.Jan(data.Jan);
                this.Feb(data.Feb);
                this.Mar(data.Mar);
                this.Apr(data.Apr);
                this.May(data.May);
                this.Jun(data.Jun);
                this.Jul(data.Jul);
                this.Aug(data.Aug);
                this.Sep(data.Sep);
                this.Oct(data.Oct);
                this.Nov(data.Nov);
                this.Dec(data.Dec);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);                
            }
        },

        clear: function () {
            this.SiteID(undefined);
            this.YearID(undefined);
            this.Jan(undefined);
            this.Feb(undefined);
            this.Mar(undefined);
            this.Apr(undefined);
            this.May(undefined);
            this.Jun(undefined);
            this.Jul(undefined);
            this.Aug(undefined);
            this.Sep(undefined);
            this.Oct(undefined);
            this.Nov(undefined);
            this.Dec(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 20 Mar 2016 01:38:45
// Description   : vCompanyViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vCompanyViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Company = ko.observable();
        this.Address1 = ko.observable();
        this.Address2 = ko.observable();
        this.Address3 = ko.observable();
        this.Address = ko.observable();
        this.City = ko.observable();
        this.StateProvince = ko.observable();
        this.CountryID = ko.observable();
        this.CountryName = ko.observable();
        this.ZipCode = ko.observable();
        this.Phone1 = ko.observable();
        this.Phone2 = ko.observable();
        this.Fax = ko.observable();
        this.Email = ko.observable();
        this.TaxNumber = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vCompanyViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Company: this.Company(),
                Address1: this.Address1(),
                Address2: this.Address2(),
                Address3: this.Address3(),
                Address: this.Address(),
                City: this.City(),
                StateProvince: this.StateProvince(),
                CountryID: this.CountryID(),
                CountryName: this.CountryName(),
                ZipCode: this.ZipCode(),
                Phone1: this.Phone1(),
                Phone2: this.Phone2(),
                Fax: this.Fax(),
                Email: this.Email(),
                TaxNumber: this.TaxNumber(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Company(data.Company);
                this.Address1(data.Address1);
                this.Address2(data.Address2);
                this.Address3(data.Address3);
                this.Address(data.Address);
                this.City(data.City);
                this.StateProvince(data.StateProvince);
                this.CountryID(data.CountryID);
                this.CountryName(data.CountryName);
                this.ZipCode(data.ZipCode);
                this.Phone1(data.Phone1);
                this.Phone2(data.Phone2);
                this.Fax(data.Fax);
                this.Email(data.Email);
                this.TaxNumber(data.TaxNumber);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Company(undefined);
            this.Address1(undefined);
            this.Address2(undefined);
            this.Address3(undefined);
            this.Address(undefined);
            this.City(undefined);
            this.StateProvince(undefined);
            this.CountryID(undefined);
            this.CountryName(undefined);
            this.ZipCode(undefined);
            this.Phone1(undefined);
            this.Phone2(undefined);
            this.Fax(undefined);
            this.Email(undefined);
            this.TaxNumber(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 17 Mar 2016 21:32:32
// Description   : vCountryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vCountryViewModel = function (data) {
        this.ID = ko.observable();
        this.Name = ko.observable();
        this.Alpha3Code = ko.observable();
        this.DialCode = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vCountryViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Name: this.Name(),
                Alpha3Code: this.Alpha3Code(),
                DialCode: this.DialCode()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Name(data.Name);
                this.Alpha3Code(data.Alpha3Code);
                this.DialCode(data.DialCode);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Name(undefined);
            this.Alpha3Code(undefined);
            this.DialCode(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 10 May 2016 17:47:45
// Description   : vCustomerViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vCustomerViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Customer = ko.observable();
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.SalesmanGroupID = ko.observable();
        this.SalesmanGroupName = ko.observable();
        this.SalesmanCategoryID = ko.observable();
        this.SalesmanCategoryName = ko.observable();
        this.SalesmanPhoneID = ko.observable();
        this.SalesmanSFA = ko.observable();
        this.SalesmanStatusID = ko.observable();
        this.SalesmanStatusName = ko.observable();
        this.IsSalesmanDeleted = ko.observable();
        this.RegisteredDate = ko.observable();
        this.TermOfPaymentID = ko.observable();
        this.TermOfPaymentName = ko.observable();
        this.CreditLimit = ko.observable();
        this.PriceGroupID = ko.observable();
        this.PriceGroupName = ko.observable();
        this.DiscountGroupID = ko.observable();
        this.DiscountGroupCode = ko.observable();
        this.DiscountGroupName = ko.observable();
        this.DiscountGroup = ko.observable();
        this.DiscountGroupDescription = ko.observable();
        this.DiscountGroupStatusID = ko.observable();
        this.DiscountGroupStatusName = ko.observable();
        this.IsTaxNumberAvailable = ko.observable();
        this.TaxSAPCode = ko.observable();
        this.TaxNumber = ko.observable();
        this.Address1 = ko.observable();
        this.Address2 = ko.observable();
        this.Address3 = ko.observable();
        this.Address = ko.observable();
        this.City = ko.observable();
        this.StateProvince = ko.observable();
        this.CountryID = ko.observable();
        this.CountryName = ko.observable();
        this.ZipCode = ko.observable();
        this.Phone1 = ko.observable();
        this.Phone2 = ko.observable();
        this.Phone3 = ko.observable();
        this.Fax = ko.observable();
        this.Email = ko.observable();
        this.Longitude = ko.observable();
        this.Latitude = ko.observable();
        this.IsBillSameAsAddress = ko.observable();
        this.BillName = ko.observable();
        this.BillAddress1 = ko.observable();
        this.BillAddress2 = ko.observable();
        this.BillAddress3 = ko.observable();
        this.BillAddress = ko.observable();
        this.BillCity = ko.observable();
        this.BillStateProvince = ko.observable();
        this.BillCountryID = ko.observable();
        this.BillCountryName = ko.observable();
        this.BillZipCode = ko.observable();
        this.BillPhone1 = ko.observable();
        this.BillPhone2 = ko.observable();
        this.BillPhone3 = ko.observable();
        this.BillFax = ko.observable();
        this.BillEmail = ko.observable();
        this.IsTaxSameAsAddress = ko.observable();
        this.IsTaxSameAsBillAddress = ko.observable();
        this.TaxName = ko.observable();
        this.TaxAddress1 = ko.observable();
        this.TaxAddress2 = ko.observable();
        this.TaxAddress3 = ko.observable();
        this.TaxAddress = ko.observable();
        this.TaxCity = ko.observable();
        this.TaxStateProvince = ko.observable();
        this.TaxCountryID = ko.observable();
        this.TaxCountryName = ko.observable();
        this.TaxZipCode = ko.observable();
        this.TaxPhone1 = ko.observable();
        this.TaxPhone2 = ko.observable();
        this.TaxPhone3 = ko.observable();
        this.TaxFax = ko.observable();
        this.TaxEmail = ko.observable();
        this.AdditionalInfo1 = ko.observable();
        this.AdditionalInfo2 = ko.observable();
        this.AdditionalInfo3 = ko.observable();
        this.AdditionalInfo4 = ko.observable();
        this.AdditionalInfo5 = ko.observable();
        this.AdditionalInfo6 = ko.observable();
        this.AdditionalInfo7 = ko.observable();
        this.AdditionalInfo8 = ko.observable();
        this.AdditionalInfo9 = ko.observable();
        this.AdditionalInfo10 = ko.observable();
        this.Category1ID = ko.observable();
        this.Category1Code = ko.observable();
        this.Category1Name = ko.observable();
        this.Category1 = ko.observable();
        this.Category2ID = ko.observable();
        this.Category2Code = ko.observable();
        this.Category2Name = ko.observable();
        this.Category2 = ko.observable();
        this.Category3ID = ko.observable();
        this.Category3Code = ko.observable();
        this.Category3Name = ko.observable();
        this.Category3 = ko.observable();
        this.Category4ID = ko.observable();
        this.Category4Code = ko.observable();
        this.Category4Name = ko.observable();
        this.Category4 = ko.observable();
        this.Category5ID = ko.observable();
        this.Category5Code = ko.observable();
        this.Category5Name = ko.observable();
        this.Category5 = ko.observable();
        this.Category6ID = ko.observable();
        this.Category6Code = ko.observable();
        this.Category6Name = ko.observable();
        this.Category6 = ko.observable();
        this.Category7ID = ko.observable();
        this.Category7Code = ko.observable();
        this.Category7Name = ko.observable();
        this.Category7 = ko.observable();
        this.Category8ID = ko.observable();
        this.Category8Code = ko.observable();
        this.Category8Name = ko.observable();
        this.Category8 = ko.observable();
        this.Category9ID = ko.observable();
        this.Category9Code = ko.observable();
        this.Category9Name = ko.observable();
        this.Category9 = ko.observable();
        this.Category10ID = ko.observable();
        this.Category10Code = ko.observable();
        this.Category10Name = ko.observable();
        this.Category10 = ko.observable();
        this.Photo = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vCustomerViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Customer: this.Customer(),
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                SalesmanGroupID: this.SalesmanGroupID(),
                SalesmanGroupName: this.SalesmanGroupName(),
                SalesmanCategoryID: this.SalesmanCategoryID(),
                SalesmanCategoryName: this.SalesmanCategoryName(),
                SalesmanPhoneID: this.SalesmanPhoneID(),
                SalesmanSFA: this.SalesmanSFA(),
                SalesmanStatusID: this.SalesmanStatusID(),
                SalesmanStatusName: this.SalesmanStatusName(),
                IsSalesmanDeleted: this.IsSalesmanDeleted(),
                RegisteredDate: this.RegisteredDate(),
                TermOfPaymentID: this.TermOfPaymentID(),
                TermOfPaymentName: this.TermOfPaymentName(),
                CreditLimit: this.CreditLimit(),
                PriceGroupID: this.PriceGroupID(),
                PriceGroupName: this.PriceGroupName(),
                DiscountGroupID: this.DiscountGroupID(),
                DiscountGroupCode: this.DiscountGroupCode(),
                DiscountGroupName: this.DiscountGroupName(),
                DiscountGroup: this.DiscountGroup(),
                DiscountGroupDescription: this.DiscountGroupDescription(),
                DiscountGroupStatusID: this.DiscountGroupStatusID(),
                DiscountGroupStatusName: this.DiscountGroupStatusName(),
                IsTaxNumberAvailable: this.IsTaxNumberAvailable(),
                TaxSAPCode: this.TaxSAPCode(),
                TaxNumber: this.TaxNumber(),
                Address1: this.Address1(),
                Address2: this.Address2(),
                Address3: this.Address3(),
                Address: this.Address(),
                City: this.City(),
                StateProvince: this.StateProvince(),
                CountryID: this.CountryID(),
                CountryName: this.CountryName(),
                ZipCode: this.ZipCode(),
                Phone1: this.Phone1(),
                Phone2: this.Phone2(),
                Phone3: this.Phone3(),
                Fax: this.Fax(),
                Email: this.Email(),
                Longitude: this.Longitude(),
                Latitude: this.Latitude(),
                IsBillSameAsAddress: this.IsBillSameAsAddress(),
                BillName: this.BillName(),
                BillAddress1: this.BillAddress1(),
                BillAddress2: this.BillAddress2(),
                BillAddress3: this.BillAddress3(),
                BillAddress: this.BillAddress(),
                BillCity: this.BillCity(),
                BillStateProvince: this.BillStateProvince(),
                BillCountryID: this.BillCountryID(),
                BillCountryName: this.BillCountryName(),
                BillZipCode: this.BillZipCode(),
                BillPhone1: this.BillPhone1(),
                BillPhone2: this.BillPhone2(),
                BillPhone3: this.BillPhone3(),
                BillFax: this.BillFax(),
                BillEmail: this.BillEmail(),
                IsTaxSameAsAddress: this.IsTaxSameAsAddress(),
                IsTaxSameAsBillAddress: this.IsTaxSameAsBillAddress(),
                TaxName: this.TaxName(),
                TaxAddress1: this.TaxAddress1(),
                TaxAddress2: this.TaxAddress2(),
                TaxAddress3: this.TaxAddress3(),
                TaxAddress: this.TaxAddress(),
                TaxCity: this.TaxCity(),
                TaxStateProvince: this.TaxStateProvince(),
                TaxCountryID: this.TaxCountryID(),
                TaxCountryName: this.TaxCountryName(),
                TaxZipCode: this.TaxZipCode(),
                TaxPhone1: this.TaxPhone1(),
                TaxPhone2: this.TaxPhone2(),
                TaxPhone3: this.TaxPhone3(),
                TaxFax: this.TaxFax(),
                TaxEmail: this.TaxEmail(),
                AdditionalInfo1: this.AdditionalInfo1(),
                AdditionalInfo2: this.AdditionalInfo2(),
                AdditionalInfo3: this.AdditionalInfo3(),
                AdditionalInfo4: this.AdditionalInfo4(),
                AdditionalInfo5: this.AdditionalInfo5(),
                AdditionalInfo6: this.AdditionalInfo6(),
                AdditionalInfo7: this.AdditionalInfo7(),
                AdditionalInfo8: this.AdditionalInfo8(),
                AdditionalInfo9: this.AdditionalInfo9(),
                AdditionalInfo10: this.AdditionalInfo10(),
                Category1ID: this.Category1ID(),
                Category1Code: this.Category1Code(),
                Category1Name: this.Category1Name(),
                Category1: this.Category1(),
                Category2ID: this.Category2ID(),
                Category2Code: this.Category2Code(),
                Category2Name: this.Category2Name(),
                Category2: this.Category2(),
                Category3ID: this.Category3ID(),
                Category3Code: this.Category3Code(),
                Category3Name: this.Category3Name(),
                Category3: this.Category3(),
                Category4ID: this.Category4ID(),
                Category4Code: this.Category4Code(),
                Category4Name: this.Category4Name(),
                Category4: this.Category4(),
                Category5ID: this.Category5ID(),
                Category5Code: this.Category5Code(),
                Category5Name: this.Category5Name(),
                Category5: this.Category5(),
                Category6ID: this.Category6ID(),
                Category6Code: this.Category6Code(),
                Category6Name: this.Category6Name(),
                Category6: this.Category6(),
                Category7ID: this.Category7ID(),
                Category7Code: this.Category7Code(),
                Category7Name: this.Category7Name(),
                Category7: this.Category7(),
                Category8ID: this.Category8ID(),
                Category8Code: this.Category8Code(),
                Category8Name: this.Category8Name(),
                Category8: this.Category8(),
                Category9ID: this.Category9ID(),
                Category9Code: this.Category9Code(),
                Category9Name: this.Category9Name(),
                Category9: this.Category9(),
                Category10ID: this.Category10ID(),
                Category10Code: this.Category10Code(),
                Category10Name: this.Category10Name(),
                Category10: this.Category10(),
                Photo: this.Photo(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Customer(data.Customer);
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.SalesmanGroupID(data.SalesmanGroupID);
                this.SalesmanGroupName(data.SalesmanGroupName);
                this.SalesmanCategoryID(data.SalesmanCategoryID);
                this.SalesmanCategoryName(data.SalesmanCategoryName);
                this.SalesmanPhoneID(data.SalesmanPhoneID);
                this.SalesmanSFA(data.SalesmanSFA);
                this.SalesmanStatusID(data.SalesmanStatusID);
                this.SalesmanStatusName(data.SalesmanStatusName);
                this.IsSalesmanDeleted(data.IsSalesmanDeleted);
                this.RegisteredDate(data.RegisteredDate);
                this.TermOfPaymentID(data.TermOfPaymentID);
                this.TermOfPaymentName(data.TermOfPaymentName);
                this.CreditLimit(data.CreditLimit);
                this.PriceGroupID(data.PriceGroupID);
                this.PriceGroupName(data.PriceGroupName);
                this.DiscountGroupID(data.DiscountGroupID);
                this.DiscountGroupCode(data.DiscountGroupCode);
                this.DiscountGroupName(data.DiscountGroupName);
                this.DiscountGroup(data.DiscountGroup);
                this.DiscountGroupDescription(data.DiscountGroupDescription);
                this.DiscountGroupStatusID(data.DiscountGroupStatusID);
                this.DiscountGroupStatusName(data.DiscountGroupStatusName);
                this.IsTaxNumberAvailable(data.IsTaxNumberAvailable);
                this.TaxSAPCode(data.TaxSAPCode);
                this.TaxNumber(data.TaxNumber);
                this.Address1(data.Address1);
                this.Address2(data.Address2);
                this.Address3(data.Address3);
                this.Address(data.Address);
                this.City(data.City);
                this.StateProvince(data.StateProvince);
                this.CountryID(data.CountryID);
                this.CountryName(data.CountryName);
                this.ZipCode(data.ZipCode);
                this.Phone1(data.Phone1);
                this.Phone2(data.Phone2);
                this.Phone3(data.Phone3);
                this.Fax(data.Fax);
                this.Email(data.Email);
                this.Longitude(data.Longitude);
                this.Latitude(data.Latitude);
                this.IsBillSameAsAddress(data.IsBillSameAsAddress);
                this.BillName(data.BillName);
                this.BillAddress1(data.BillAddress1);
                this.BillAddress2(data.BillAddress2);
                this.BillAddress3(data.BillAddress3);
                this.BillAddress(data.BillAddress);
                this.BillCity(data.BillCity);
                this.BillStateProvince(data.BillStateProvince);
                this.BillCountryID(data.BillCountryID);
                this.BillCountryName(data.BillCountryName);
                this.BillZipCode(data.BillZipCode);
                this.BillPhone1(data.BillPhone1);
                this.BillPhone2(data.BillPhone2);
                this.BillPhone3(data.BillPhone3);
                this.BillFax(data.BillFax);
                this.BillEmail(data.BillEmail);
                this.IsTaxSameAsAddress(data.IsTaxSameAsAddress);
                this.IsTaxSameAsBillAddress(data.IsTaxSameAsBillAddress);
                this.TaxName(data.TaxName);
                this.TaxAddress1(data.TaxAddress1);
                this.TaxAddress2(data.TaxAddress2);
                this.TaxAddress3(data.TaxAddress3);
                this.TaxAddress(data.TaxAddress);
                this.TaxCity(data.TaxCity);
                this.TaxStateProvince(data.TaxStateProvince);
                this.TaxCountryID(data.TaxCountryID);
                this.TaxCountryName(data.TaxCountryName);
                this.TaxZipCode(data.TaxZipCode);
                this.TaxPhone1(data.TaxPhone1);
                this.TaxPhone2(data.TaxPhone2);
                this.TaxPhone3(data.TaxPhone3);
                this.TaxFax(data.TaxFax);
                this.TaxEmail(data.TaxEmail);
                this.AdditionalInfo1(data.AdditionalInfo1);
                this.AdditionalInfo2(data.AdditionalInfo2);
                this.AdditionalInfo3(data.AdditionalInfo3);
                this.AdditionalInfo4(data.AdditionalInfo4);
                this.AdditionalInfo5(data.AdditionalInfo5);
                this.AdditionalInfo6(data.AdditionalInfo6);
                this.AdditionalInfo7(data.AdditionalInfo7);
                this.AdditionalInfo8(data.AdditionalInfo8);
                this.AdditionalInfo9(data.AdditionalInfo9);
                this.AdditionalInfo10(data.AdditionalInfo10);
                this.Category1ID(data.Category1ID);
                this.Category1Code(data.Category1Code);
                this.Category1Name(data.Category1Name);
                this.Category1(data.Category1);
                this.Category2ID(data.Category2ID);
                this.Category2Code(data.Category2Code);
                this.Category2Name(data.Category2Name);
                this.Category2(data.Category2);
                this.Category3ID(data.Category3ID);
                this.Category3Code(data.Category3Code);
                this.Category3Name(data.Category3Name);
                this.Category3(data.Category3);
                this.Category4ID(data.Category4ID);
                this.Category4Code(data.Category4Code);
                this.Category4Name(data.Category4Name);
                this.Category4(data.Category4);
                this.Category5ID(data.Category5ID);
                this.Category5Code(data.Category5Code);
                this.Category5Name(data.Category5Name);
                this.Category5(data.Category5);
                this.Category6ID(data.Category6ID);
                this.Category6Code(data.Category6Code);
                this.Category6Name(data.Category6Name);
                this.Category6(data.Category6);
                this.Category7ID(data.Category7ID);
                this.Category7Code(data.Category7Code);
                this.Category7Name(data.Category7Name);
                this.Category7(data.Category7);
                this.Category8ID(data.Category8ID);
                this.Category8Code(data.Category8Code);
                this.Category8Name(data.Category8Name);
                this.Category8(data.Category8);
                this.Category9ID(data.Category9ID);
                this.Category9Code(data.Category9Code);
                this.Category9Name(data.Category9Name);
                this.Category9(data.Category9);
                this.Category10ID(data.Category10ID);
                this.Category10Code(data.Category10Code);
                this.Category10Name(data.Category10Name);
                this.Category10(data.Category10);
                this.Photo(data.Photo);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Customer(undefined);
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.SalesmanGroupID(undefined);
            this.SalesmanGroupName(undefined);
            this.SalesmanCategoryID(undefined);
            this.SalesmanCategoryName(undefined);
            this.SalesmanPhoneID(undefined);
            this.SalesmanSFA(undefined);
            this.SalesmanStatusID(undefined);
            this.SalesmanStatusName(undefined);
            this.IsSalesmanDeleted(undefined);
            this.RegisteredDate(undefined);
            this.TermOfPaymentID(undefined);
            this.TermOfPaymentName(undefined);
            this.CreditLimit(undefined);
            this.PriceGroupID(undefined);
            this.PriceGroupName(undefined);
            this.DiscountGroupID(undefined);
            this.DiscountGroupCode(undefined);
            this.DiscountGroupName(undefined);
            this.DiscountGroup(undefined);
            this.DiscountGroupDescription(undefined);
            this.DiscountGroupStatusID(undefined);
            this.DiscountGroupStatusName(undefined);
            this.IsTaxNumberAvailable(undefined);
            this.TaxSAPCode(undefined);
            this.TaxNumber(undefined);
            this.Address1(undefined);
            this.Address2(undefined);
            this.Address3(undefined);
            this.Address(undefined);
            this.City(undefined);
            this.StateProvince(undefined);
            this.CountryID(undefined);
            this.CountryName(undefined);
            this.ZipCode(undefined);
            this.Phone1(undefined);
            this.Phone2(undefined);
            this.Phone3(undefined);
            this.Fax(undefined);
            this.Email(undefined);
            this.Longitude(undefined);
            this.Latitude(undefined);
            this.IsBillSameAsAddress(undefined);
            this.BillName(undefined);
            this.BillAddress1(undefined);
            this.BillAddress2(undefined);
            this.BillAddress3(undefined);
            this.BillAddress(undefined);
            this.BillCity(undefined);
            this.BillStateProvince(undefined);
            this.BillCountryID(undefined);
            this.BillCountryName(undefined);
            this.BillZipCode(undefined);
            this.BillPhone1(undefined);
            this.BillPhone2(undefined);
            this.BillPhone3(undefined);
            this.BillFax(undefined);
            this.BillEmail(undefined);
            this.IsTaxSameAsAddress(undefined);
            this.IsTaxSameAsBillAddress(undefined);
            this.TaxName(undefined);
            this.TaxAddress1(undefined);
            this.TaxAddress2(undefined);
            this.TaxAddress3(undefined);
            this.TaxAddress(undefined);
            this.TaxCity(undefined);
            this.TaxStateProvince(undefined);
            this.TaxCountryID(undefined);
            this.TaxCountryName(undefined);
            this.TaxZipCode(undefined);
            this.TaxPhone1(undefined);
            this.TaxPhone2(undefined);
            this.TaxPhone3(undefined);
            this.TaxFax(undefined);
            this.TaxEmail(undefined);
            this.AdditionalInfo1(undefined);
            this.AdditionalInfo2(undefined);
            this.AdditionalInfo3(undefined);
            this.AdditionalInfo4(undefined);
            this.AdditionalInfo5(undefined);
            this.AdditionalInfo6(undefined);
            this.AdditionalInfo7(undefined);
            this.AdditionalInfo8(undefined);
            this.AdditionalInfo9(undefined);
            this.AdditionalInfo10(undefined);
            this.Category1ID(undefined);
            this.Category1Code(undefined);
            this.Category1Name(undefined);
            this.Category1(undefined);
            this.Category2ID(undefined);
            this.Category2Code(undefined);
            this.Category2Name(undefined);
            this.Category2(undefined);
            this.Category3ID(undefined);
            this.Category3Code(undefined);
            this.Category3Name(undefined);
            this.Category3(undefined);
            this.Category4ID(undefined);
            this.Category4Code(undefined);
            this.Category4Name(undefined);
            this.Category4(undefined);
            this.Category5ID(undefined);
            this.Category5Code(undefined);
            this.Category5Name(undefined);
            this.Category5(undefined);
            this.Category6ID(undefined);
            this.Category6Code(undefined);
            this.Category6Name(undefined);
            this.Category6(undefined);
            this.Category7ID(undefined);
            this.Category7Code(undefined);
            this.Category7Name(undefined);
            this.Category7(undefined);
            this.Category8ID(undefined);
            this.Category8Code(undefined);
            this.Category8Name(undefined);
            this.Category8(undefined);
            this.Category9ID(undefined);
            this.Category9Code(undefined);
            this.Category9Name(undefined);
            this.Category9(undefined);
            this.Category10ID(undefined);
            this.Category10Code(undefined);
            this.Category10Name(undefined);
            this.Category10(undefined);
            this.Photo(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);            
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 09 Mar 2016 11:47:54
// Description   : vCustomerCategoryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vCustomerCategoryViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Category = ko.observable();
        this.ParentID = ko.observable();
        this.ParentCode = ko.observable();
        this.ParentName = ko.observable();
        this.Parent = ko.observable();
        this.Group = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vCustomerCategoryViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Category: this.Category(),
                ParentID: this.ParentID(),
                ParentCode: this.ParentCode(),
                ParentName: this.ParentName(),
                Parent: this.Parent(),
                Group: this.Group(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Category(data.Category);
                this.ParentID(data.ParentID);
                this.ParentCode(data.ParentCode);
                this.ParentName(data.ParentName);
                this.Parent(data.Parent);
                this.Group(data.Group);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Category(undefined);
            this.ParentID(undefined);
            this.ParentCode(undefined);
            this.ParentName(undefined);
            this.Parent(undefined);
            this.Group(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 13 Apr 2016 21:12:27
// Description   : vDiscountGroupViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vDiscountGroupViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.DiscountGroup = ko.observable();
        this.Description = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.ChildProducts = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vDiscountGroupViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                DiscountGroup: this.DiscountGroup(),
                Description: this.Description(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                ChildProducts: ko.toJS(this.ChildProducts())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.DiscountGroup(data.DiscountGroup);
                this.Description(data.Description);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.ChildProducts) {
                    for (var i = 0; i < data.ChildProducts.length; i++)
                        this.ChildProducts.push(new Dismoyo_Ciptoning_Client.vDiscountGroupProductViewModel(
                            data.ChildProducts[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.DiscountGroup(undefined);
            this.Description(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.ChildProducts(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 14 Apr 2016 16:10:13
// Description   : vDiscountGroupProductViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vDiscountGroupProductViewModel = function (data) {
        this.DiscountGroupID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.DiscountStrata1ID = ko.observable();
        this.DiscountStrata1Code = ko.observable();
        this.DiscountStrata1Name = ko.observable();
        this.DiscountStrata1 = ko.observable();
        this.DiscountStrata1ValidDateFrom = ko.observable();
        this.DiscountStrata1ValidDateTo = ko.observable();
        this.DiscountStrata1StatusID = ko.observable();
        this.DiscountStrata1StatusName = ko.observable();
        this.DiscountStrata2ID = ko.observable();
        this.DiscountStrata2Code = ko.observable();
        this.DiscountStrata2Name = ko.observable();
        this.DiscountStrata2 = ko.observable();
        this.DiscountStrata2ValidDateFrom = ko.observable();
        this.DiscountStrata2ValidDateTo = ko.observable();
        this.DiscountStrata2StatusID = ko.observable();
        this.DiscountStrata2StatusName = ko.observable();
        this.DiscountStrata3ID = ko.observable();
        this.DiscountStrata3Code = ko.observable();
        this.DiscountStrata3Name = ko.observable();
        this.DiscountStrata3 = ko.observable();
        this.DiscountStrata3ValidDateFrom = ko.observable();
        this.DiscountStrata3ValidDateTo = ko.observable();
        this.DiscountStrata3StatusID = ko.observable();
        this.DiscountStrata3StatusName = ko.observable();
        this.DiscountStrata4ID = ko.observable();
        this.DiscountStrata4Code = ko.observable();
        this.DiscountStrata4Name = ko.observable();
        this.DiscountStrata4 = ko.observable();
        this.DiscountStrata4ValidDateFrom = ko.observable();
        this.DiscountStrata4ValidDateTo = ko.observable();
        this.DiscountStrata4StatusID = ko.observable();
        this.DiscountStrata4StatusName = ko.observable();
        this.DiscountStrata5ID = ko.observable();
        this.DiscountStrata5Code = ko.observable();
        this.DiscountStrata5Name = ko.observable();
        this.DiscountStrata5 = ko.observable();
        this.DiscountStrata5ValidDateFrom = ko.observable();
        this.DiscountStrata5ValidDateTo = ko.observable();
        this.DiscountStrata5StatusID = ko.observable();
        this.DiscountStrata5StatusName = ko.observable();

        this.Parent = ko.observable();
        this.ChildStrata1 = ko.observable();
        this.ChildStrata2 = ko.observable();
        this.ChildStrata3 = ko.observable();
        this.ChildStrata4 = ko.observable();
        this.ChildStrata5 = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vDiscountGroupProductViewModel.prototype, {
        toJS: function () {
            return {
                DiscountGroupID: this.DiscountGroupID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                DiscountStrata1ID: this.DiscountStrata1ID(),
                DiscountStrata1Code: this.DiscountStrata1Code(),
                DiscountStrata1Name: this.DiscountStrata1Name(),
                DiscountStrata1: this.DiscountStrata1(),
                DiscountStrata1ValidDateFrom: this.DiscountStrata1ValidDateFrom(),
                DiscountStrata1ValidDateTo: this.DiscountStrata1ValidDateTo(),
                DiscountStrata1StatusID: this.DiscountStrata1StatusID(),
                DiscountStrata1StatusName: this.DiscountStrata1StatusName(),
                DiscountStrata2ID: this.DiscountStrata2ID(),
                DiscountStrata2Code: this.DiscountStrata2Code(),
                DiscountStrata2Name: this.DiscountStrata2Name(),
                DiscountStrata2: this.DiscountStrata2(),
                DiscountStrata2ValidDateFrom: this.DiscountStrata2ValidDateFrom(),
                DiscountStrata2ValidDateTo: this.DiscountStrata2ValidDateTo(),
                DiscountStrata2StatusID: this.DiscountStrata2StatusID(),
                DiscountStrata2StatusName: this.DiscountStrata2StatusName(),
                DiscountStrata3ID: this.DiscountStrata3ID(),
                DiscountStrata3Code: this.DiscountStrata3Code(),
                DiscountStrata3Name: this.DiscountStrata3Name(),
                DiscountStrata3: this.DiscountStrata3(),
                DiscountStrata3ValidDateFrom: this.DiscountStrata3ValidDateFrom(),
                DiscountStrata3ValidDateTo: this.DiscountStrata3ValidDateTo(),
                DiscountStrata3StatusID: this.DiscountStrata3StatusID(),
                DiscountStrata3StatusName: this.DiscountStrata3StatusName(),
                DiscountStrata4ID: this.DiscountStrata4ID(),
                DiscountStrata4Code: this.DiscountStrata4Code(),
                DiscountStrata4Name: this.DiscountStrata4Name(),
                DiscountStrata4: this.DiscountStrata4(),
                DiscountStrata4ValidDateFrom: this.DiscountStrata4ValidDateFrom(),
                DiscountStrata4ValidDateTo: this.DiscountStrata4ValidDateTo(),
                DiscountStrata4StatusID: this.DiscountStrata4StatusID(),
                DiscountStrata4StatusName: this.DiscountStrata4StatusName(),
                DiscountStrata5ID: this.DiscountStrata5ID(),
                DiscountStrata5Code: this.DiscountStrata5Code(),
                DiscountStrata5Name: this.DiscountStrata5Name(),
                DiscountStrata5: this.DiscountStrata5(),
                DiscountStrata5ValidDateFrom: this.DiscountStrata5ValidDateFrom(),
                DiscountStrata5ValidDateTo: this.DiscountStrata5ValidDateTo(),
                DiscountStrata5StatusID: this.DiscountStrata5StatusID(),
                DiscountStrata5StatusName: this.DiscountStrata5StatusName(),

                Parent: this.Parent(),
                ChildStrata1: ko.toJS(this.ChildStrata1()),
                ChildStrata2: ko.toJS(this.ChildStrata2()),
                ChildStrata3: ko.toJS(this.ChildStrata3()),
                ChildStrata4: ko.toJS(this.ChildStrata4()),
                ChildStrata5: ko.toJS(this.ChildStrata5())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DiscountGroupID(data.DiscountGroupID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.DiscountStrata1ID(data.DiscountStrata1ID);
                this.DiscountStrata1Code(data.DiscountStrata1Code);
                this.DiscountStrata1Name(data.DiscountStrata1Name);
                this.DiscountStrata1(data.DiscountStrata1);
                this.DiscountStrata1ValidDateFrom(data.DiscountStrata1ValidDateFrom);
                this.DiscountStrata1ValidDateTo(data.DiscountStrata1ValidDateTo);
                this.DiscountStrata1StatusID(data.DiscountStrata1StatusID);
                this.DiscountStrata1StatusName(data.DiscountStrata1StatusName);
                this.DiscountStrata2ID(data.DiscountStrata2ID);
                this.DiscountStrata2Code(data.DiscountStrata2Code);
                this.DiscountStrata2Name(data.DiscountStrata2Name);
                this.DiscountStrata2(data.DiscountStrata2);
                this.DiscountStrata2ValidDateFrom(data.DiscountStrata2ValidDateFrom);
                this.DiscountStrata2ValidDateTo(data.DiscountStrata2ValidDateTo);
                this.DiscountStrata2StatusID(data.DiscountStrata2StatusID);
                this.DiscountStrata2StatusName(data.DiscountStrata2StatusName);
                this.DiscountStrata3ID(data.DiscountStrata3ID);
                this.DiscountStrata3Code(data.DiscountStrata3Code);
                this.DiscountStrata3Name(data.DiscountStrata3Name);
                this.DiscountStrata3(data.DiscountStrata3);
                this.DiscountStrata3ValidDateFrom(data.DiscountStrata3ValidDateFrom);
                this.DiscountStrata3ValidDateTo(data.DiscountStrata3ValidDateTo);
                this.DiscountStrata3StatusID(data.DiscountStrata3StatusID);
                this.DiscountStrata3StatusName(data.DiscountStrata3StatusName);
                this.DiscountStrata4ID(data.DiscountStrata4ID);
                this.DiscountStrata4Code(data.DiscountStrata4Code);
                this.DiscountStrata4Name(data.DiscountStrata4Name);
                this.DiscountStrata4(data.DiscountStrata4);
                this.DiscountStrata4ValidDateFrom(data.DiscountStrata4ValidDateFrom);
                this.DiscountStrata4ValidDateTo(data.DiscountStrata4ValidDateTo);
                this.DiscountStrata4StatusID(data.DiscountStrata4StatusID);
                this.DiscountStrata4StatusName(data.DiscountStrata4StatusName);
                this.DiscountStrata5ID(data.DiscountStrata5ID);
                this.DiscountStrata5Code(data.DiscountStrata5Code);
                this.DiscountStrata5Name(data.DiscountStrata5Name);
                this.DiscountStrata5(data.DiscountStrata5);
                this.DiscountStrata5ValidDateFrom(data.DiscountStrata5ValidDateFrom);
                this.DiscountStrata5ValidDateTo(data.DiscountStrata5ValidDateTo);
                this.DiscountStrata5StatusID(data.DiscountStrata5StatusID);
                this.DiscountStrata5StatusName(data.DiscountStrata5StatusName);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildStrata1)
                    this.ChildStrata1(data.ChildStrata1);

                if (data.ChildStrata2)
                    this.ChildStrata2(data.ChildStrata2);

                if (data.ChildStrata3)
                    this.ChildStrata3(data.ChildStrata3);

                if (data.ChildStrata4)
                    this.ChildStrata4(data.ChildStrata4);

                if (data.ChildStrata5)
                    this.ChildStrata5(data.ChildStrata5);
            }
        },

        clear: function () {
            this.DiscountGroupID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.DiscountStrata1ID(undefined);
            this.DiscountStrata1Code(undefined);
            this.DiscountStrata1Name(undefined);
            this.DiscountStrata1(undefined);
            this.DiscountStrata1ValidDateFrom(undefined);
            this.DiscountStrata1ValidDateTo(undefined);
            this.DiscountStrata1StatusID(undefined);
            this.DiscountStrata1StatusName(undefined);
            this.DiscountStrata2ID(undefined);
            this.DiscountStrata2Code(undefined);
            this.DiscountStrata2Name(undefined);
            this.DiscountStrata2(undefined);
            this.DiscountStrata2ValidDateFrom(undefined);
            this.DiscountStrata2ValidDateTo(undefined);
            this.DiscountStrata2StatusID(undefined);
            this.DiscountStrata2StatusName(undefined);
            this.DiscountStrata3ID(undefined);
            this.DiscountStrata3Code(undefined);
            this.DiscountStrata3Name(undefined);
            this.DiscountStrata3(undefined);
            this.DiscountStrata3ValidDateFrom(undefined);
            this.DiscountStrata3ValidDateTo(undefined);
            this.DiscountStrata3StatusID(undefined);
            this.DiscountStrata3StatusName(undefined);
            this.DiscountStrata4ID(undefined);
            this.DiscountStrata4Code(undefined);
            this.DiscountStrata4Name(undefined);
            this.DiscountStrata4(undefined);
            this.DiscountStrata4ValidDateFrom(undefined);
            this.DiscountStrata4ValidDateTo(undefined);
            this.DiscountStrata4StatusID(undefined);
            this.DiscountStrata4StatusName(undefined);
            this.DiscountStrata5ID(undefined);
            this.DiscountStrata5Code(undefined);
            this.DiscountStrata5Name(undefined);
            this.DiscountStrata5(undefined);
            this.DiscountStrata5ValidDateFrom(undefined);
            this.DiscountStrata5ValidDateTo(undefined);
            this.DiscountStrata5StatusID(undefined);
            this.DiscountStrata5StatusName(undefined);

            this.Parent(undefined);
            this.ChildStrata1(undefined);
            this.ChildStrata2(undefined);
            this.ChildStrata3(undefined);
            this.ChildStrata4(undefined);
            this.ChildStrata5(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 14 Apr 2016 10:06:07
// Description   : vDiscountStrataViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vDiscountStrataViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.DiscountStrata = ko.observable();
        this.ValidDateFrom = ko.observable();
        this.ValidDateTo = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vDiscountStrataViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                DiscountStrata: this.DiscountStrata(),
                ValidDateFrom: this.ValidDateFrom(),
                ValidDateTo: this.ValidDateTo(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.DiscountStrata(data.DiscountStrata);
                this.ValidDateFrom(data.ValidDateFrom);
                this.ValidDateTo(data.ValidDateTo);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vDiscountStrataDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.DiscountStrata(undefined);
            this.ValidDateFrom(undefined);
            this.ValidDateTo(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 14 Apr 2016 10:06:29
// Description   : vDiscountStrataDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vDiscountStrataDetailsViewModel = function (data) {
        this.ID = ko.observable();
        this.StrataID = ko.observable();
        this.Minimum = ko.observable();
        this.Maximum = ko.observable();
        this.DiscountPercentage = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vDiscountStrataDetailsViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                StrataID: this.StrataID(),
                Minimum: this.Minimum(),
                Maximum: this.Maximum(),
                DiscountPercentage: this.DiscountPercentage(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.StrataID(data.StrataID);
                this.Minimum(data.Minimum);
                this.Maximum(data.Maximum);
                this.DiscountPercentage(data.DiscountPercentage);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.StrataID(undefined);
            this.Minimum(undefined);
            this.Maximum(undefined);
            this.DiscountPercentage(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 27 Jul 2016 00:37:24
// Description   : vPermissionObjectViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vPermissionObjectViewModel = function (data) {
        this.ID = ko.observable();
        this.Description = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();

        this.ChildUserRolePermissions = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vPermissionObjectViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Description: this.Description(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),

                ChildUserRolePermissions: ko.toJS(this.ChildUserRolePermissions())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Description(data.Description);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);

                if (data.ChildUserRolePermissions) {
                    for (var i = 0; i < data.ChildUserRolePermissions.length; i++)
                        this.ChildUserRolePermissions.push(new Dismoyo_Ciptoning_Client.vUserRolePermissionViewModel(
                            data.ChildUserRolePermissions[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Description(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);

            this.ChildUserRolePermissions(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 20 Mar 2016 01:39:22
// Description   : vProductViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vProductViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Product = ko.observable();
        this.BrandID = ko.observable();
        this.BrandCode = ko.observable();
        this.BrandName = ko.observable();
        this.Brand = ko.observable();
        this.ShortName = ko.observable();
        this.UOMLID = ko.observable();
        this.UOMLName = ko.observable();
        this.UOMMID = ko.observable();
        this.UOMMName = ko.observable();
        this.UOMSID = ko.observable();
        this.UOMSName = ko.observable();
        this.Weight = ko.observable();
        this.DimensionL = ko.observable();
        this.DimensionW = ko.observable();
        this.DimensionH = ko.observable();
        this.ConversionL = ko.observable();
        this.ConversionM = ko.observable();
        this.ConversionS = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.AdditionalInfo1 = ko.observable();
        this.AdditionalInfo2 = ko.observable();
        this.AdditionalInfo3 = ko.observable();
        this.AdditionalInfo4 = ko.observable();
        this.AdditionalInfo5 = ko.observable();
        this.AdditionalInfo6 = ko.observable();
        this.AdditionalInfo7 = ko.observable();
        this.AdditionalInfo8 = ko.observable();
        this.AdditionalInfo9 = ko.observable();
        this.AdditionalInfo10 = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vProductViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Product: this.Product(),
                BrandID: this.BrandID(),
                BrandCode: this.BrandCode(),
                BrandName: this.BrandName(),
                Brand: this.Brand(),
                ShortName: this.ShortName(),
                UOMLID: this.UOMLID(),
                UOMLName: this.UOMLName(),
                UOMMID: this.UOMMID(),
                UOMMName: this.UOMMName(),
                UOMSID: this.UOMSID(),
                UOMSName: this.UOMSName(),
                Weight: this.Weight(),
                DimensionL: this.DimensionL(),
                DimensionW: this.DimensionW(),
                DimensionH: this.DimensionH(),
                ConversionL: this.ConversionL(),
                ConversionM: this.ConversionM(),
                ConversionS: this.ConversionS(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                AdditionalInfo1: this.AdditionalInfo1(),
                AdditionalInfo2: this.AdditionalInfo2(),
                AdditionalInfo3: this.AdditionalInfo3(),
                AdditionalInfo4: this.AdditionalInfo4(),
                AdditionalInfo5: this.AdditionalInfo5(),
                AdditionalInfo6: this.AdditionalInfo6(),
                AdditionalInfo7: this.AdditionalInfo7(),
                AdditionalInfo8: this.AdditionalInfo8(),
                AdditionalInfo9: this.AdditionalInfo9(),
                AdditionalInfo10: this.AdditionalInfo10(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Product(data.Product);
                this.BrandID(data.BrandID);
                this.BrandCode(data.BrandCode);
                this.BrandName(data.BrandName);
                this.Brand(data.Brand);
                this.ShortName(data.ShortName);
                this.UOMLID(data.UOMLID);
                this.UOMLName(data.UOMLName);
                this.UOMMID(data.UOMMID);
                this.UOMMName(data.UOMMName);
                this.UOMSID(data.UOMSID);
                this.UOMSName(data.UOMSName);
                this.Weight(data.Weight);
                this.DimensionL(data.DimensionL);
                this.DimensionW(data.DimensionW);
                this.DimensionH(data.DimensionH);
                this.ConversionL(data.ConversionL);
                this.ConversionM(data.ConversionM);
                this.ConversionS(data.ConversionS);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.AdditionalInfo1(data.AdditionalInfo1);
                this.AdditionalInfo2(data.AdditionalInfo2);
                this.AdditionalInfo3(data.AdditionalInfo3);
                this.AdditionalInfo4(data.AdditionalInfo4);
                this.AdditionalInfo5(data.AdditionalInfo5);
                this.AdditionalInfo6(data.AdditionalInfo6);
                this.AdditionalInfo7(data.AdditionalInfo7);
                this.AdditionalInfo8(data.AdditionalInfo8);
                this.AdditionalInfo9(data.AdditionalInfo9);
                this.AdditionalInfo10(data.AdditionalInfo10);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Product(undefined);
            this.BrandID(undefined);
            this.BrandCode(undefined);
            this.BrandName(undefined);
            this.Brand(undefined);
            this.ShortName(undefined);
            this.UOMLID(undefined);
            this.UOMLName(undefined);
            this.UOMMID(undefined);
            this.UOMMName(undefined);
            this.UOMSID(undefined);
            this.UOMSName(undefined);
            this.Weight(undefined);
            this.DimensionL(undefined);
            this.DimensionW(undefined);
            this.DimensionH(undefined);
            this.ConversionL(undefined);
            this.ConversionM(undefined);
            this.ConversionS(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.AdditionalInfo1(undefined);
            this.AdditionalInfo2(undefined);
            this.AdditionalInfo3(undefined);
            this.AdditionalInfo4(undefined);
            this.AdditionalInfo5(undefined);
            this.AdditionalInfo6(undefined);
            this.AdditionalInfo7(undefined);
            this.AdditionalInfo8(undefined);
            this.AdditionalInfo9(undefined);
            this.AdditionalInfo10(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 18 Mar 2016 10:48:05
// Description   : vProductBrandViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vProductBrandViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Brand = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.ChildProducts = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vProductBrandViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Brand: this.Brand(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                ChildProducts: ko.toJS(this.ChildProducts())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Brand(data.Brand);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.ChildProducts) {
                    for (var i = 0; i < data.ChildProducts.length; i++)
                        this.ChildProducts.push(new Dismoyo_Ciptoning_Client.vProductViewModel(
                            data.ChildProducts[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Brand(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.ChildProducts(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 13:37:23
// Description   : vProductLotViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vProductLotViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ExpiredDate = ko.observable();
        this.ProductLot = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.SAPCode = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vProductLotViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ExpiredDate: this.ExpiredDate(),
                ProductLot: this.ProductLot(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                SAPCode: this.SAPCode(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ExpiredDate(data.ExpiredDate);
                this.ProductLot(data.ProductLot);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.SAPCode(data.SAPCode);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOM(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ExpiredDate(undefined);
            this.ProductLot(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.SAPCode(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 10 Apr 2016 02:48:51
// Description   : vProductPriceViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vProductPriceViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ValidDateFrom = ko.observable();
        this.ValidDateTo = ko.observable();
        this.PriceGroupID = ko.observable();
        this.PriceGroupName = ko.observable();
        this.GrossPrice = ko.observable();
        this.TaxPercentage = ko.observable();
        this.Price = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vProductPriceViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ValidDateFrom: this.ValidDateFrom(),
                ValidDateTo: this.ValidDateTo(),
                PriceGroupID: this.PriceGroupID(),
                PriceGroupName: this.PriceGroupName(),
                GrossPrice: this.GrossPrice(),
                TaxPercentage: this.TaxPercentage(),
                Price: this.Price(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ValidDateFrom(data.ValidDateFrom);
                this.ValidDateTo(data.ValidDateTo);
                this.PriceGroupID(data.PriceGroupID);
                this.PriceGroupName(data.PriceGroupName);
                this.GrossPrice(data.GrossPrice);
                this.TaxPercentage(data.TaxPercentage);
                this.Price(data.Price);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ValidDateFrom(undefined);
            this.ValidDateTo(undefined);
            this.PriceGroupID(undefined);
            this.PriceGroupName(undefined);
            this.GrossPrice(undefined);
            this.TaxPercentage(undefined);
            this.Price(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 19 Feb 2016 05:09:41
// Description   : vRegionViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vRegionViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vRegionViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 27 Jul 2016 00:36:09
// Description   : vRoleViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vRoleViewModel = function (data) {
        this.ID = ko.observable();
        this.Name = ko.observable();
        this.Description = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.ChildUserRoles = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vRoleViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Name: this.Name(),
                Description: this.Description(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                ChildUserRoles: ko.toJS(this.ChildUserRoles())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Name(data.Name);
                this.Description(data.Description);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.ChildUserRoles) {
                    for (var i = 0; i < data.ChildUserRoles.length; i++)
                        this.ChildUserRoles.push(new Dismoyo_Ciptoning_Client.vUserRoleViewModel(
                            data.ChildUserRoles[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Name(undefined);
            this.Description(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.ChildUserRoles(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 26 Jul 2016 07:22:58
// Description   : vRoutePlanViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vRoutePlanViewModel = function (data) {
        this.CustomerID = ko.observable();
        this.SalesmanID = ko.observable();
        this.WeekID = ko.observable();
        this.DayID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.CustomerAddress1 = ko.observable();
        this.CustomerAddress2 = ko.observable();
        this.CustomerAddress3 = ko.observable();
        this.CustomerAddress = ko.observable();
        this.WeekName = ko.observable();
        this.DayName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.OrderBySalesmanID = ko.observable();
        this.SortIndex = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vRoutePlanViewModel.prototype, {
        toJS: function () {
            return {
                CustomerID: this.CustomerID(),
                SalesmanID: this.SalesmanID(),
                WeekID: this.WeekID(),
                DayID: this.DayID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                CustomerAddress1: this.CustomerAddress1(),
                CustomerAddress2: this.CustomerAddress2(),
                CustomerAddress3: this.CustomerAddress3(),
                CustomerAddress: this.CustomerAddress(),
                WeekName: this.WeekName(),
                DayName: this.DayName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                OrderBySalesmanID: this.OrderBySalesmanID(),
                SortIndex: this.SortIndex()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.CustomerID(data.CustomerID);
                this.SalesmanID(data.SalesmanID);
                this.WeekID(data.WeekID);
                this.DayID(data.DayID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.CustomerAddress1(data.CustomerAddress1);
                this.CustomerAddress2(data.CustomerAddress2);
                this.CustomerAddress3(data.CustomerAddress3);
                this.CustomerAddress(data.CustomerAddress);
                this.WeekName(data.WeekName);
                this.DayName(data.DayName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.OrderBySalesmanID(data.OrderBySalesmanID);
                this.SortIndex(data.SortIndex);
            }
        },

        clear: function () {
            this.CustomerID(undefined);
            this.SalesmanID(undefined);
            this.WeekID(undefined);
            this.DayID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.CustomerAddress1(undefined);
            this.CustomerAddress2(undefined);
            this.CustomerAddress3(undefined);
            this.CustomerAddress(undefined);
            this.WeekName(undefined);
            this.DayName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.OrderBySalesmanID(undefined);
            this.SortIndex(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 25 Jul 2016 11:18:16
// Description   : vRoutePlanCustomerViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vRoutePlanCustomerViewModel = function (data) {
        this.CustomerID = ko.observable();
        this.SalesmanID = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.CustomerAddress1 = ko.observable();
        this.CustomerAddress2 = ko.observable();
        this.CustomerAddress3 = ko.observable();
        this.CustomerAddress = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.OddWeek1 = ko.observable();
        this.OddWeek2 = ko.observable();
        this.OddWeek3 = ko.observable();
        this.OddWeek4 = ko.observable();
        this.OddWeek5 = ko.observable();
        this.OddWeek6 = ko.observable();
        this.OddWeek7 = ko.observable();
        this.EvenWeek1 = ko.observable();
        this.EvenWeek2 = ko.observable();
        this.EvenWeek3 = ko.observable();
        this.EvenWeek4 = ko.observable();
        this.EvenWeek5 = ko.observable();
        this.EvenWeek6 = ko.observable();
        this.EvenWeek7 = ko.observable();
        this.OrderBySalesmanID = ko.observable();
        this.SortIndex = ko.observable();
        this.FilterByKeywords = ko.observable();
        
        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vRoutePlanCustomerViewModel.prototype, {
        toJS: function () {
            return {
                CustomerID: this.CustomerID(),
                SalesmanID: this.SalesmanID(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                CustomerAddress1: this.CustomerAddress1(),
                CustomerAddress2: this.CustomerAddress2(),
                CustomerAddress3: this.CustomerAddress3(),
                CustomerAddress: this.CustomerAddress(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                OddWeek1: this.OddWeek1(),
                OddWeek2: this.OddWeek2(),
                OddWeek3: this.OddWeek3(),
                OddWeek4: this.OddWeek4(),
                OddWeek5: this.OddWeek5(),
                OddWeek6: this.OddWeek6(),
                OddWeek7: this.OddWeek7(),
                EvenWeek1: this.EvenWeek1(),
                EvenWeek2: this.EvenWeek2(),
                EvenWeek3: this.EvenWeek3(),
                EvenWeek4: this.EvenWeek4(),
                EvenWeek5: this.EvenWeek5(),
                EvenWeek6: this.EvenWeek6(),
                EvenWeek7: this.EvenWeek7(),
                OrderBySalesmanID: this.OrderBySalesmanID(),
                SortIndex: this.SortIndex(),
                FilterByKeywords: this.FilterByKeywords()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.CustomerID(data.CustomerID);
                this.SalesmanID(data.SalesmanID);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.CustomerAddress1(data.CustomerAddress1);
                this.CustomerAddress2(data.CustomerAddress2);
                this.CustomerAddress3(data.CustomerAddress3);
                this.CustomerAddress(data.CustomerAddress);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.OddWeek1(data.OddWeek1);
                this.OddWeek2(data.OddWeek2);
                this.OddWeek3(data.OddWeek3);
                this.OddWeek4(data.OddWeek4);
                this.OddWeek5(data.OddWeek5);
                this.OddWeek6(data.OddWeek6);
                this.OddWeek7(data.OddWeek7);
                this.EvenWeek1(data.EvenWeek1);
                this.EvenWeek2(data.EvenWeek2);
                this.EvenWeek3(data.EvenWeek3);
                this.EvenWeek4(data.EvenWeek4);
                this.EvenWeek5(data.EvenWeek5);
                this.EvenWeek6(data.EvenWeek6);
                this.EvenWeek7(data.EvenWeek7);
                this.OrderBySalesmanID(data.OrderBySalesmanID);
                this.SortIndex(data.SortIndex);
                this.FilterByKeywords(data.FilterByKeywords);
            }
        },

        clear: function () {
            this.CustomerID(undefined);
            this.SalesmanID(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.CustomerAddress1(undefined);
            this.CustomerAddress2(undefined);
            this.CustomerAddress3(undefined);
            this.CustomerAddress(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.OddWeek1(undefined);
            this.OddWeek2(undefined);
            this.OddWeek3(undefined);
            this.OddWeek4(undefined);
            this.OddWeek5(undefined);
            this.OddWeek6(undefined);
            this.OddWeek7(undefined);
            this.EvenWeek1(undefined);
            this.EvenWeek2(undefined);
            this.EvenWeek3(undefined);
            this.EvenWeek4(undefined);
            this.EvenWeek5(undefined);
            this.EvenWeek6(undefined);
            this.EvenWeek7(undefined);
            this.OrderBySalesmanID(undefined);
            this.SortIndex(undefined);
            this.FilterByKeywords(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 25 Jul 2016 07:22:27
// Description   : vRoutePlanSalesmanViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vRoutePlanSalesmanViewModel = function (data) {
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.OddWeek1 = ko.observable();
        this.OddWeek2 = ko.observable();
        this.OddWeek3 = ko.observable();
        this.OddWeek4 = ko.observable();
        this.OddWeek5 = ko.observable();
        this.OddWeek6 = ko.observable();
        this.OddWeek7 = ko.observable();
        this.EvenWeek1 = ko.observable();
        this.EvenWeek2 = ko.observable();
        this.EvenWeek3 = ko.observable();
        this.EvenWeek4 = ko.observable();
        this.EvenWeek5 = ko.observable();
        this.EvenWeek6 = ko.observable();
        this.EvenWeek7 = ko.observable();
        this.CustomerID = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vRoutePlanSalesmanViewModel.prototype, {
        toJS: function () {
            return {
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                OddWeek1: this.OddWeek1(),
                OddWeek2: this.OddWeek2(),
                OddWeek3: this.OddWeek3(),
                OddWeek4: this.OddWeek4(),
                OddWeek5: this.OddWeek5(),
                OddWeek6: this.OddWeek6(),
                OddWeek7: this.OddWeek7(),
                EvenWeek1: this.EvenWeek1(),
                EvenWeek2: this.EvenWeek2(),
                EvenWeek3: this.EvenWeek3(),
                EvenWeek4: this.EvenWeek4(),
                EvenWeek5: this.EvenWeek5(),
                EvenWeek6: this.EvenWeek6(),
                EvenWeek7: this.EvenWeek7(),
                CustomerID: this.CustomerID(),
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.OddWeek1(data.OddWeek1);
                this.OddWeek2(data.OddWeek2);
                this.OddWeek3(data.OddWeek3);
                this.OddWeek4(data.OddWeek4);
                this.OddWeek5(data.OddWeek5);
                this.OddWeek6(data.OddWeek6);
                this.OddWeek7(data.OddWeek7);
                this.EvenWeek1(data.EvenWeek1);
                this.EvenWeek2(data.EvenWeek2);
                this.EvenWeek3(data.EvenWeek3);
                this.EvenWeek4(data.EvenWeek4);
                this.EvenWeek5(data.EvenWeek5);
                this.EvenWeek6(data.EvenWeek6);
                this.EvenWeek7(data.EvenWeek7);
                this.CustomerID(data.CustomerID);
            }
        },

        clear: function () {
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.OddWeek1(undefined);
            this.OddWeek2(undefined);
            this.OddWeek3(undefined);
            this.OddWeek4(undefined);
            this.OddWeek5(undefined);
            this.OddWeek6(undefined);
            this.OddWeek7(undefined);
            this.EvenWeek1(undefined);
            this.EvenWeek2(undefined);
            this.EvenWeek3(undefined);
            this.EvenWeek4(undefined);
            this.EvenWeek5(undefined);
            this.EvenWeek6(undefined);
            this.EvenWeek7(undefined);
            this.CustomerID(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 12 Apr 2016 21:28:41
// Description   : vSalesmanViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesmanViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.GroupID = ko.observable();
        this.GroupName = ko.observable();
        this.CategoryID = ko.observable();
        this.CategoryName = ko.observable();
        this.Phone = ko.observable();
        this.SFAFlag = ko.observable();
        this.SFA = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.ChildProducts = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesmanViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                GroupID: this.GroupID(),
                GroupName: this.GroupName(),
                CategoryID: this.CategoryID(),
                CategoryName: this.CategoryName(),
                Phone: this.Phone(),
                SFAFlag: this.SFAFlag(),
                SFA: this.SFA(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                ChildProducts: ko.toJS(this.ChildProducts())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.GroupID(data.GroupID);
                this.GroupName(data.GroupName);
                this.CategoryID(data.CategoryID);
                this.CategoryName(data.CategoryName);
                this.Phone(data.Phone);
                this.SFAFlag(data.SFAFlag);
                this.SFA(data.SFA);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.ChildProducts) {
                    for (var i = 0; i < data.ChildProducts.length; i++)
                        this.ChildProducts.push(new Dismoyo_Ciptoning_Client.vSalesmanProductViewModel(
                            data.ChildProducts[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.GroupID(undefined);
            this.GroupName(undefined);
            this.CategoryID(undefined);
            this.CategoryName(undefined);
            this.Phone(undefined);
            this.SFAFlag(undefined);
            this.SFA(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.ChildProducts(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 20 Jan 2017 14:46:37
// Description   : vSalesmanActivityReportViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesmanActivityReportViewModel = function (data) {
        this.CustomerID = ko.observable();
        this.CallDate = ko.observable();
        this.CheckInDate = ko.observable();
        this.CheckOutDate = ko.observable();
        this.CustomerType = ko.observable();
        this.Customer = ko.observable();
        this.SalesmanID = ko.observable();
        this.Salesman = ko.observable();
        this.Latitude = ko.observable();
        this.Longitude = ko.observable();
        this.RouteTypeID = ko.observable();
        this.RouteTypeName = ko.observable();
        this.Activity = ko.observable();
        this.DocumentCode = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesmanActivityReportViewModel.prototype, {
        toJS: function () {
            return {
                CustomerID: this.CustomerID(),
                CallDate: this.CallDate(),
                CheckInDate: this.CheckInDate(),
                CheckOutDate: this.CheckOutDate(),
                CustomerType: this.CustomerType(),
                Customer: this.Customer(),
                SalesmanID: this.SalesmanID(),
                Salesman: this.Salesman(),
                Latitude: this.Latitude(),
                Longitude: this.Longitude(),
                RouteTypeID: this.RouteTypeID(),
                RouteTypeName: this.RouteTypeName(),
                Activity: this.Activity(),
                DocumentCode: this.DocumentCode()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.CustomerID(data.CustomerID);
                this.CallDate(data.CallDate);
                this.CheckInDate(data.CheckInDate);
                this.CheckOutDate(data.CheckOutDate);
                this.CustomerType(data.CustomerType);
                this.Customer(data.Customer);
                this.SalesmanID(data.SalesmanID);
                this.Salesman(data.Salesman);
                this.Latitude(data.Latitude);
                this.Longitude(data.Longitude);
                this.RouteTypeID(data.RouteTypeID);
                this.RouteTypeName(data.RouteTypeName);
                this.Activity(data.Activity);
                this.DocumentCode(data.DocumentCode);
            }
        },

        clear: function () {
            this.CustomerID(undefined);
            this.CallDate(undefined);
            this.CheckInDate(undefined);
            this.CheckOutDate(undefined);
            this.CustomerType(undefined);
            this.Customer(undefined);
            this.SalesmanID(undefined);
            this.Salesman(undefined);
            this.Latitude(undefined);
            this.Longitude(undefined);
            this.RouteTypeID(undefined);
            this.RouteTypeName(undefined);
            this.Activity(undefined);
            this.DocumentCode(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 13:37:23
// Description   : vSalesmanProductViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesmanProductViewModel = function (data) {
        this.SalesmanID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        
        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesmanProductViewModel.prototype, {
        toJS: function () {
            return {
                SalesmanID: this.SalesmanID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SalesmanID(data.SalesmanID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.SalesmanID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 06 Nov 2016 22:09:51
// Description   : vSalesmanProductTargetViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesmanProductTargetViewModel = function (data) {
        this.SalesmanID = ko.observable();
        this.PeriodID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.SalesOrderQty = ko.observable();
        this.EffectiveCall = ko.observable();
        this.CustomerTransaction = ko.observable();

        this.EffectiveCallValue = ko.observable();
        this.CustomerTransactionValue = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesmanProductTargetViewModel.prototype, {
        toJS: function () {
            return {
                SalesmanID: this.SalesmanID(),
                PeriodID: this.PeriodID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                SalesOrderQty: this.SalesOrderQty(),
                EffectiveCall: this.EffectiveCall(),
                CustomerTransaction: this.CustomerTransaction(),

                EffectiveCallValue: this.EffectiveCallValue(),
                CustomerTransactionValue: this.CustomerTransactionValue(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SalesmanID(data.SalesmanID);
                this.PeriodID(data.PeriodID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.SalesOrderQty(data.SalesOrderQty);
                this.EffectiveCall(data.EffectiveCall);
                this.CustomerTransaction(data.CustomerTransaction);

                this.EffectiveCallValue(data.EffectiveCallValue);
                this.CustomerTransactionValue(data.CustomerTransactionValue);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.SalesmanID(undefined);
            this.PeriodID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.SalesOrderQty(undefined);
            this.EffectiveCall(undefined);
            this.CustomerTransaction(undefined);

            this.EffectiveCallValue(undefined);
            this.CustomerTransactionValue(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 04 Nov 2016 15:53:24
// Description   : vSalesmanTargetViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesmanTargetViewModel = function (data) {
        this.SalesmanID = ko.observable();
        this.PeriodID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.SalesmanGroupID = ko.observable();
        this.SalesmanGroupName = ko.observable();
        this.SalesmanCategoryID = ko.observable();
        this.SalesmanCategoryName = ko.observable();
        this.SalesmanPhoneID = ko.observable();
        this.SalesmanSFA = ko.observable();
        this.SalesmanStatusID = ko.observable();
        this.SalesmanStatusName = ko.observable();
        this.IsSalesmanDeleted = ko.observable();
        this.SalesOrderAmount = ko.observable();
        this.NewCustomer = ko.observable();
        this.Visibility = ko.observable();        
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildProductTargets = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesmanTargetViewModel.prototype, {
        toJS: function () {
            return {
                SalesmanID: this.SalesmanID(),
                PeriodID: this.PeriodID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                SalesmanGroupID: this.SalesmanGroupID(),
                SalesmanGroupName: this.SalesmanGroupName(),
                SalesmanCategoryID: this.SalesmanCategoryID(),
                SalesmanCategoryName: this.SalesmanCategoryName(),
                SalesmanPhoneID: this.SalesmanPhoneID(),
                SalesmanSFA: this.SalesmanSFA(),
                SalesmanStatusID: this.SalesmanStatusID(),
                SalesmanStatusName: this.SalesmanStatusName(),
                IsSalesmanDeleted: this.IsSalesmanDeleted(),
                SalesOrderAmount: this.SalesOrderAmount(),
                NewCustomer: this.NewCustomer(),
                Visibility: this.Visibility(),                
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildProductTargets: ko.toJS(this.ChildProductTargets())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SalesmanID(data.SalesmanID);
                this.PeriodID(data.PeriodID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.SalesmanGroupID(data.SalesmanGroupID);
                this.SalesmanGroupName(data.SalesmanGroupName);
                this.SalesmanCategoryID(data.SalesmanCategoryID);
                this.SalesmanCategoryName(data.SalesmanCategoryName);
                this.SalesmanPhoneID(data.SalesmanPhoneID);
                this.SalesmanSFA(data.SalesmanSFA);
                this.SalesmanStatusID(data.SalesmanStatusID);
                this.SalesmanStatusName(data.SalesmanStatusName);
                this.IsSalesmanDeleted(data.IsSalesmanDeleted);
                this.SalesOrderAmount(data.SalesOrderAmount);
                this.NewCustomer(data.NewCustomer);
                this.Visibility(data.Visibility);                
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildProductTargets) {
                    for (var i = 0; i < data.ChildProductTargets.length; i++)
                        this.ChildProductTargets.push(new Dismoyo_Ciptoning_Client.vSalesmanProductTargetViewModel(
                            data.ChildProductTargets[i]));
                }
            }
        },

        clear: function () {
            this.SalesmanID(undefined);
            this.PeriodID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.SalesmanGroupID(undefined);
            this.SalesmanGroupName(undefined);
            this.SalesmanCategoryID(undefined);
            this.SalesmanCategoryName(undefined);
            this.SalesmanPhoneID(undefined);
            this.SalesmanSFA(undefined);
            this.SalesmanStatusID(undefined);
            this.SalesmanStatusName(undefined);
            this.IsSalesmanDeleted(undefined);
            this.SalesOrderAmount(udefined);
            this.NewCustomer(undefined);
            this.Visibility(undefined);            
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildProductTargets(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:09:45
// Description   : vSalesOrderViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.PODocumentID = ko.observable();
        this.PODocumentCode = ko.observable();
        this.POTransactionDate = ko.observable();
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.CustomerID = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.PriceGroupID = ko.observable();
        this.PriceGroupName = ko.observable();
        this.DiscountGroupID = ko.observable();
        this.DiscountGroupCode = ko.observable();
        this.DiscountGroupName = ko.observable();
        this.DiscountGroup = ko.observable();
        this.DiscountGroupDescription = ko.observable();
        this.TermOfPaymentID = ko.observable();
        this.TermOfPaymentName = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.DODocumentID = ko.observable();
        this.DODocumentCode = ko.observable();
        this.DOShipmentDate = ko.observable();
        this.DOReceivedDate = ko.observable();
        this.DOPrintedCount = ko.observable();
        this.DOLastPrintedDate = ko.observable();
        this.InvoiceDocumentID = ko.observable();
        this.InvoiceDocumentCode = ko.observable();
        this.RawTotalGrossPrice = ko.observable();
        this.RawTotalPrice = ko.observable();
        this.RawTotalDiscountStrata1Amount = ko.observable();
        this.RawTotalDiscountStrata2Amount = ko.observable();
        this.RawTotalDiscountStrata3Amount = ko.observable();
        this.RawTotalDiscountStrata4Amount = ko.observable();
        this.RawTotalDiscountStrata5Amount = ko.observable();
        this.RawTotalAddDiscountStrataAmount = ko.observable();
        this.RawTotalGross = ko.observable();
        this.RawTotalTax = ko.observable();
        this.RawTotal = ko.observable();
        this.TotalGrossPrice = ko.observable();
        this.TotalPrice = ko.observable();
        this.TotalDiscountStrata1Amount = ko.observable();
        this.TotalDiscountStrata2Amount = ko.observable();
        this.TotalDiscountStrata3Amount = ko.observable();
        this.TotalDiscountStrata4Amount = ko.observable();
        this.TotalDiscountStrata5Amount = ko.observable();
        this.TotalAddDiscountStrataAmount = ko.observable();
        this.TotalGross = ko.observable();
        this.TotalTax = ko.observable();
        this.Total = ko.observable();
        this.TotalWeight = ko.observable();
        this.TotalDimension = ko.observable();
        this.AddDiscountStrataReason = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.DocumentStatusReason = ko.observable();
        this.SFAInvoiceDocumentCode = ko.observable();
        this.PrintCount = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                PODocumentID: this.PODocumentID(),
                PODocumentCode: this.PODocumentCode(),
                POTransactionDate: this.POTransactionDate(),
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                CustomerID: this.CustomerID(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                PriceGroupID: this.PriceGroupID(),
                PriceGroupName: this.PriceGroupName(),
                DiscountGroupID: this.DiscountGroupID(),
                DiscountGroupCode: this.DiscountGroupCode(),
                DiscountGroupName: this.DiscountGroupName(),
                DiscountGroup: this.DiscountGroup(),
                DiscountGroupDescription: this.DiscountGroupDescription(),
                TermOfPaymentID: this.TermOfPaymentID(),
                TermOfPaymentName: this.TermOfPaymentName(),
                ReferenceNumber: this.ReferenceNumber(),
                DODocumentID: this.DODocumentID(),
                DODocumentCode: this.DODocumentCode(),
                DOShipmentDate: this.DOShipmentDate(),
                DOReceivedDate: this.DOReceivedDate(),
                DOPrintedCount: this.DOPrintedCount(),
                DOLastPrintedDate: this.DOLastPrintedDate(),
                InvoiceDocumentID: this.InvoiceDocumentID(),
                InvoiceDocumentCode: this.InvoiceDocumentCode(),
                RawTotalGrossPrice: this.RawTotalGrossPrice(),
                RawTotalPrice: this.RawTotalPrice(),
                RawTotalDiscountStrata1Amount: this.RawTotalDiscountStrata1Amount(),
                RawTotalDiscountStrata2Amount: this.RawTotalDiscountStrata2Amount(),
                RawTotalDiscountStrata3Amount: this.RawTotalDiscountStrata3Amount(),
                RawTotalDiscountStrata4Amount: this.RawTotalDiscountStrata4Amount(),
                RawTotalDiscountStrata5Amount: this.RawTotalDiscountStrata5Amount(),
                RawTotalAddDiscountStrataAmount: this.RawTotalAddDiscountStrataAmount(),
                RawTotalGross: this.RawTotalGross(),
                RawTotalTax: this.RawTotalTax(),
                RawTotal: this.RawTotal(),
                TotalGrossPrice: this.TotalGrossPrice(),
                TotalPrice: this.TotalPrice(),
                TotalDiscountStrata1Amount: this.TotalDiscountStrata1Amount(),
                TotalDiscountStrata2Amount: this.TotalDiscountStrata2Amount(),
                TotalDiscountStrata3Amount: this.TotalDiscountStrata3Amount(),
                TotalDiscountStrata4Amount: this.TotalDiscountStrata4Amount(),
                TotalDiscountStrata5Amount: this.TotalDiscountStrata5Amount(),
                TotalAddDiscountStrataAmount: this.TotalAddDiscountStrataAmount(),
                TotalGross: this.TotalGross(),
                TotalTax: this.TotalTax(),
                Total: this.Total(),
                TotalWeight: this.TotalWeight(),
                TotalDimension: this.TotalDimension(),
                AddDiscountStrataReason: this.AddDiscountStrataReason(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                DocumentStatusReason: this.DocumentStatusReason(),
                SFAInvoiceDocumentCode: this.SFAInvoiceDocumentCode(),
                PrintCount: this.PrintCount(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.PODocumentID(data.PODocumentID);
                this.PODocumentCode(data.PODocumentCode);
                this.POTransactionDate(data.POTransactionDate);
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.CustomerID(data.CustomerID);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.PriceGroupID(data.PriceGroupID);
                this.PriceGroupName(data.PriceGroupName);
                this.DiscountGroupID(data.DiscountGroupID);
                this.DiscountGroupCode(data.DiscountGroupCode);
                this.DiscountGroupName(data.DiscountGroupName);
                this.DiscountGroup(data.DiscountGroup);
                this.DiscountGroupDescription(data.DiscountGroupDescription);
                this.TermOfPaymentID(data.TermOfPaymentID);
                this.TermOfPaymentName(data.TermOfPaymentName);
                this.ReferenceNumber(data.ReferenceNumber);
                this.DODocumentID(data.DODocumentID);
                this.DODocumentCode(data.DODocumentCode);
                this.DOShipmentDate(data.DOShipmentDate);
                this.DOReceivedDate(data.DOReceivedDate);
                this.DOPrintedCount(data.DOPrintedCount);
                this.DOLastPrintedDate(data.DOLastPrintedDate);
                this.InvoiceDocumentID(data.InvoiceDocumentID);
                this.InvoiceDocumentCode(data.InvoiceDocumentCode);
                this.RawTotalGrossPrice(data.RawTotalGrossPrice);
                this.RawTotalPrice(data.RawTotalPrice);
                this.RawTotalDiscountStrata1Amount(data.RawTotalDiscountStrata1Amount);
                this.RawTotalDiscountStrata2Amount(data.RawTotalDiscountStrata2Amount);
                this.RawTotalDiscountStrata3Amount(data.RawTotalDiscountStrata3Amount);
                this.RawTotalDiscountStrata4Amount(data.RawTotalDiscountStrata4Amount);
                this.RawTotalDiscountStrata5Amount(data.RawTotalDiscountStrata5Amount);
                this.RawTotalAddDiscountStrataAmount(data.RawTotalAddDiscountStrataAmount);
                this.RawTotalGross(data.RawTotalGross);
                this.RawTotalTax(data.RawTotalTax);
                this.RawTotal(data.RawTotal);
                this.TotalGrossPrice(data.TotalGrossPrice);
                this.TotalPrice(data.TotalPrice);
                this.TotalDiscountStrata1Amount(data.TotalDiscountStrata1Amount);
                this.TotalDiscountStrata2Amount(data.TotalDiscountStrata2Amount);
                this.TotalDiscountStrata3Amount(data.TotalDiscountStrata3Amount);
                this.TotalDiscountStrata4Amount(data.TotalDiscountStrata4Amount);
                this.TotalDiscountStrata5Amount(data.TotalDiscountStrata5Amount);
                this.TotalAddDiscountStrataAmount(data.TotalAddDiscountStrataAmount);
                this.TotalGross(data.TotalGross);
                this.TotalTax(data.TotalTax);
                this.Total(data.Total);
                this.TotalWeight(data.TotalWeight);
                this.TotalDimension(data.TotalDimension);
                this.AddDiscountStrataReason(data.AddDiscountStrataReason);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.DocumentStatusReason(data.DocumentStatusReason);
                this.SFAInvoiceDocumentCode(data.SFAInvoiceDocumentCode);
                this.PrintCount(data.PrintCount);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.PODocumentID(undefined);
            this.PODocumentCode(undefined);
            this.POTransactionDate(undefined);
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.CustomerID(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.PriceGroupID(undefined);
            this.PriceGroupName(undefined);
            this.DiscountGroupID(undefined);
            this.DiscountGroupCode(undefined);
            this.DiscountGroupName(undefined);
            this.DiscountGroup(undefined);
            this.DiscountGroupDescription(undefined);
            this.TermOfPaymentID(undefined);
            this.TermOfPaymentName(undefined);
            this.ReferenceNumber(undefined);
            this.DODocumentID(undefined);
            this.DODocumentCode(undefined);
            this.DOShipmentDate(undefined);
            this.DOReceivedDate(undefined);
            this.DOPrintedCount(undefined);
            this.DOLastPrintedDate(undefined);
            this.InvoiceDocumentID(undefined);
            this.InvoiceDocumentCode(undefined);
            this.RawTotalGrossPrice(undefined);
            this.RawTotalPrice(undefined);
            this.RawTotalDiscountStrata1Amount(undefined);
            this.RawTotalDiscountStrata2Amount(undefined);
            this.RawTotalDiscountStrata3Amount(undefined);
            this.RawTotalDiscountStrata4Amount(undefined);
            this.RawTotalDiscountStrata5Amount(undefined);
            this.RawTotalAddDiscountStrataAmount(undefined);
            this.RawTotalGross(undefined);
            this.RawTotalTax(undefined);
            this.RawTotal(undefined);
            this.TotalGrossPrice(undefined);
            this.TotalPrice(undefined);
            this.TotalDiscountStrata1Amount(undefined);
            this.TotalDiscountStrata2Amount(undefined);
            this.TotalDiscountStrata3Amount(undefined);
            this.TotalDiscountStrata4Amount(undefined);
            this.TotalDiscountStrata5Amount(undefined);
            this.TotalAddDiscountStrataAmount(undefined);
            this.TotalGross(undefined);
            this.TotalTax(undefined);
            this.Total(undefined);
            this.TotalWeight(undefined);
            this.TotalDimension(undefined);
            this.AddDiscountStrataReason(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.DocumentStatusReason(undefined);
            this.SFAInvoiceDocumentCode(undefined);
            this.PrintCount(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 17 Apr 2016 21:23:25
// Description   : vSalesOrderDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:16:27
// Description   : vSalesOrderFOCViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderFOCViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.PODocumentID = ko.observable();
        this.PODocumentCode = ko.observable();
        this.POTransactionDate = ko.observable();
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.CustomerID = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.PriceGroupID = ko.observable();
        this.PriceGroupName = ko.observable();
        this.DiscountGroupID = ko.observable();
        this.DiscountGroupCode = ko.observable();
        this.DiscountGroupName = ko.observable();
        this.DiscountGroup = ko.observable();
        this.DiscountGroupDescription = ko.observable();
        this.TermOfPaymentID = ko.observable();
        this.TermOfPaymentName = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.DODocumentID = ko.observable();
        this.DODocumentCode = ko.observable();
        this.DOShipmentDate = ko.observable();
        this.DOReceivedDate = ko.observable();
        this.DOPrintedCount = ko.observable();
        this.DOLastPrintedDate = ko.observable();
        this.InvoiceDocumentID = ko.observable();
        this.InvoiceDocumentCode = ko.observable();
        this.RawTotalGrossPrice = ko.observable();
        this.RawTotalPrice = ko.observable();
        this.RawTotalDiscountStrata1Amount = ko.observable();
        this.RawTotalDiscountStrata2Amount = ko.observable();
        this.RawTotalDiscountStrata3Amount = ko.observable();
        this.RawTotalDiscountStrata4Amount = ko.observable();
        this.RawTotalDiscountStrata5Amount = ko.observable();
        this.RawTotalAddDiscountStrataAmount = ko.observable();
        this.RawTotalGross = ko.observable();
        this.RawTotalTax = ko.observable();
        this.RawTotal = ko.observable();
        this.TotalGrossPrice = ko.observable();
        this.TotalPrice = ko.observable();
        this.TotalDiscountStrata1Amount = ko.observable();
        this.TotalDiscountStrata2Amount = ko.observable();
        this.TotalDiscountStrata3Amount = ko.observable();
        this.TotalDiscountStrata4Amount = ko.observable();
        this.TotalDiscountStrata5Amount = ko.observable();
        this.TotalAddDiscountStrataAmount = ko.observable();
        this.TotalGross = ko.observable();
        this.TotalTax = ko.observable();
        this.Total = ko.observable();
        this.TotalWeight = ko.observable();
        this.TotalDimension = ko.observable();
        this.AddDiscountStrataReason = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.DocumentStatusReason = ko.observable();
        this.SFAInvoiceDocumentCode = ko.observable();
        this.PrintCount = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderFOCViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                PODocumentID: this.PODocumentID(),
                PODocumentCode: this.PODocumentCode(),
                POTransactionDate: this.POTransactionDate(),
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                CustomerID: this.CustomerID(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                PriceGroupID: this.PriceGroupID(),
                PriceGroupName: this.PriceGroupName(),
                DiscountGroupID: this.DiscountGroupID(),
                DiscountGroupCode: this.DiscountGroupCode(),
                DiscountGroupName: this.DiscountGroupName(),
                DiscountGroup: this.DiscountGroup(),
                DiscountGroupDescription: this.DiscountGroupDescription(),
                TermOfPaymentID: this.TermOfPaymentID(),
                TermOfPaymentName: this.TermOfPaymentName(),
                ReferenceNumber: this.ReferenceNumber(),
                DODocumentID: this.DODocumentID(),
                DODocumentCode: this.DODocumentCode(),
                DOShipmentDate: this.DOShipmentDate(),
                DOReceivedDate: this.DOReceivedDate(),
                DOPrintedCount: this.DOPrintedCount(),
                DOLastPrintedDate: this.DOLastPrintedDate(),
                InvoiceDocumentID: this.InvoiceDocumentID(),
                InvoiceDocumentCode: this.InvoiceDocumentCode(),
                RawTotalGrossPrice: this.RawTotalGrossPrice(),
                RawTotalPrice: this.RawTotalPrice(),
                RawTotalDiscountStrata1Amount: this.RawTotalDiscountStrata1Amount(),
                RawTotalDiscountStrata2Amount: this.RawTotalDiscountStrata2Amount(),
                RawTotalDiscountStrata3Amount: this.RawTotalDiscountStrata3Amount(),
                RawTotalDiscountStrata4Amount: this.RawTotalDiscountStrata4Amount(),
                RawTotalDiscountStrata5Amount: this.RawTotalDiscountStrata5Amount(),
                RawTotalAddDiscountStrataAmount: this.RawTotalAddDiscountStrataAmount(),
                RawTotalGross: this.RawTotalGross(),
                RawTotalTax: this.RawTotalTax(),
                RawTotal: this.RawTotal(),
                TotalGrossPrice: this.TotalGrossPrice(),
                TotalPrice: this.TotalPrice(),
                TotalDiscountStrata1Amount: this.TotalDiscountStrata1Amount(),
                TotalDiscountStrata2Amount: this.TotalDiscountStrata2Amount(),
                TotalDiscountStrata3Amount: this.TotalDiscountStrata3Amount(),
                TotalDiscountStrata4Amount: this.TotalDiscountStrata4Amount(),
                TotalDiscountStrata5Amount: this.TotalDiscountStrata5Amount(),
                TotalAddDiscountStrataAmount: this.TotalAddDiscountStrataAmount(),
                TotalGross: this.TotalGross(),
                TotalTax: this.TotalTax(),
                Total: this.Total(),
                TotalWeight: this.TotalWeight(),
                TotalDimension: this.TotalDimension(),
                AddDiscountStrataReason: this.AddDiscountStrataReason(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                DocumentStatusReason: this.DocumentStatusReason(),
                SFAInvoiceDocumentCode: this.SFAInvoiceDocumentCode(),
                PrintCount: this.PrintCount(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.PODocumentID(data.PODocumentID);
                this.PODocumentCode(data.PODocumentCode);
                this.POTransactionDate(data.POTransactionDate);
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.CustomerID(data.CustomerID);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.PriceGroupID(data.PriceGroupID);
                this.PriceGroupName(data.PriceGroupName);
                this.DiscountGroupID(data.DiscountGroupID);
                this.DiscountGroupCode(data.DiscountGroupCode);
                this.DiscountGroupName(data.DiscountGroupName);
                this.DiscountGroup(data.DiscountGroup);
                this.DiscountGroupDescription(data.DiscountGroupDescription);
                this.TermOfPaymentID(data.TermOfPaymentID);
                this.TermOfPaymentName(data.TermOfPaymentName);
                this.ReferenceNumber(data.ReferenceNumber);
                this.DODocumentID(data.DODocumentID);
                this.DODocumentCode(data.DODocumentCode);
                this.DOShipmentDate(data.DOShipmentDate);
                this.DOReceivedDate(data.DOReceivedDate);
                this.DOPrintedCount(data.DOPrintedCount);
                this.DOLastPrintedDate(data.DOLastPrintedDate);
                this.InvoiceDocumentID(data.InvoiceDocumentID);
                this.InvoiceDocumentCode(data.InvoiceDocumentCode);
                this.RawTotalGrossPrice(data.RawTotalGrossPrice);
                this.RawTotalPrice(data.RawTotalPrice);
                this.RawTotalDiscountStrata1Amount(data.RawTotalDiscountStrata1Amount);
                this.RawTotalDiscountStrata2Amount(data.RawTotalDiscountStrata2Amount);
                this.RawTotalDiscountStrata3Amount(data.RawTotalDiscountStrata3Amount);
                this.RawTotalDiscountStrata4Amount(data.RawTotalDiscountStrata4Amount);
                this.RawTotalDiscountStrata5Amount(data.RawTotalDiscountStrata5Amount);
                this.RawTotalAddDiscountStrataAmount(data.RawTotalAddDiscountStrataAmount);
                this.RawTotalGross(data.RawTotalGross);
                this.RawTotalTax(data.RawTotalTax);
                this.RawTotal(data.RawTotal);
                this.TotalGrossPrice(data.TotalGrossPrice);
                this.TotalPrice(data.TotalPrice);
                this.TotalDiscountStrata1Amount(data.TotalDiscountStrata1Amount);
                this.TotalDiscountStrata2Amount(data.TotalDiscountStrata2Amount);
                this.TotalDiscountStrata3Amount(data.TotalDiscountStrata3Amount);
                this.TotalDiscountStrata4Amount(data.TotalDiscountStrata4Amount);
                this.TotalDiscountStrata5Amount(data.TotalDiscountStrata5Amount);
                this.TotalAddDiscountStrataAmount(data.TotalAddDiscountStrataAmount);
                this.TotalGross(data.TotalGross);
                this.TotalTax(data.TotalTax);
                this.Total(data.Total);
                this.TotalWeight(data.TotalWeight);
                this.TotalDimension(data.TotalDimension);
                this.AddDiscountStrataReason(data.AddDiscountStrataReason);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.DocumentStatusReason(data.DocumentStatusReason);
                this.SFAInvoiceDocumentCode(data.SFAInvoiceDocumentCode);
                this.PrintCount(data.PrintCount);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.PODocumentID(undefined);
            this.PODocumentCode(undefined);
            this.POTransactionDate(undefined);
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.CustomerID(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.PriceGroupID(undefined);
            this.PriceGroupName(undefined);
            this.DiscountGroupID(undefined);
            this.DiscountGroupCode(undefined);
            this.DiscountGroupName(undefined);
            this.DiscountGroup(undefined);
            this.DiscountGroupDescription(undefined);
            this.TermOfPaymentID(undefined);
            this.TermOfPaymentName(undefined);
            this.ReferenceNumber(undefined);
            this.DODocumentID(undefined);
            this.DODocumentCode(undefined);
            this.DOShipmentDate(undefined);
            this.DOReceivedDate(undefined);
            this.DOPrintedCount(undefined);
            this.DOLastPrintedDate(undefined);
            this.InvoiceDocumentID(undefined);
            this.InvoiceDocumentCode(undefined);
            this.RawTotalGrossPrice(undefined);
            this.RawTotalPrice(undefined);
            this.RawTotalDiscountStrata1Amount(undefined);
            this.RawTotalDiscountStrata2Amount(undefined);
            this.RawTotalDiscountStrata3Amount(undefined);
            this.RawTotalDiscountStrata4Amount(undefined);
            this.RawTotalDiscountStrata5Amount(undefined);
            this.RawTotalAddDiscountStrataAmount(undefined);
            this.RawTotalGross(undefined);
            this.RawTotalTax(undefined);
            this.RawTotal(undefined);
            this.TotalGrossPrice(undefined);
            this.TotalPrice(undefined);
            this.TotalDiscountStrata1Amount(undefined);
            this.TotalDiscountStrata2Amount(undefined);
            this.TotalDiscountStrata3Amount(undefined);
            this.TotalDiscountStrata4Amount(undefined);
            this.TotalDiscountStrata5Amount(undefined);
            this.TotalAddDiscountStrataAmount(undefined);
            this.TotalGross(undefined);
            this.TotalTax(undefined);
            this.Total(undefined);
            this.TotalWeight(undefined);
            this.TotalDimension(undefined);
            this.AddDiscountStrataReason(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.DocumentStatusReason(undefined);
            this.SFAInvoiceDocumentCode(undefined);
            this.PrintCount(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 05 May 2016 12:44:46
// Description   : vSalesOrderFOCDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:18:44
// Description   : vSalesOrderFOCSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.PriceDate = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();
        this.UnitGrossPrice = ko.observable();
        this.UnitPrice = ko.observable();
        this.DiscountStrata1Percentage = ko.observable();
        this.DiscountStrata2Percentage = ko.observable();
        this.DiscountStrata3Percentage = ko.observable();
        this.DiscountStrata4Percentage = ko.observable();
        this.DiscountStrata5Percentage = ko.observable();
        this.AddDiscountStrataPercentage = ko.observable();
        this.TaxPercentage = ko.observable();
        this.RawSubtotalGrossPrice = ko.observable();
        this.RawSubtotalPrice = ko.observable();
        this.RawSubtotalDiscountStrata1 = ko.observable();
        this.RawDiscountStrata1Amount = ko.observable();
        this.RawSubtotalDiscountStrata2 = ko.observable();
        this.RawDiscountStrata2Amount = ko.observable();
        this.RawSubtotalDiscountStrata3 = ko.observable();
        this.RawDiscountStrata3Amount = ko.observable();
        this.RawSubtotalDiscountStrata4 = ko.observable();
        this.RawDiscountStrata4Amount = ko.observable();
        this.RawSubtotalDiscountStrata5 = ko.observable();
        this.RawDiscountStrata5Amount = ko.observable();
        this.RawAddDiscountStrataAmount = ko.observable();
        this.RawSubtotalGross = ko.observable();
        this.RawSubtotalTax = ko.observable();
        this.RawSubtotal = ko.observable();
        this.SubtotalGrossPrice = ko.observable();
        this.SubtotalPrice = ko.observable();
        this.SubtotalDiscountStrata1 = ko.observable();
        this.DiscountStrata1Amount = ko.observable();
        this.SubtotalDiscountStrata2 = ko.observable();
        this.DiscountStrata2Amount = ko.observable();
        this.SubtotalDiscountStrata3 = ko.observable();
        this.DiscountStrata3Amount = ko.observable();
        this.SubtotalDiscountStrata4 = ko.observable();
        this.DiscountStrata4Amount = ko.observable();
        this.SubtotalDiscountStrata5 = ko.observable();
        this.DiscountStrata5Amount = ko.observable();
        this.AddDiscountStrataAmount = ko.observable();
        this.SubtotalGross = ko.observable();
        this.SubtotalTax = ko.observable();
        this.Subtotal = ko.observable();
        this.SubtotalWeight = ko.observable();
        this.SubtotalDimension = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderFOCSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                PriceDate: this.PriceDate(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),
                UnitGrossPrice: this.UnitGrossPrice(),
                UnitPrice: this.UnitPrice(),
                DiscountStrata1Percentage: this.DiscountStrata1Percentage(),
                DiscountStrata2Percentage: this.DiscountStrata2Percentage(),
                DiscountStrata3Percentage: this.DiscountStrata3Percentage(),
                DiscountStrata4Percentage: this.DiscountStrata4Percentage(),
                DiscountStrata5Percentage: this.DiscountStrata5Percentage(),
                AddDiscountStrataPercentage: this.AddDiscountStrataPercentage(),
                TaxPercentage: this.TaxPercentage(),
                RawSubtotalGrossPrice: this.RawSubtotalGrossPrice(),
                RawSubtotalPrice: this.RawSubtotalPrice(),
                RawSubtotalDiscountStrata1: this.RawSubtotalDiscountStrata1(),
                RawDiscountStrata1Amount: this.RawDiscountStrata1Amount(),
                RawSubtotalDiscountStrata2: this.RawSubtotalDiscountStrata2(),
                RawDiscountStrata2Amount: this.RawDiscountStrata2Amount(),
                RawSubtotalDiscountStrata3: this.RawSubtotalDiscountStrata3(),
                RawDiscountStrata3Amount: this.RawDiscountStrata3Amount(),
                RawSubtotalDiscountStrata4: this.RawSubtotalDiscountStrata4(),
                RawDiscountStrata4Amount: this.RawDiscountStrata4Amount(),
                RawSubtotalDiscountStrata5: this.RawSubtotalDiscountStrata5(),
                RawDiscountStrata5Amount: this.RawDiscountStrata5Amount(),
                RawAddDiscountStrataAmount: this.RawAddDiscountStrataAmount(),
                RawSubtotalGross: this.RawSubtotalGross(),
                RawSubtotalTax: this.RawSubtotalTax(),
                RawSubtotal: this.RawSubtotal(),
                SubtotalGrossPrice: this.SubtotalGrossPrice(),
                SubtotalPrice: this.SubtotalPrice(),
                SubtotalDiscountStrata1: this.SubtotalDiscountStrata1(),
                DiscountStrata1Amount: this.DiscountStrata1Amount(),
                SubtotalDiscountStrata2: this.SubtotalDiscountStrata2(),
                DiscountStrata2Amount: this.DiscountStrata2Amount(),
                SubtotalDiscountStrata3: this.SubtotalDiscountStrata3(),
                DiscountStrata3Amount: this.DiscountStrata3Amount(),
                SubtotalDiscountStrata4: this.SubtotalDiscountStrata4(),
                DiscountStrata4Amount: this.DiscountStrata4Amount(),
                SubtotalDiscountStrata5: this.SubtotalDiscountStrata5(),
                DiscountStrata5Amount: this.DiscountStrata5Amount(),
                AddDiscountStrataAmount: this.AddDiscountStrataAmount(),
                SubtotalGross: this.SubtotalGross(),
                SubtotalTax: this.SubtotalTax(),
                Subtotal: this.Subtotal(),
                SubtotalWeight: this.SubtotalWeight(),
                SubtotalDimension: this.SubtotalDimension(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.PriceDate(data.PriceDate);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);
                this.UnitGrossPrice(data.UnitGrossPrice);
                this.UnitPrice(data.UnitPrice);
                this.DiscountStrata1Percentage(data.DiscountStrata1Percentage);
                this.DiscountStrata2Percentage(data.DiscountStrata2Percentage);
                this.DiscountStrata3Percentage(data.DiscountStrata3Percentage);
                this.DiscountStrata4Percentage(data.DiscountStrata4Percentage);
                this.DiscountStrata5Percentage(data.DiscountStrata5Percentage);
                this.AddDiscountStrataPercentage(data.AddDiscountStrataPercentage);
                this.TaxPercentage(data.TaxPercentage);
                this.RawSubtotalGrossPrice(data.RawSubtotalGrossPrice);
                this.RawSubtotalPrice(data.RawSubtotalPrice);
                this.RawSubtotalDiscountStrata1(data.RawSubtotalDiscountStrata1);
                this.RawDiscountStrata1Amount(data.RawDiscountStrata1Amount);
                this.RawSubtotalDiscountStrata2(data.RawSubtotalDiscountStrata2);
                this.RawDiscountStrata2Amount(data.RawDiscountStrata2Amount);
                this.RawSubtotalDiscountStrata3(data.RawSubtotalDiscountStrata3);
                this.RawDiscountStrata3Amount(data.RawDiscountStrata3Amount);
                this.RawSubtotalDiscountStrata4(data.RawSubtotalDiscountStrata4);
                this.RawDiscountStrata4Amount(data.RawDiscountStrata4Amount);
                this.RawSubtotalDiscountStrata5(data.RawSubtotalDiscountStrata5);
                this.RawDiscountStrata5Amount(data.RawDiscountStrata5Amount);
                this.RawAddDiscountStrataAmount(data.RawAddDiscountStrataAmount);
                this.RawSubtotalGross(data.RawSubtotalGross);
                this.RawSubtotalTax(data.RawSubtotalTax);
                this.RawSubtotal(data.RawSubtotal);
                this.SubtotalGrossPrice(data.SubtotalGrossPrice);
                this.SubtotalPrice(data.SubtotalPrice);
                this.SubtotalDiscountStrata1(data.SubtotalDiscountStrata1);
                this.DiscountStrata1Amount(data.DiscountStrata1Amount);
                this.SubtotalDiscountStrata2(data.SubtotalDiscountStrata2);
                this.DiscountStrata2Amount(data.DiscountStrata2Amount);
                this.SubtotalDiscountStrata3(data.SubtotalDiscountStrata3);
                this.DiscountStrata3Amount(data.DiscountStrata3Amount);
                this.SubtotalDiscountStrata4(data.SubtotalDiscountStrata4);
                this.DiscountStrata4Amount(data.DiscountStrata4Amount);
                this.SubtotalDiscountStrata5(data.SubtotalDiscountStrata5);
                this.DiscountStrata5Amount(data.DiscountStrata5Amount);
                this.AddDiscountStrataAmount(data.AddDiscountStrataAmount);
                this.SubtotalGross(data.SubtotalGross);
                this.SubtotalTax(data.SubtotalTax);
                this.Subtotal(data.Subtotal);
                this.SubtotalWeight(data.SubtotalWeight);
                this.SubtotalDimension(data.SubtotalDimension);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vSalesOrderFOCDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.PriceDate(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);
            this.UnitGrossPrice(undefined);
            this.UnitPrice(undefined);
            this.DiscountStrata1Percentage(undefined);
            this.DiscountStrata2Percentage(undefined);
            this.DiscountStrata3Percentage(undefined);
            this.DiscountStrata4Percentage(undefined);
            this.DiscountStrata5Percentage(undefined);
            this.AddDiscountStrataPercentage(undefined);
            this.TaxPercentage(undefined);
            this.RawSubtotalGrossPrice(undefined);
            this.RawSubtotalPrice(undefined);
            this.RawSubtotalDiscountStrata1(undefined);
            this.RawDiscountStrata1Amount(undefined);
            this.RawSubtotalDiscountStrata2(undefined);
            this.RawDiscountStrata2Amount(undefined);
            this.RawSubtotalDiscountStrata3(undefined);
            this.RawDiscountStrata3Amount(undefined);
            this.RawSubtotalDiscountStrata4(undefined);
            this.RawDiscountStrata4Amount(undefined);
            this.RawSubtotalDiscountStrata5(undefined);
            this.RawDiscountStrata5Amount(undefined);
            this.RawAddDiscountStrataAmount(undefined);
            this.RawSubtotalGross(undefined);
            this.RawSubtotalTax(undefined);
            this.RawSubtotal(undefined);
            this.SubtotalGrossPrice(undefined);
            this.SubtotalPrice(undefined);
            this.SubtotalDiscountStrata1(undefined);
            this.DiscountStrata1Amount(undefined);
            this.SubtotalDiscountStrata2(undefined);
            this.DiscountStrata2Amount(undefined);
            this.SubtotalDiscountStrata3(undefined);
            this.DiscountStrata3Amount(undefined);
            this.SubtotalDiscountStrata4(undefined);
            this.DiscountStrata4Amount(undefined);
            this.SubtotalDiscountStrata5(undefined);
            this.DiscountStrata5Amount(undefined);
            this.AddDiscountStrataAmount(undefined);
            this.SubtotalGross(undefined);
            this.SubtotalTax(undefined);
            this.Subtotal(undefined);
            this.SubtotalWeight(undefined);
            this.SubtotalDimension(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:22:05
// Description   : vSalesOrderReturnViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderReturnViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.CustomerID = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.PriceGroupID = ko.observable();
        this.PriceGroupName = ko.observable();
        this.DiscountGroupID = ko.observable();
        this.DiscountGroupCode = ko.observable();
        this.DiscountGroupName = ko.observable();
        this.DiscountGroup = ko.observable();
        this.DiscountGroupDescription = ko.observable();
        this.TermOfPaymentID = ko.observable();
        this.TermOfPaymentName = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.ReasonID = ko.observable();
        this.ReasonName = ko.observable();
        this.DODocumentID = ko.observable();
        this.DODocumentCode = ko.observable();
        this.DOShipmentDate = ko.observable();
        this.DOReceivedDate = ko.observable();
        this.DOPrintedCount = ko.observable();
        this.DOLastPrintedDate = ko.observable();
        this.InvoiceDocumentID = ko.observable();
        this.InvoiceDocumentCode = ko.observable();
        this.RawTotalGrossPrice = ko.observable();
        this.RawTotalPrice = ko.observable();
        this.RawTotalDiscountStrata1Amount = ko.observable();
        this.RawTotalDiscountStrata2Amount = ko.observable();
        this.RawTotalDiscountStrata3Amount = ko.observable();
        this.RawTotalDiscountStrata4Amount = ko.observable();
        this.RawTotalDiscountStrata5Amount = ko.observable();
        this.RawTotalAddDiscountStrataAmount = ko.observable();
        this.RawTotalGross = ko.observable();
        this.RawTotalTax = ko.observable();
        this.RawTotal = ko.observable();
        this.TotalGrossPrice = ko.observable();
        this.TotalPrice = ko.observable();
        this.TotalDiscountStrata1Amount = ko.observable();
        this.TotalDiscountStrata2Amount = ko.observable();
        this.TotalDiscountStrata3Amount = ko.observable();
        this.TotalDiscountStrata4Amount = ko.observable();
        this.TotalDiscountStrata5Amount = ko.observable();
        this.TotalAddDiscountStrataAmount = ko.observable();
        this.TotalGross = ko.observable();
        this.TotalTax = ko.observable();
        this.Total = ko.observable();
        this.TotalWeight = ko.observable();
        this.TotalDimension = ko.observable();
        this.AddDiscountStrataReason = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.DocumentStatusReason = ko.observable();
        this.SFAInvoiceDocumentCode = ko.observable();
        this.PrintCount = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderReturnViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                CustomerID: this.CustomerID(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                PriceGroupID: this.PriceGroupID(),
                PriceGroupName: this.PriceGroupName(),
                DiscountGroupID: this.DiscountGroupID(),
                DiscountGroupCode: this.DiscountGroupCode(),
                DiscountGroupName: this.DiscountGroupName(),
                DiscountGroup: this.DiscountGroup(),
                DiscountGroupDescription: this.DiscountGroupDescription(),
                TermOfPaymentID: this.TermOfPaymentID(),
                TermOfPaymentName: this.TermOfPaymentName(),
                ReferenceNumber: this.ReferenceNumber(),
                ReasonID: this.ReasonID(),
                ReasonName: this.ReasonName(),
                DODocumentID: this.DODocumentID(),
                DODocumentCode: this.DODocumentCode(),
                DOShipmentDate: this.DOShipmentDate(),
                DOReceivedDate: this.DOReceivedDate(),
                DOPrintedCount: this.DOPrintedCount(),
                DOLastPrintedDate: this.DOLastPrintedDate(),
                InvoiceDocumentID: this.InvoiceDocumentID(),
                InvoiceDocumentCode: this.InvoiceDocumentCode(),
                RawTotalGrossPrice: this.RawTotalGrossPrice(),
                RawTotalPrice: this.RawTotalPrice(),
                RawTotalDiscountStrata1Amount: this.RawTotalDiscountStrata1Amount(),
                RawTotalDiscountStrata2Amount: this.RawTotalDiscountStrata2Amount(),
                RawTotalDiscountStrata3Amount: this.RawTotalDiscountStrata3Amount(),
                RawTotalDiscountStrata4Amount: this.RawTotalDiscountStrata4Amount(),
                RawTotalDiscountStrata5Amount: this.RawTotalDiscountStrata5Amount(),
                RawTotalAddDiscountStrataAmount: this.RawTotalAddDiscountStrataAmount(),
                RawTotalGross: this.RawTotalGross(),
                RawTotalTax: this.RawTotalTax(),
                RawTotal: this.RawTotal(),
                TotalGrossPrice: this.TotalGrossPrice(),
                TotalPrice: this.TotalPrice(),
                TotalDiscountStrata1Amount: this.TotalDiscountStrata1Amount(),
                TotalDiscountStrata2Amount: this.TotalDiscountStrata2Amount(),
                TotalDiscountStrata3Amount: this.TotalDiscountStrata3Amount(),
                TotalDiscountStrata4Amount: this.TotalDiscountStrata4Amount(),
                TotalDiscountStrata5Amount: this.TotalDiscountStrata5Amount(),
                TotalAddDiscountStrataAmount: this.TotalAddDiscountStrataAmount(),
                TotalGross: this.TotalGross(),
                TotalTax: this.TotalTax(),
                Total: this.Total(),
                TotalWeight: this.TotalWeight(),
                TotalDimension: this.TotalDimension(),
                AddDiscountStrataReason: this.AddDiscountStrataReason(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                DocumentStatusReason: this.DocumentStatusReason(),
                SFAInvoiceDocumentCode: this.SFAInvoiceDocumentCode(),
                PrintCount: this.PrintCount(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.CustomerID(data.CustomerID);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.PriceGroupID(data.PriceGroupID);
                this.PriceGroupName(data.PriceGroupName);
                this.DiscountGroupID(data.DiscountGroupID);
                this.DiscountGroupCode(data.DiscountGroupCode);
                this.DiscountGroupName(data.DiscountGroupName);
                this.DiscountGroup(data.DiscountGroup);
                this.DiscountGroupDescription(data.DiscountGroupDescription);
                this.TermOfPaymentID(data.TermOfPaymentID);
                this.TermOfPaymentName(data.TermOfPaymentName);
                this.ReferenceNumber(data.ReferenceNumber);
                this.ReasonID(data.ReasonID);
                this.ReasonName(data.ReasonName);
                this.DODocumentID(data.DODocumentID);
                this.DODocumentCode(data.DODocumentCode);
                this.DOShipmentDate(data.DOShipmentDate);
                this.DOReceivedDate(data.DOReceivedDate);
                this.DOPrintedCount(data.DOPrintedCount);
                this.DOLastPrintedDate(data.DOLastPrintedDate);
                this.InvoiceDocumentID(data.InvoiceDocumentID);
                this.InvoiceDocumentCode(data.InvoiceDocumentCode);
                this.RawTotalGrossPrice(data.RawTotalGrossPrice);
                this.RawTotalPrice(data.RawTotalPrice);
                this.RawTotalDiscountStrata1Amount(data.RawTotalDiscountStrata1Amount);
                this.RawTotalDiscountStrata2Amount(data.RawTotalDiscountStrata2Amount);
                this.RawTotalDiscountStrata3Amount(data.RawTotalDiscountStrata3Amount);
                this.RawTotalDiscountStrata4Amount(data.RawTotalDiscountStrata4Amount);
                this.RawTotalDiscountStrata5Amount(data.RawTotalDiscountStrata5Amount);
                this.RawTotalAddDiscountStrataAmount(data.RawTotalAddDiscountStrataAmount);
                this.RawTotalGross(data.RawTotalGross);
                this.RawTotalTax(data.RawTotalTax);
                this.RawTotal(data.RawTotal);
                this.TotalGrossPrice(data.TotalGrossPrice);
                this.TotalPrice(data.TotalPrice);
                this.TotalDiscountStrata1Amount(data.TotalDiscountStrata1Amount);
                this.TotalDiscountStrata2Amount(data.TotalDiscountStrata2Amount);
                this.TotalDiscountStrata3Amount(data.TotalDiscountStrata3Amount);
                this.TotalDiscountStrata4Amount(data.TotalDiscountStrata4Amount);
                this.TotalDiscountStrata5Amount(data.TotalDiscountStrata5Amount);
                this.TotalAddDiscountStrataAmount(data.TotalAddDiscountStrataAmount);
                this.TotalGross(data.TotalGross);
                this.TotalTax(data.TotalTax);
                this.Total(data.Total);
                this.TotalWeight(data.TotalWeight);
                this.TotalDimension(data.TotalDimension);
                this.AddDiscountStrataReason(data.AddDiscountStrataReason);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.DocumentStatusReason(data.DocumentStatusReason);
                this.SFAInvoiceDocumentCode(data.SFAInvoiceDocumentCode);
                this.PrintCount(data.PrintCount);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.CustomerID(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.PriceGroupID(undefined);
            this.PriceGroupName(undefined);
            this.DiscountGroupID(undefined);
            this.DiscountGroupCode(undefined);
            this.DiscountGroupName(undefined);
            this.DiscountGroup(undefined);
            this.DiscountGroupDescription(undefined);
            this.TermOfPaymentID(undefined);
            this.TermOfPaymentName(undefined);
            this.ReferenceNumber(undefined);
            this.ReasonID(undefined);
            this.ReasonName(undefined);
            this.DODocumentID(undefined);
            this.DODocumentCode(undefined);
            this.DOShipmentDate(undefined);
            this.DOReceivedDate(undefined);
            this.DOPrintedCount(undefined);
            this.DOLastPrintedDate(undefined);
            this.InvoiceDocumentID(undefined);
            this.InvoiceDocumentCode(undefined);
            this.RawTotalGrossPrice(undefined);
            this.RawTotalPrice(undefined);
            this.RawTotalDiscountStrata1Amount(undefined);
            this.RawTotalDiscountStrata2Amount(undefined);
            this.RawTotalDiscountStrata3Amount(undefined);
            this.RawTotalDiscountStrata4Amount(undefined);
            this.RawTotalDiscountStrata5Amount(undefined);
            this.RawTotalAddDiscountStrataAmount(undefined);
            this.RawTotalGross(undefined);
            this.RawTotalTax(undefined);
            this.RawTotal(undefined);
            this.TotalGrossPrice(undefined);
            this.TotalPrice(undefined);
            this.TotalDiscountStrata1Amount(undefined);
            this.TotalDiscountStrata2Amount(undefined);
            this.TotalDiscountStrata3Amount(undefined);
            this.TotalDiscountStrata4Amount(undefined);
            this.TotalDiscountStrata5Amount(undefined);
            this.TotalAddDiscountStrataAmount(undefined);
            this.TotalGross(undefined);
            this.TotalTax(undefined);
            this.Total(undefined);
            this.TotalWeight(undefined);
            this.TotalDimension(undefined);
            this.AddDiscountStrataReason(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.DocumentStatusReason(undefined);
            this.SFAInvoiceDocumentCode(undefined);
            this.PrintCount(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 12 May 2016 20:38:09
// Description   : vSalesOrderReturnDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderReturnDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderReturnDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:26:58
// Description   : vSalesOrderReturnSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.PriceDate = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();
        this.UnitGrossPrice = ko.observable();
        this.UnitPrice = ko.observable();
        this.DiscountStrata1Percentage = ko.observable();
        this.DiscountStrata2Percentage = ko.observable();
        this.DiscountStrata3Percentage = ko.observable();
        this.DiscountStrata4Percentage = ko.observable();
        this.DiscountStrata5Percentage = ko.observable();
        this.AddDiscountStrataPercentage = ko.observable();
        this.TaxPercentage = ko.observable();
        this.RawSubtotalGrossPrice = ko.observable();
        this.RawSubtotalPrice = ko.observable();
        this.RawSubtotalDiscountStrata1 = ko.observable();
        this.RawDiscountStrata1Amount = ko.observable();
        this.RawSubtotalDiscountStrata2 = ko.observable();
        this.RawDiscountStrata2Amount = ko.observable();
        this.RawSubtotalDiscountStrata3 = ko.observable();
        this.RawDiscountStrata3Amount = ko.observable();
        this.RawSubtotalDiscountStrata4 = ko.observable();
        this.RawDiscountStrata4Amount = ko.observable();
        this.RawSubtotalDiscountStrata5 = ko.observable();
        this.RawDiscountStrata5Amount = ko.observable();
        this.RawAddDiscountStrataAmount = ko.observable();
        this.RawSubtotalGross = ko.observable();
        this.RawSubtotalTax = ko.observable();
        this.RawSubtotal = ko.observable();
        this.SubtotalGrossPrice = ko.observable();
        this.SubtotalPrice = ko.observable();
        this.SubtotalDiscountStrata1 = ko.observable();
        this.DiscountStrata1Amount = ko.observable();
        this.SubtotalDiscountStrata2 = ko.observable();
        this.DiscountStrata2Amount = ko.observable();
        this.SubtotalDiscountStrata3 = ko.observable();
        this.DiscountStrata3Amount = ko.observable();
        this.SubtotalDiscountStrata4 = ko.observable();
        this.DiscountStrata4Amount = ko.observable();
        this.SubtotalDiscountStrata5 = ko.observable();
        this.DiscountStrata5Amount = ko.observable();
        this.AddDiscountStrataAmount = ko.observable();
        this.SubtotalGross = ko.observable();
        this.SubtotalTax = ko.observable();
        this.Subtotal = ko.observable();
        this.SubtotalWeight = ko.observable();
        this.SubtotalDimension = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderReturnSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                PriceDate: this.PriceDate(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),
                UnitGrossPrice: this.UnitGrossPrice(),
                UnitPrice: this.UnitPrice(),
                DiscountStrata1Percentage: this.DiscountStrata1Percentage(),
                DiscountStrata2Percentage: this.DiscountStrata2Percentage(),
                DiscountStrata3Percentage: this.DiscountStrata3Percentage(),
                DiscountStrata4Percentage: this.DiscountStrata4Percentage(),
                DiscountStrata5Percentage: this.DiscountStrata5Percentage(),
                AddDiscountStrataPercentage: this.AddDiscountStrataPercentage(),
                TaxPercentage: this.TaxPercentage(),
                RawSubtotalGrossPrice: this.RawSubtotalGrossPrice(),
                RawSubtotalPrice: this.RawSubtotalPrice(),
                RawSubtotalDiscountStrata1: this.RawSubtotalDiscountStrata1(),
                RawDiscountStrata1Amount: this.RawDiscountStrata1Amount(),
                RawSubtotalDiscountStrata2: this.RawSubtotalDiscountStrata2(),
                RawDiscountStrata2Amount: this.RawDiscountStrata2Amount(),
                RawSubtotalDiscountStrata3: this.RawSubtotalDiscountStrata3(),
                RawDiscountStrata3Amount: this.RawDiscountStrata3Amount(),
                RawSubtotalDiscountStrata4: this.RawSubtotalDiscountStrata4(),
                RawDiscountStrata4Amount: this.RawDiscountStrata4Amount(),
                RawSubtotalDiscountStrata5: this.RawSubtotalDiscountStrata5(),
                RawDiscountStrata5Amount: this.RawDiscountStrata5Amount(),
                RawAddDiscountStrataAmount: this.RawAddDiscountStrataAmount(),
                RawSubtotalGross: this.RawSubtotalGross(),
                RawSubtotalTax: this.RawSubtotalTax(),
                RawSubtotal: this.RawSubtotal(),
                SubtotalGrossPrice: this.SubtotalGrossPrice(),
                SubtotalPrice: this.SubtotalPrice(),
                SubtotalDiscountStrata1: this.SubtotalDiscountStrata1(),
                DiscountStrata1Amount: this.DiscountStrata1Amount(),
                SubtotalDiscountStrata2: this.SubtotalDiscountStrata2(),
                DiscountStrata2Amount: this.DiscountStrata2Amount(),
                SubtotalDiscountStrata3: this.SubtotalDiscountStrata3(),
                DiscountStrata3Amount: this.DiscountStrata3Amount(),
                SubtotalDiscountStrata4: this.SubtotalDiscountStrata4(),
                DiscountStrata4Amount: this.DiscountStrata4Amount(),
                SubtotalDiscountStrata5: this.SubtotalDiscountStrata5(),
                DiscountStrata5Amount: this.DiscountStrata5Amount(),
                AddDiscountStrataAmount: this.AddDiscountStrataAmount(),
                SubtotalGross: this.SubtotalGross(),
                SubtotalTax: this.SubtotalTax(),
                Subtotal: this.Subtotal(),
                SubtotalWeight: this.SubtotalWeight(),
                SubtotalDimension: this.SubtotalDimension(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.PriceDate(data.PriceDate);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);
                this.UnitGrossPrice(data.UnitGrossPrice);
                this.UnitPrice(data.UnitPrice);
                this.DiscountStrata1Percentage(data.DiscountStrata1Percentage);
                this.DiscountStrata2Percentage(data.DiscountStrata2Percentage);
                this.DiscountStrata3Percentage(data.DiscountStrata3Percentage);
                this.DiscountStrata4Percentage(data.DiscountStrata4Percentage);
                this.DiscountStrata5Percentage(data.DiscountStrata5Percentage);
                this.AddDiscountStrataPercentage(data.AddDiscountStrataPercentage);
                this.TaxPercentage(data.TaxPercentage);
                this.RawSubtotalGrossPrice(data.RawSubtotalGrossPrice);
                this.RawSubtotalPrice(data.RawSubtotalPrice);
                this.RawSubtotalDiscountStrata1(data.RawSubtotalDiscountStrata1);
                this.RawDiscountStrata1Amount(data.RawDiscountStrata1Amount);
                this.RawSubtotalDiscountStrata2(data.RawSubtotalDiscountStrata2);
                this.RawDiscountStrata2Amount(data.RawDiscountStrata2Amount);
                this.RawSubtotalDiscountStrata3(data.RawSubtotalDiscountStrata3);
                this.RawDiscountStrata3Amount(data.RawDiscountStrata3Amount);
                this.RawSubtotalDiscountStrata4(data.RawSubtotalDiscountStrata4);
                this.RawDiscountStrata4Amount(data.RawDiscountStrata4Amount);
                this.RawSubtotalDiscountStrata5(data.RawSubtotalDiscountStrata5);
                this.RawDiscountStrata5Amount(data.RawDiscountStrata5Amount);
                this.RawAddDiscountStrataAmount(data.RawAddDiscountStrataAmount);
                this.RawSubtotalGross(data.RawSubtotalGross);
                this.RawSubtotalTax(data.RawSubtotalTax);
                this.RawSubtotal(data.RawSubtotal);
                this.SubtotalGrossPrice(data.SubtotalGrossPrice);
                this.SubtotalPrice(data.SubtotalPrice);
                this.SubtotalDiscountStrata1(data.SubtotalDiscountStrata1);
                this.DiscountStrata1Amount(data.DiscountStrata1Amount);
                this.SubtotalDiscountStrata2(data.SubtotalDiscountStrata2);
                this.DiscountStrata2Amount(data.DiscountStrata2Amount);
                this.SubtotalDiscountStrata3(data.SubtotalDiscountStrata3);
                this.DiscountStrata3Amount(data.DiscountStrata3Amount);
                this.SubtotalDiscountStrata4(data.SubtotalDiscountStrata4);
                this.DiscountStrata4Amount(data.DiscountStrata4Amount);
                this.SubtotalDiscountStrata5(data.SubtotalDiscountStrata5);
                this.DiscountStrata5Amount(data.DiscountStrata5Amount);
                this.AddDiscountStrataAmount(data.AddDiscountStrataAmount);
                this.SubtotalGross(data.SubtotalGross);
                this.SubtotalTax(data.SubtotalTax);
                this.Subtotal(data.Subtotal);
                this.SubtotalWeight(data.SubtotalWeight);
                this.SubtotalDimension(data.SubtotalDimension);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vSalesOrderReturnDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.PriceDate(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);
            this.UnitGrossPrice(undefined);
            this.UnitPrice(undefined);
            this.DiscountStrata1Percentage(undefined);
            this.DiscountStrata2Percentage(undefined);
            this.DiscountStrata3Percentage(undefined);
            this.DiscountStrata4Percentage(undefined);
            this.DiscountStrata5Percentage(undefined);
            this.AddDiscountStrataPercentage(undefined);
            this.TaxPercentage(undefined);
            this.RawSubtotalGrossPrice(undefined);
            this.RawSubtotalPrice(undefined);
            this.RawSubtotalDiscountStrata1(undefined);
            this.RawDiscountStrata1Amount(undefined);
            this.RawSubtotalDiscountStrata2(undefined);
            this.RawDiscountStrata2Amount(undefined);
            this.RawSubtotalDiscountStrata3(undefined);
            this.RawDiscountStrata3Amount(undefined);
            this.RawSubtotalDiscountStrata4(undefined);
            this.RawDiscountStrata4Amount(undefined);
            this.RawSubtotalDiscountStrata5(undefined);
            this.RawDiscountStrata5Amount(undefined);
            this.RawAddDiscountStrataAmount(undefined);
            this.RawSubtotalGross(undefined);
            this.RawSubtotalTax(undefined);
            this.RawSubtotal(undefined);
            this.SubtotalGrossPrice(undefined);
            this.SubtotalPrice(undefined);
            this.SubtotalDiscountStrata1(undefined);
            this.DiscountStrata1Amount(undefined);
            this.SubtotalDiscountStrata2(undefined);
            this.DiscountStrata2Amount(undefined);
            this.SubtotalDiscountStrata3(undefined);
            this.DiscountStrata3Amount(undefined);
            this.SubtotalDiscountStrata4(undefined);
            this.DiscountStrata4Amount(undefined);
            this.SubtotalDiscountStrata5(undefined);
            this.DiscountStrata5Amount(undefined);
            this.AddDiscountStrataAmount(undefined);
            this.SubtotalGross(undefined);
            this.SubtotalTax(undefined);
            this.Subtotal(undefined);
            this.SubtotalWeight(undefined);
            this.SubtotalDimension(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:29:08
// Description   : vSalesOrderSampleViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSampleViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.PODocumentID = ko.observable();
        this.PODocumentCode = ko.observable();
        this.POTransactionDate = ko.observable();
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.CustomerID = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.PriceGroupID = ko.observable();
        this.PriceGroupName = ko.observable();
        this.DiscountGroupID = ko.observable();
        this.DiscountGroupCode = ko.observable();
        this.DiscountGroupName = ko.observable();
        this.DiscountGroup = ko.observable();
        this.DiscountGroupDescription = ko.observable();
        this.TermOfPaymentID = ko.observable();
        this.TermOfPaymentName = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.DODocumentID = ko.observable();
        this.DODocumentCode = ko.observable();
        this.DOShipmentDate = ko.observable();
        this.DOReceivedDate = ko.observable();
        this.DOPrintedCount = ko.observable();
        this.DOLastPrintedDate = ko.observable();
        this.InvoiceDocumentID = ko.observable();
        this.InvoiceDocumentCode = ko.observable();
        this.TotalGrossPrice = ko.observable();
        this.RawTotalGrossPrice = ko.observable();
        this.RawTotalPrice = ko.observable();
        this.RawTotalDiscountStrata1Amount = ko.observable();
        this.RawTotalDiscountStrata2Amount = ko.observable();
        this.RawTotalDiscountStrata3Amount = ko.observable();
        this.RawTotalDiscountStrata4Amount = ko.observable();
        this.RawTotalDiscountStrata5Amount = ko.observable();
        this.RawTotalAddDiscountStrataAmount = ko.observable();
        this.RawTotalGross = ko.observable();
        this.RawTotalTax = ko.observable();
        this.RawTotal = ko.observable();
        this.TotalPrice = ko.observable();
        this.TotalDiscountStrata1Amount = ko.observable();
        this.TotalDiscountStrata2Amount = ko.observable();
        this.TotalDiscountStrata3Amount = ko.observable();
        this.TotalDiscountStrata4Amount = ko.observable();
        this.TotalDiscountStrata5Amount = ko.observable();
        this.TotalAddDiscountStrataAmount = ko.observable();
        this.TotalGross = ko.observable();
        this.TotalTax = ko.observable();
        this.Total = ko.observable();
        this.TotalWeight = ko.observable();
        this.TotalDimension = ko.observable();
        this.AddDiscountStrataReason = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.DocumentStatusReason = ko.observable();
        this.SFAInvoiceDocumentCode = ko.observable();
        this.PrintCount = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSampleViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                PODocumentID: this.PODocumentID(),
                PODocumentCode: this.PODocumentCode(),
                POTransactionDate: this.POTransactionDate(),
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                CustomerID: this.CustomerID(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                PriceGroupID: this.PriceGroupID(),
                PriceGroupName: this.PriceGroupName(),
                DiscountGroupID: this.DiscountGroupID(),
                DiscountGroupCode: this.DiscountGroupCode(),
                DiscountGroupName: this.DiscountGroupName(),
                DiscountGroup: this.DiscountGroup(),
                DiscountGroupDescription: this.DiscountGroupDescription(),
                TermOfPaymentID: this.TermOfPaymentID(),
                TermOfPaymentName: this.TermOfPaymentName(),
                ReferenceNumber: this.ReferenceNumber(),
                DODocumentID: this.DODocumentID(),
                DODocumentCode: this.DODocumentCode(),
                DOShipmentDate: this.DOShipmentDate(),
                DOReceivedDate: this.DOReceivedDate(),
                DOPrintedCount: this.DOPrintedCount(),
                DOLastPrintedDate: this.DOLastPrintedDate(),
                InvoiceDocumentID: this.InvoiceDocumentID(),
                InvoiceDocumentCode: this.InvoiceDocumentCode(),
                TotalGrossPrice: this.TotalGrossPrice(),
                RawTotalGrossPrice: this.RawTotalGrossPrice(),
                RawTotalPrice: this.RawTotalPrice(),
                RawTotalDiscountStrata1Amount: this.RawTotalDiscountStrata1Amount(),
                RawTotalDiscountStrata2Amount: this.RawTotalDiscountStrata2Amount(),
                RawTotalDiscountStrata3Amount: this.RawTotalDiscountStrata3Amount(),
                RawTotalDiscountStrata4Amount: this.RawTotalDiscountStrata4Amount(),
                RawTotalDiscountStrata5Amount: this.RawTotalDiscountStrata5Amount(),
                RawTotalAddDiscountStrataAmount: this.RawTotalAddDiscountStrataAmount(),
                RawTotalGross: this.RawTotalGross(),
                RawTotalTax: this.RawTotalTax(),
                RawTotal: this.RawTotal(),
                TotalPrice: this.TotalPrice(),
                TotalDiscountStrata1Amount: this.TotalDiscountStrata1Amount(),
                TotalDiscountStrata2Amount: this.TotalDiscountStrata2Amount(),
                TotalDiscountStrata3Amount: this.TotalDiscountStrata3Amount(),
                TotalDiscountStrata4Amount: this.TotalDiscountStrata4Amount(),
                TotalDiscountStrata5Amount: this.TotalDiscountStrata5Amount(),
                TotalAddDiscountStrataAmount: this.TotalAddDiscountStrataAmount(),
                TotalGross: this.TotalGross(),
                TotalTax: this.TotalTax(),
                Total: this.Total(),
                TotalWeight: this.TotalWeight(),
                TotalDimension: this.TotalDimension(),
                AddDiscountStrataReason: this.AddDiscountStrataReason(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                DocumentStatusReason: this.DocumentStatusReason(),
                SFAInvoiceDocumentCode: this.SFAInvoiceDocumentCode(),
                PrintCount: this.PrintCount(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.PODocumentID(data.PODocumentID);
                this.PODocumentCode(data.PODocumentCode);
                this.POTransactionDate(data.POTransactionDate);
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.CustomerID(data.CustomerID);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.PriceGroupID(data.PriceGroupID);
                this.PriceGroupName(data.PriceGroupName);
                this.DiscountGroupID(data.DiscountGroupID);
                this.DiscountGroupCode(data.DiscountGroupCode);
                this.DiscountGroupName(data.DiscountGroupName);
                this.DiscountGroup(data.DiscountGroup);
                this.DiscountGroupDescription(data.DiscountGroupDescription);
                this.TermOfPaymentID(data.TermOfPaymentID);
                this.TermOfPaymentName(data.TermOfPaymentName);
                this.ReferenceNumber(data.ReferenceNumber);
                this.DODocumentID(data.DODocumentID);
                this.DODocumentCode(data.DODocumentCode);
                this.DOShipmentDate(data.DOShipmentDate);
                this.DOReceivedDate(data.DOReceivedDate);
                this.DOPrintedCount(data.DOPrintedCount);
                this.DOLastPrintedDate(data.DOLastPrintedDate);
                this.InvoiceDocumentID(data.InvoiceDocumentID);
                this.InvoiceDocumentCode(data.InvoiceDocumentCode);
                this.TotalGrossPrice(data.TotalGrossPrice);
                this.RawTotalGrossPrice(data.RawTotalGrossPrice);
                this.RawTotalPrice(data.RawTotalPrice);
                this.RawTotalDiscountStrata1Amount(data.RawTotalDiscountStrata1Amount);
                this.RawTotalDiscountStrata2Amount(data.RawTotalDiscountStrata2Amount);
                this.RawTotalDiscountStrata3Amount(data.RawTotalDiscountStrata3Amount);
                this.RawTotalDiscountStrata4Amount(data.RawTotalDiscountStrata4Amount);
                this.RawTotalDiscountStrata5Amount(data.RawTotalDiscountStrata5Amount);
                this.RawTotalAddDiscountStrataAmount(data.RawTotalAddDiscountStrataAmount);
                this.RawTotalGross(data.RawTotalGross);
                this.RawTotalTax(data.RawTotalTax);
                this.RawTotal(data.RawTotal);
                this.TotalPrice(data.TotalPrice);
                this.TotalDiscountStrata1Amount(data.TotalDiscountStrata1Amount);
                this.TotalDiscountStrata2Amount(data.TotalDiscountStrata2Amount);
                this.TotalDiscountStrata3Amount(data.TotalDiscountStrata3Amount);
                this.TotalDiscountStrata4Amount(data.TotalDiscountStrata4Amount);
                this.TotalDiscountStrata5Amount(data.TotalDiscountStrata5Amount);
                this.TotalAddDiscountStrataAmount(data.TotalAddDiscountStrataAmount);
                this.TotalGross(data.TotalGross);
                this.TotalTax(data.TotalTax);
                this.Total(data.Total);
                this.TotalWeight(data.TotalWeight);
                this.TotalDimension(data.TotalDimension);
                this.AddDiscountStrataReason(data.AddDiscountStrataReason);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.DocumentStatusReason(data.DocumentStatusReason);
                this.SFAInvoiceDocumentCode(data.SFAInvoiceDocumentCode);
                this.PrintCount(data.PrintCount);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.PODocumentID(undefined);
            this.PODocumentCode(undefined);
            this.POTransactionDate(undefined);
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.CustomerID(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.PriceGroupID(undefined);
            this.PriceGroupName(undefined);
            this.DiscountGroupID(undefined);
            this.DiscountGroupCode(undefined);
            this.DiscountGroupName(undefined);
            this.DiscountGroup(undefined);
            this.DiscountGroupDescription(undefined);
            this.TermOfPaymentID(undefined);
            this.TermOfPaymentName(undefined);
            this.ReferenceNumber(undefined);
            this.DODocumentID(undefined);
            this.DODocumentCode(undefined);
            this.DOShipmentDate(undefined);
            this.DOReceivedDate(undefined);
            this.DOPrintedCount(undefined);
            this.DOLastPrintedDate(undefined);
            this.InvoiceDocumentID(undefined);
            this.InvoiceDocumentCode(undefined);
            this.TotalGrossPrice(undefined);
            this.RawTotalGrossPrice(undefined);
            this.RawTotalPrice(undefined);
            this.RawTotalDiscountStrata1Amount(undefined);
            this.RawTotalDiscountStrata2Amount(undefined);
            this.RawTotalDiscountStrata3Amount(undefined);
            this.RawTotalDiscountStrata4Amount(undefined);
            this.RawTotalDiscountStrata5Amount(undefined);
            this.RawTotalAddDiscountStrataAmount(undefined);
            this.RawTotalGross(undefined);
            this.RawTotalTax(undefined);
            this.RawTotal(undefined);
            this.TotalPrice(undefined);
            this.TotalDiscountStrata1Amount(undefined);
            this.TotalDiscountStrata2Amount(undefined);
            this.TotalDiscountStrata3Amount(undefined);
            this.TotalDiscountStrata4Amount(undefined);
            this.TotalDiscountStrata5Amount(undefined);
            this.TotalAddDiscountStrataAmount(undefined);
            this.TotalGross(undefined);
            this.TotalTax(undefined);
            this.Total(undefined);
            this.TotalWeight(undefined);
            this.TotalDimension(undefined);
            this.AddDiscountStrataReason(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.DocumentStatusReason(undefined);
            this.SFAInvoiceDocumentCode(undefined);
            this.PrintCount(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 05 May 2016 12:44:46
// Description   : vSalesOrderSampleDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:34:23
// Description   : vSalesOrderSampleSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.PriceDate = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();
        this.UnitGrossPrice = ko.observable();
        this.UnitPrice = ko.observable();
        this.DiscountStrata1Percentage = ko.observable();
        this.DiscountStrata2Percentage = ko.observable();
        this.DiscountStrata3Percentage = ko.observable();
        this.DiscountStrata4Percentage = ko.observable();
        this.DiscountStrata5Percentage = ko.observable();
        this.AddDiscountStrataPercentage = ko.observable();
        this.TaxPercentage = ko.observable();
        this.RawSubtotalGrossPrice = ko.observable();
        this.RawSubtotalPrice = ko.observable();
        this.RawSubtotalDiscountStrata1 = ko.observable();
        this.RawDiscountStrata1Amount = ko.observable();
        this.RawSubtotalDiscountStrata2 = ko.observable();
        this.RawDiscountStrata2Amount = ko.observable();
        this.RawSubtotalDiscountStrata3 = ko.observable();
        this.RawDiscountStrata3Amount = ko.observable();
        this.RawSubtotalDiscountStrata4 = ko.observable();
        this.RawDiscountStrata4Amount = ko.observable();
        this.RawSubtotalDiscountStrata5 = ko.observable();
        this.RawDiscountStrata5Amount = ko.observable();
        this.RawAddDiscountStrataAmount = ko.observable();
        this.RawSubtotalGross = ko.observable();
        this.RawSubtotalTax = ko.observable();
        this.RawSubtotal = ko.observable();
        this.SubtotalGrossPrice = ko.observable();
        this.SubtotalPrice = ko.observable();
        this.SubtotalDiscountStrata1 = ko.observable();
        this.DiscountStrata1Amount = ko.observable();
        this.SubtotalDiscountStrata2 = ko.observable();
        this.DiscountStrata2Amount = ko.observable();
        this.SubtotalDiscountStrata3 = ko.observable();
        this.DiscountStrata3Amount = ko.observable();
        this.SubtotalDiscountStrata4 = ko.observable();
        this.DiscountStrata4Amount = ko.observable();
        this.SubtotalDiscountStrata5 = ko.observable();
        this.DiscountStrata5Amount = ko.observable();
        this.AddDiscountStrataAmount = ko.observable();
        this.SubtotalGross = ko.observable();
        this.SubtotalTax = ko.observable();
        this.Subtotal = ko.observable();
        this.SubtotalWeight = ko.observable();
        this.SubtotalDimension = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSampleSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                PriceDate: this.PriceDate(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),
                UnitGrossPrice: this.UnitGrossPrice(),
                UnitPrice: this.UnitPrice(),
                DiscountStrata1Percentage: this.DiscountStrata1Percentage(),
                DiscountStrata2Percentage: this.DiscountStrata2Percentage(),
                DiscountStrata3Percentage: this.DiscountStrata3Percentage(),
                DiscountStrata4Percentage: this.DiscountStrata4Percentage(),
                DiscountStrata5Percentage: this.DiscountStrata5Percentage(),
                AddDiscountStrataPercentage: this.AddDiscountStrataPercentage(),
                TaxPercentage: this.TaxPercentage(),
                RawSubtotalGrossPrice: this.RawSubtotalGrossPrice(),
                RawSubtotalPrice: this.RawSubtotalPrice(),
                RawSubtotalDiscountStrata1: this.RawSubtotalDiscountStrata1(),
                RawDiscountStrata1Amount: this.RawDiscountStrata1Amount(),
                RawSubtotalDiscountStrata2: this.RawSubtotalDiscountStrata2(),
                RawDiscountStrata2Amount: this.RawDiscountStrata2Amount(),
                RawSubtotalDiscountStrata3: this.RawSubtotalDiscountStrata3(),
                RawDiscountStrata3Amount: this.RawDiscountStrata3Amount(),
                RawSubtotalDiscountStrata4: this.RawSubtotalDiscountStrata4(),
                RawDiscountStrata4Amount: this.RawDiscountStrata4Amount(),
                RawSubtotalDiscountStrata5: this.RawSubtotalDiscountStrata5(),
                RawDiscountStrata5Amount: this.RawDiscountStrata5Amount(),
                RawAddDiscountStrataAmount: this.RawAddDiscountStrataAmount(),
                RawSubtotalGross: this.RawSubtotalGross(),
                RawSubtotalTax: this.RawSubtotalTax(),
                RawSubtotal: this.RawSubtotal(),
                SubtotalGrossPrice: this.SubtotalGrossPrice(),
                SubtotalPrice: this.SubtotalPrice(),
                SubtotalDiscountStrata1: this.SubtotalDiscountStrata1(),
                DiscountStrata1Amount: this.DiscountStrata1Amount(),
                SubtotalDiscountStrata2: this.SubtotalDiscountStrata2(),
                DiscountStrata2Amount: this.DiscountStrata2Amount(),
                SubtotalDiscountStrata3: this.SubtotalDiscountStrata3(),
                DiscountStrata3Amount: this.DiscountStrata3Amount(),
                SubtotalDiscountStrata4: this.SubtotalDiscountStrata4(),
                DiscountStrata4Amount: this.DiscountStrata4Amount(),
                SubtotalDiscountStrata5: this.SubtotalDiscountStrata5(),
                DiscountStrata5Amount: this.DiscountStrata5Amount(),
                AddDiscountStrataAmount: this.AddDiscountStrataAmount(),
                SubtotalGross: this.SubtotalGross(),
                SubtotalTax: this.SubtotalTax(),
                Subtotal: this.Subtotal(),
                SubtotalWeight: this.SubtotalWeight(),
                SubtotalDimension: this.SubtotalDimension(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.PriceDate(data.PriceDate);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);
                this.UnitGrossPrice(data.UnitGrossPrice);
                this.UnitPrice(data.UnitPrice);
                this.DiscountStrata1Percentage(data.DiscountStrata1Percentage);
                this.DiscountStrata2Percentage(data.DiscountStrata2Percentage);
                this.DiscountStrata3Percentage(data.DiscountStrata3Percentage);
                this.DiscountStrata4Percentage(data.DiscountStrata4Percentage);
                this.DiscountStrata5Percentage(data.DiscountStrata5Percentage);
                this.AddDiscountStrataPercentage(data.AddDiscountStrataPercentage);
                this.TaxPercentage(data.TaxPercentage);
                this.RawSubtotalGrossPrice(data.RawSubtotalGrossPrice);
                this.RawSubtotalPrice(data.RawSubtotalPrice);
                this.RawSubtotalDiscountStrata1(data.RawSubtotalDiscountStrata1);
                this.RawDiscountStrata1Amount(data.RawDiscountStrata1Amount);
                this.RawSubtotalDiscountStrata2(data.RawSubtotalDiscountStrata2);
                this.RawDiscountStrata2Amount(data.RawDiscountStrata2Amount);
                this.RawSubtotalDiscountStrata3(data.RawSubtotalDiscountStrata3);
                this.RawDiscountStrata3Amount(data.RawDiscountStrata3Amount);
                this.RawSubtotalDiscountStrata4(data.RawSubtotalDiscountStrata4);
                this.RawDiscountStrata4Amount(data.RawDiscountStrata4Amount);
                this.RawSubtotalDiscountStrata5(data.RawSubtotalDiscountStrata5);
                this.RawDiscountStrata5Amount(data.RawDiscountStrata5Amount);
                this.RawAddDiscountStrataAmount(data.RawAddDiscountStrataAmount);
                this.RawSubtotalGross(data.RawSubtotalGross);
                this.RawSubtotalTax(data.RawSubtotalTax);
                this.RawSubtotal(data.RawSubtotal);
                this.SubtotalGrossPrice(data.SubtotalGrossPrice);
                this.SubtotalPrice(data.SubtotalPrice);
                this.SubtotalDiscountStrata1(data.SubtotalDiscountStrata1);
                this.DiscountStrata1Amount(data.DiscountStrata1Amount);
                this.SubtotalDiscountStrata2(data.SubtotalDiscountStrata2);
                this.DiscountStrata2Amount(data.DiscountStrata2Amount);
                this.SubtotalDiscountStrata3(data.SubtotalDiscountStrata3);
                this.DiscountStrata3Amount(data.DiscountStrata3Amount);
                this.SubtotalDiscountStrata4(data.SubtotalDiscountStrata4);
                this.DiscountStrata4Amount(data.DiscountStrata4Amount);
                this.SubtotalDiscountStrata5(data.SubtotalDiscountStrata5);
                this.DiscountStrata5Amount(data.DiscountStrata5Amount);
                this.AddDiscountStrataAmount(data.AddDiscountStrataAmount);
                this.SubtotalGross(data.SubtotalGross);
                this.SubtotalTax(data.SubtotalTax);
                this.Subtotal(data.Subtotal);
                this.SubtotalWeight(data.SubtotalWeight);
                this.SubtotalDimension(data.SubtotalDimension);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vSalesOrderSampleDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.PriceDate(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);
            this.UnitGrossPrice(undefined);
            this.UnitPrice(undefined);
            this.DiscountStrata1Percentage(undefined);
            this.DiscountStrata2Percentage(undefined);
            this.DiscountStrata3Percentage(undefined);
            this.DiscountStrata4Percentage(undefined);
            this.DiscountStrata5Percentage(undefined);
            this.AddDiscountStrataPercentage(undefined);
            this.TaxPercentage(undefined);
            this.RawSubtotalGrossPrice(undefined);
            this.RawSubtotalPrice(undefined);
            this.RawSubtotalDiscountStrata1(undefined);
            this.RawDiscountStrata1Amount(undefined);
            this.RawSubtotalDiscountStrata2(undefined);
            this.RawDiscountStrata2Amount(undefined);
            this.RawSubtotalDiscountStrata3(undefined);
            this.RawDiscountStrata3Amount(undefined);
            this.RawSubtotalDiscountStrata4(undefined);
            this.RawDiscountStrata4Amount(undefined);
            this.RawSubtotalDiscountStrata5(undefined);
            this.RawDiscountStrata5Amount(undefined);
            this.RawAddDiscountStrataAmount(undefined);
            this.RawSubtotalGross(undefined);
            this.RawSubtotalTax(undefined);
            this.RawSubtotal(undefined);
            this.SubtotalGrossPrice(undefined);
            this.SubtotalPrice(undefined);
            this.SubtotalDiscountStrata1(undefined);
            this.DiscountStrata1Amount(undefined);
            this.SubtotalDiscountStrata2(undefined);
            this.DiscountStrata2Amount(undefined);
            this.SubtotalDiscountStrata3(undefined);
            this.DiscountStrata3Amount(undefined);
            this.SubtotalDiscountStrata4(undefined);
            this.DiscountStrata4Amount(undefined);
            this.SubtotalDiscountStrata5(undefined);
            this.DiscountStrata5Amount(undefined);
            this.AddDiscountStrataAmount(undefined);
            this.SubtotalGross(undefined);
            this.SubtotalTax(undefined);
            this.Subtotal(undefined);
            this.SubtotalWeight(undefined);
            this.SubtotalDimension(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 15 May 2016 20:36:58
// Description   : vSalesOrderSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.PriceDate = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();
        this.UnitGrossPrice = ko.observable();
        this.UnitPrice = ko.observable();
        this.DiscountStrata1Percentage = ko.observable();
        this.DiscountStrata2Percentage = ko.observable();
        this.DiscountStrata3Percentage = ko.observable();
        this.DiscountStrata4Percentage = ko.observable();
        this.DiscountStrata5Percentage = ko.observable();
        this.AddDiscountStrataPercentage = ko.observable();
        this.TaxPercentage = ko.observable();
        this.RawSubtotalGrossPrice = ko.observable();
        this.RawSubtotalPrice = ko.observable();
        this.RawSubtotalDiscountStrata1 = ko.observable();
        this.RawDiscountStrata1Amount = ko.observable();
        this.RawSubtotalDiscountStrata2 = ko.observable();
        this.RawDiscountStrata2Amount = ko.observable();
        this.RawSubtotalDiscountStrata3 = ko.observable();
        this.RawDiscountStrata3Amount = ko.observable();
        this.RawSubtotalDiscountStrata4 = ko.observable();
        this.RawDiscountStrata4Amount = ko.observable();
        this.RawSubtotalDiscountStrata5 = ko.observable();
        this.RawDiscountStrata5Amount = ko.observable();
        this.RawAddDiscountStrataAmount = ko.observable();
        this.RawSubtotalGross = ko.observable();
        this.RawSubtotalTax = ko.observable();
        this.RawSubtotal = ko.observable();
        this.SubtotalGrossPrice = ko.observable();
        this.SubtotalPrice = ko.observable();
        this.SubtotalDiscountStrata1 = ko.observable();
        this.DiscountStrata1Amount = ko.observable();
        this.SubtotalDiscountStrata2 = ko.observable();
        this.DiscountStrata2Amount = ko.observable();
        this.SubtotalDiscountStrata3 = ko.observable();
        this.DiscountStrata3Amount = ko.observable();
        this.SubtotalDiscountStrata4 = ko.observable();
        this.DiscountStrata4Amount = ko.observable();
        this.SubtotalDiscountStrata5 = ko.observable();
        this.DiscountStrata5Amount = ko.observable();
        this.AddDiscountStrataAmount = ko.observable();
        this.SubtotalGross = ko.observable();
        this.SubtotalTax = ko.observable();
        this.Subtotal = ko.observable();
        this.SubtotalWeight = ko.observable();
        this.SubtotalDimension = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                PriceDate: this.PriceDate(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),
                UnitGrossPrice: this.UnitGrossPrice(),
                UnitPrice: this.UnitPrice(),
                DiscountStrata1Percentage: this.DiscountStrata1Percentage(),
                DiscountStrata2Percentage: this.DiscountStrata2Percentage(),
                DiscountStrata3Percentage: this.DiscountStrata3Percentage(),
                DiscountStrata4Percentage: this.DiscountStrata4Percentage(),
                DiscountStrata5Percentage: this.DiscountStrata5Percentage(),
                AddDiscountStrataPercentage: this.AddDiscountStrataPercentage(),
                TaxPercentage: this.TaxPercentage(),
                RawSubtotalGrossPrice: this.RawSubtotalGrossPrice(),
                RawSubtotalPrice: this.RawSubtotalPrice(),
                RawSubtotalDiscountStrata1: this.RawSubtotalDiscountStrata1(),
                RawDiscountStrata1Amount: this.RawDiscountStrata1Amount(),
                RawSubtotalDiscountStrata2: this.RawSubtotalDiscountStrata2(),
                RawDiscountStrata2Amount: this.RawDiscountStrata2Amount(),
                RawSubtotalDiscountStrata3: this.RawSubtotalDiscountStrata3(),
                RawDiscountStrata3Amount: this.RawDiscountStrata3Amount(),
                RawSubtotalDiscountStrata4: this.RawSubtotalDiscountStrata4(),
                RawDiscountStrata4Amount: this.RawDiscountStrata4Amount(),
                RawSubtotalDiscountStrata5: this.RawSubtotalDiscountStrata5(),
                RawDiscountStrata5Amount: this.RawDiscountStrata5Amount(),
                RawAddDiscountStrataAmount: this.RawAddDiscountStrataAmount(),
                RawSubtotalGross: this.RawSubtotalGross(),
                RawSubtotalTax: this.RawSubtotalTax(),
                RawSubtotal: this.RawSubtotal(),
                SubtotalGrossPrice: this.SubtotalGrossPrice(),
                SubtotalPrice: this.SubtotalPrice(),
                SubtotalDiscountStrata1: this.SubtotalDiscountStrata1(),
                DiscountStrata1Amount: this.DiscountStrata1Amount(),
                SubtotalDiscountStrata2: this.SubtotalDiscountStrata2(),
                DiscountStrata2Amount: this.DiscountStrata2Amount(),
                SubtotalDiscountStrata3: this.SubtotalDiscountStrata3(),
                DiscountStrata3Amount: this.DiscountStrata3Amount(),
                SubtotalDiscountStrata4: this.SubtotalDiscountStrata4(),
                DiscountStrata4Amount: this.DiscountStrata4Amount(),
                SubtotalDiscountStrata5: this.SubtotalDiscountStrata5(),
                DiscountStrata5Amount: this.DiscountStrata5Amount(),
                AddDiscountStrataAmount: this.AddDiscountStrataAmount(),
                SubtotalGross: this.SubtotalGross(),
                SubtotalTax: this.SubtotalTax(),
                Subtotal: this.Subtotal(),
                SubtotalWeight: this.SubtotalWeight(),
                SubtotalDimension: this.SubtotalDimension(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.PriceDate(data.PriceDate);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);
                this.UnitGrossPrice(data.UnitGrossPrice);
                this.UnitPrice(data.UnitPrice);
                this.DiscountStrata1Percentage(data.DiscountStrata1Percentage);
                this.DiscountStrata2Percentage(data.DiscountStrata2Percentage);
                this.DiscountStrata3Percentage(data.DiscountStrata3Percentage);
                this.DiscountStrata4Percentage(data.DiscountStrata4Percentage);
                this.DiscountStrata5Percentage(data.DiscountStrata5Percentage);
                this.AddDiscountStrataPercentage(data.AddDiscountStrataPercentage);
                this.TaxPercentage(data.TaxPercentage);
                this.RawSubtotalGrossPrice(data.RawSubtotalGrossPrice);
                this.RawSubtotalPrice(data.RawSubtotalPrice);
                this.RawSubtotalDiscountStrata1(data.RawSubtotalDiscountStrata1);
                this.RawDiscountStrata1Amount(data.RawDiscountStrata1Amount);
                this.RawSubtotalDiscountStrata2(data.RawSubtotalDiscountStrata2);
                this.RawDiscountStrata2Amount(data.RawDiscountStrata2Amount);
                this.RawSubtotalDiscountStrata3(data.RawSubtotalDiscountStrata3);
                this.RawDiscountStrata3Amount(data.RawDiscountStrata3Amount);
                this.RawSubtotalDiscountStrata4(data.RawSubtotalDiscountStrata4);
                this.RawDiscountStrata4Amount(data.RawDiscountStrata4Amount);
                this.RawSubtotalDiscountStrata5(data.RawSubtotalDiscountStrata5);
                this.RawDiscountStrata5Amount(data.RawDiscountStrata5Amount);
                this.RawAddDiscountStrataAmount(data.RawAddDiscountStrataAmount);
                this.RawSubtotalGross(data.RawSubtotalGross);
                this.RawSubtotalTax(data.RawSubtotalTax);
                this.RawSubtotal(data.RawSubtotal);
                this.SubtotalGrossPrice(data.SubtotalGrossPrice);
                this.SubtotalPrice(data.SubtotalPrice);
                this.SubtotalDiscountStrata1(data.SubtotalDiscountStrata1);
                this.DiscountStrata1Amount(data.DiscountStrata1Amount);
                this.SubtotalDiscountStrata2(data.SubtotalDiscountStrata2);
                this.DiscountStrata2Amount(data.DiscountStrata2Amount);
                this.SubtotalDiscountStrata3(data.SubtotalDiscountStrata3);
                this.DiscountStrata3Amount(data.DiscountStrata3Amount);
                this.SubtotalDiscountStrata4(data.SubtotalDiscountStrata4);
                this.DiscountStrata4Amount(data.DiscountStrata4Amount);
                this.SubtotalDiscountStrata5(data.SubtotalDiscountStrata5);
                this.DiscountStrata5Amount(data.DiscountStrata5Amount);
                this.AddDiscountStrataAmount(data.AddDiscountStrataAmount);
                this.SubtotalGross(data.SubtotalGross);
                this.SubtotalTax(data.SubtotalTax);
                this.Subtotal(data.Subtotal);
                this.SubtotalWeight(data.SubtotalWeight);
                this.SubtotalDimension(data.SubtotalDimension);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vSalesOrderDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.PriceDate(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);
            this.UnitGrossPrice(undefined);
            this.UnitPrice(undefined);
            this.DiscountStrata1Percentage(undefined);
            this.DiscountStrata2Percentage(undefined);
            this.DiscountStrata3Percentage(undefined);
            this.DiscountStrata4Percentage(undefined);
            this.DiscountStrata5Percentage(undefined);
            this.AddDiscountStrataPercentage(undefined);
            this.TaxPercentage(undefined);
            this.RawSubtotalGrossPrice(undefined);
            this.RawSubtotalPrice(undefined);
            this.RawSubtotalDiscountStrata1(undefined);
            this.RawDiscountStrata1Amount(undefined);
            this.RawSubtotalDiscountStrata2(undefined);
            this.RawDiscountStrata2Amount(undefined);
            this.RawSubtotalDiscountStrata3(undefined);
            this.RawDiscountStrata3Amount(undefined);
            this.RawSubtotalDiscountStrata4(undefined);
            this.RawDiscountStrata4Amount(undefined);
            this.RawSubtotalDiscountStrata5(undefined);
            this.RawDiscountStrata5Amount(undefined);
            this.RawAddDiscountStrataAmount(undefined);
            this.RawSubtotalGross(undefined);
            this.RawSubtotalTax(undefined);
            this.RawSubtotal(undefined);
            this.SubtotalGrossPrice(undefined);
            this.SubtotalPrice(undefined);
            this.SubtotalDiscountStrata1(undefined);
            this.DiscountStrata1Amount(undefined);
            this.SubtotalDiscountStrata2(undefined);
            this.DiscountStrata2Amount(undefined);
            this.SubtotalDiscountStrata3(undefined);
            this.DiscountStrata3Amount(undefined);
            this.SubtotalDiscountStrata4(undefined);
            this.DiscountStrata4Amount(undefined);
            this.SubtotalDiscountStrata5(undefined);
            this.DiscountStrata5Amount(undefined);
            this.AddDiscountStrataAmount(undefined);
            this.SubtotalGross(undefined);
            this.SubtotalTax(undefined);
            this.Subtotal(undefined);
            this.SubtotalWeight(undefined);
            this.SubtotalDimension(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 May 2016 09:29:48
// Description   : vSalesOrderSwapViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSwapViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.SalesmanID = ko.observable();
        this.SalesmanCode = ko.observable();
        this.SalesmanName = ko.observable();
        this.Salesman = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.CustomerID = ko.observable();
        this.CustomerCode = ko.observable();
        this.CustomerName = ko.observable();
        this.Customer = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.AttachmentFile = ko.observable();
        this.DODocumentID = ko.observable();
        this.DODocumentCode = ko.observable();
        this.DOShipmentDate = ko.observable();
        this.DOReceivedDate = ko.observable();
        this.DOPrintedCount = ko.observable();
        this.DOLastPrintedDate = ko.observable();
        this.TotalWeight = ko.observable();
        this.TotalDimension = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.DocumentStatusReason = ko.observable();
        this.SFAInvoiceDocumentCode = ko.observable();
        this.PrintCount = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSwapViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                SalesmanID: this.SalesmanID(),
                SalesmanCode: this.SalesmanCode(),
                SalesmanName: this.SalesmanName(),
                Salesman: this.Salesman(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                CustomerID: this.CustomerID(),
                CustomerCode: this.CustomerCode(),
                CustomerName: this.CustomerName(),
                Customer: this.Customer(),
                ReferenceNumber: this.ReferenceNumber(),
                AttachmentFile: this.AttachmentFile(),
                DODocumentID: this.DODocumentID(),
                DODocumentCode: this.DODocumentCode(),
                DOShipmentDate: this.DOShipmentDate(),
                DOReceivedDate: this.DOReceivedDate(),
                DOPrintedCount: this.DOPrintedCount(),
                DOLastPrintedDate: this.DOLastPrintedDate(),
                TotalWeight: this.TotalWeight(),
                TotalDimension: this.TotalDimension(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                DocumentStatusReason: this.DocumentStatusReason(),
                SFAInvoiceDocumentCode: this.SFAInvoiceDocumentCode(),
                PrintCount: this.PrintCount(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.SalesmanID(data.SalesmanID);
                this.SalesmanCode(data.SalesmanCode);
                this.SalesmanName(data.SalesmanName);
                this.Salesman(data.Salesman);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.CustomerID(data.CustomerID);
                this.CustomerCode(data.CustomerCode);
                this.CustomerName(data.CustomerName);
                this.Customer(data.Customer);
                this.ReferenceNumber(data.ReferenceNumber);
                this.AttachmentFile(data.AttachmentFile);
                this.DODocumentID(data.DODocumentID);
                this.DODocumentCode(data.DODocumentCode);
                this.DOShipmentDate(data.DOShipmentDate);
                this.DOReceivedDate(data.DOReceivedDate);
                this.DOPrintedCount(data.DOPrintedCount);
                this.DOLastPrintedDate(data.DOLastPrintedDate);
                this.TotalWeight(data.TotalWeight);
                this.TotalDimension(data.TotalDimension);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.DocumentStatusReason(data.DocumentStatusReason);
                this.PrintCount(data.PrintCount);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.SalesmanID(undefined);
            this.SalesmanCode(undefined);
            this.SalesmanName(undefined);
            this.Salesman(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.CustomerID(undefined);
            this.CustomerCode(undefined);
            this.CustomerName(undefined);
            this.Customer(undefined);
            this.ReferenceNumber(undefined);
            this.AttachmentFile(undefined);
            this.DODocumentID(undefined);
            this.DODocumentCode(undefined);
            this.DOShipmentDate(undefined);
            this.DOReceivedDate(undefined);
            this.DOPrintedCount(undefined);
            this.DOLastPrintedDate(undefined);
            this.TotalWeight(undefined);
            this.TotalDimension(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.DocumentStatusReason(undefined);
            this.SFAInvoiceDocumentCode(undefined);
            this.PrintCount(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 May 2016 09:30:43
// Description   : vSalesOrderSwapDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSwapDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSwapDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 May 2016 09:30:13
// Description   : vSalesOrderSwapSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyOrderConv = ko.observable();
        this.QtyOrder = ko.observable();
        this.SubtotalWeight = ko.observable();
        this.SubtotalDimension = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSalesOrderSwapSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyOrderConv: this.QtyOrderConv(),
                QtyOrder: this.QtyOrder(),
                SubtotalWeight: this.SubtotalWeight(),
                SubtotalDimension: this.SubtotalDimension(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyOrderConv(data.QtyOrderConv);
                this.QtyOrder(data.QtyOrder);
                this.SubtotalWeight(data.SubtotalWeight);
                this.SubtotalDimension(data.SubtotalDimension);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vSalesOrderSwapDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyOrderConv(undefined);
            this.QtyOrder(undefined);
            this.SubtotalWeight(undefined);
            this.SubtotalDimension(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 20 Mar 2016 01:40:04
// Description   : vSiteViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSiteViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Site = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.DistributionTypeID = ko.observable();
        this.DistributionTypeName = ko.observable();
        this.IsLotNumberEntryRequired = ko.observable();
        this.Address1 = ko.observable();
        this.Address2 = ko.observable();
        this.Address3 = ko.observable();
        this.Address = ko.observable();
        this.City = ko.observable();
        this.StateProvince = ko.observable();
        this.CountryID = ko.observable();
        this.CountryName = ko.observable();
        this.ZipCode = ko.observable();
        this.Phone1 = ko.observable();
        this.Phone2 = ko.observable();
        this.Fax = ko.observable();
        this.Email = ko.observable();
        this.AdditionalInfo1 = ko.observable();
        this.AdditionalInfo2 = ko.observable();
        this.AdditionalInfo3 = ko.observable();
        this.AdditionalInfo4 = ko.observable();
        this.AdditionalInfo5 = ko.observable();
        this.AdditionalInfo6 = ko.observable();
        this.AdditionalInfo7 = ko.observable();
        this.AdditionalInfo8 = ko.observable();
        this.AdditionalInfo9 = ko.observable();
        this.AdditionalInfo10 = ko.observable();        
        this.TaxNumber = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.SAPCode = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.ChildProducts = ko.observableArray([]);
        this.ChildWarehouses = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSiteViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Site: this.Site(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                DistributionTypeID: this.DistributionTypeID(),
                DistributionTypeName: this.DistributionTypeName(),
                IsLotNumberEntryRequired: this.IsLotNumberEntryRequired(),
                Address1: this.Address1(),
                Address2: this.Address2(),
                Address3: this.Address3(),
                Address: this.Address(),
                City: this.City(),
                StateProvince: this.StateProvince(),
                CountryID: this.CountryID(),
                CountryName: this.CountryName(),
                ZipCode: this.ZipCode(),
                Phone1: this.Phone1(),
                Phone2: this.Phone2(),
                Fax: this.Fax(),
                Email: this.Email(),
                AdditionalInfo1: this.AdditionalInfo1(),
                AdditionalInfo2: this.AdditionalInfo2(),
                AdditionalInfo3: this.AdditionalInfo3(),
                AdditionalInfo4: this.AdditionalInfo4(),
                AdditionalInfo5: this.AdditionalInfo5(),
                AdditionalInfo6: this.AdditionalInfo6(),
                AdditionalInfo7: this.AdditionalInfo7(),
                AdditionalInfo8: this.AdditionalInfo8(),
                AdditionalInfo9: this.AdditionalInfo9(),
                AdditionalInfo10: this.AdditionalInfo10(),
                TaxNumber: this.TaxNumber(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                SAPCode: this.SAPCode(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),                

                ChildProducts: ko.toJS(this.ChildProducts()),
                ChildWarehouses: ko.toJS(this.ChildWarehouses())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Site(data.Site);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.DistributionTypeID(data.DistributionTypeID);
                this.DistributionTypeName(data.DistributionTypeName);
                this.IsLotNumberEntryRequired(data.IsLotNumberEntryRequired);
                this.Address1(data.Address1);
                this.Address2(data.Address2);
                this.Address3(data.Address3);
                this.Address(data.Address);
                this.City(data.City);
                this.StateProvince(data.StateProvince);
                this.CountryID(data.CountryID);
                this.CountryName(data.CountryName);
                this.ZipCode(data.ZipCode);
                this.Phone1(data.Phone1);
                this.Phone2(data.Phone2);
                this.Fax(data.Fax);
                this.Email(data.Email);
                this.AdditionalInfo1(data.AdditionalInfo1);
                this.AdditionalInfo2(data.AdditionalInfo2);
                this.AdditionalInfo3(data.AdditionalInfo3);
                this.AdditionalInfo4(data.AdditionalInfo4);
                this.AdditionalInfo5(data.AdditionalInfo5);
                this.AdditionalInfo6(data.AdditionalInfo6);
                this.AdditionalInfo7(data.AdditionalInfo7);
                this.AdditionalInfo8(data.AdditionalInfo8);
                this.AdditionalInfo9(data.AdditionalInfo9);
                this.AdditionalInfo10(data.AdditionalInfo10);
                this.TaxNumber(data.TaxNumber);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.SAPCode(data.SAPCode);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);
                
                if (data.ChildProducts) {
                    for (var i = 0; i < data.ChildProducts.length; i++)
                        this.ChildProducts.push(new Dismoyo_Ciptoning_Client.vSiteProductViewModel(
                            data.ChildProducts[i]));
                }

                if (data.ChildWarehouses) {
                    for (var i = 0; i < data.ChildWarehouses.length; i++)
                        this.ChildWarehouses.push(new Dismoyo_Ciptoning_Client.vWarehouseViewModel(
                            data.ChildWarehouses[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Site(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.DistributionTypeID(undefined);
            this.DistributionTypeName(undefined);
            this.IsLotNumberEntryRequired(undefined);
            this.Address1(undefined);
            this.Address2(undefined);
            this.Address3(undefined);
            this.Address(undefined);
            this.City(undefined);
            this.StateProvince(undefined);
            this.CountryID(undefined);
            this.CountryName(undefined);
            this.ZipCode(undefined);
            this.Phone1(undefined);
            this.Phone2(undefined);
            this.Fax(undefined);
            this.Email(undefined);
            this.AddtionalInfo1(undefined);
            this.AddtionalInfo2(undefined);
            this.AddtionalInfo3(undefined);
            this.AddtionalInfo4(undefined);
            this.AddtionalInfo5(undefined);
            this.AddtionalInfo6(undefined);
            this.AddtionalInfo7(undefined);
            this.AddtionalInfo8(undefined);
            this.AddtionalInfo9(undefined);
            this.AddtionalInfo10(undefined);
            this.TaxNumber(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.SAPCode(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);
            
            this.ChildProducts(undefined);
            this.ChildWarehouses(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 21 Apr 2016 07::10:15
// Description   : vSiteAdditionalInfoViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSiteAdditionalInfoViewModel = function (data) {
        this.SiteID = ko.observable();
        this.AdditionalInfo1 = ko.observable();
        this.AdditionalInfo2 = ko.observable();
        this.AdditionalInfo3 = ko.observable();
        this.AdditionalInfo4 = ko.observable();
        this.AdditionalInfo5 = ko.observable();
        this.AdditionalInfo6 = ko.observable();
        this.AdditionalInfo7 = ko.observable();
        this.AdditionalInfo8 = ko.observable();
        this.AdditionalInfo9 = ko.observable();
        this.AdditionalInfo10 = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSiteAdditionalInfoViewModel.prototype, {
        toJS: function () {
            return {
                SiteID: this.SiteID(),
                AdditionalInfo1: this.AdditionalInfo1(),
                AdditionalInfo2: this.AdditionalInfo2(),
                AdditionalInfo3: this.AdditionalInfo3(),
                AdditionalInfo4: this.AdditionalInfo4(),
                AdditionalInfo5: this.AdditionalInfo5(),
                AdditionalInfo6: this.AdditionalInfo6(),
                AdditionalInfo7: this.AdditionalInfo7(),
                AdditionalInfo8: this.AdditionalInfo8(),
                AdditionalInfo9: this.AdditionalInfo9(),
                AdditionalInfo10: this.AdditionalInfo10()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SiteID(data.SiteID);
                this.AdditionalInfo1(data.AdditionalInfo1);
                this.AdditionalInfo2(data.AdditionalInfo2);
                this.AdditionalInfo3(data.AdditionalInfo3);
                this.AdditionalInfo4(data.AdditionalInfo4);
                this.AdditionalInfo5(data.AdditionalInfo5);
                this.AdditionalInfo6(data.AdditionalInfo6);
                this.AdditionalInfo7(data.AdditionalInfo7);
                this.AdditionalInfo8(data.AdditionalInfo8);
                this.AdditionalInfo9(data.AdditionalInfo9);
                this.AdditionalInfo10(data.AdditionalInfo10);
            }
        },

        clear: function () {
            this.SiteID(undefined);
            this.AdditionalInfo1(undefined);
            this.AdditionalInfo2(undefined);
            this.AdditionalInfo3(undefined);
            this.AdditionalInfo4(undefined);
            this.AdditionalInfo5(undefined);
            this.AdditionalInfo6(undefined);
            this.AdditionalInfo7(undefined);
            this.AdditionalInfo8(undefined);
            this.AdditionalInfo9(undefined);
            this.AdditionalInfo10(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 13:37:23
// Description   : vSiteProductViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSiteProductViewModel = function (data) {
        this.SiteID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        
        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSiteProductViewModel.prototype, {
        toJS: function () {
            return {
                SiteID: this.SiteID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.SiteID(data.SiteID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.SiteID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:44:40
// Description   : vStockChangesViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockChangesViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.PIC = ko.observable();
        this.OldItemStatusID = ko.observable();
        this.OldItemStatusName = ko.observable();
        this.NewItemStatusID = ko.observable();
        this.NewItemStatusName = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.AttachmentFile = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockChangesViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                PIC: this.PIC(),
                OldItemStatusID: this.OldItemStatusID(),
                OldItemStatusName: this.OldItemStatusName(),
                NewItemStatusID: this.NewItemStatusID(),
                NewItemStatusName: this.NewItemStatusName(),
                ReferenceNumber: this.ReferenceNumber(),
                AttachmentFile: this.AttachmentFile(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            }
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.PIC(data.PIC);
                this.OldItemStatusID(data.OldItemStatusID),
                this.OldItemStatusName(data.OldItemStatusName),
                this.NewItemStatusID(data.NewItemStatusID),
                this.NewItemStatusName(data.NewItemStatusName),
                this.ReferenceNumber(data.ReferenceNumber);
                this.AttachmentFile(data.AttachmentFile);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.PIC(undefined);
            this.OldItemStatusID(undefined),
            this.OldItemStatusName(undefined),
            this.NewItemStatusID(undefined),
            this.NewItemStatusName(undefined),
            this.ReferenceNumber(undefined);
            this.AttachmentFile(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:22
// Description   : vStockChangesDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockChangesDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyChangesConv = ko.observable();
        this.QtyChanges = ko.observable();
        
        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockChangesDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyChangesConv: this.QtyChangesConv(),
                QtyChanges: this.QtyChanges(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyChangesConv(data.QtyChangesConv);
                this.QtyChanges(data.QtyChanges);
                
                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyChangesConv(undefined);
            this.QtyChanges(undefined);
            
            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:41
// Description   : vStockChangesSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyChangesConv = ko.observable();
        this.QtyChanges = ko.observable();
        
        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockChangesSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyChangesConv: this.QtyChangesConv(),
                QtyChanges: this.QtyChanges(),
                
                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyChangesConv(data.QtyChangesConv);
                this.QtyChanges(data.QtyChanges);
                
                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vStockChangesDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyChangesConv(undefined);
            this.QtyChanges(undefined);
            
            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:44:40
// Description   : vStockDisposalViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockDisposalViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.PIC = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.AttachmentFile = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockDisposalViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                PIC: this.PIC(),
                ReferenceNumber: this.ReferenceNumber(),
                AttachmentFile: this.AttachmentFile(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            }
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.PIC(data.PIC);
                this.ReferenceNumber(data.ReferenceNumber);
                this.AttachmentFile(data.AttachmentFile);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.PIC(undefined);
            this.ReferenceNumber(undefined);
            this.AttachmentFile(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:22
// Description   : vStockDisposalDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockDisposalDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyDisposalConv = ko.observable();
        this.QtyDisposal = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockDisposalDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyDisposalConv: this.QtyDisposalConv(),
                QtyDisposal: this.QtyDisposal(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyDisposalConv(data.QtyDisposalConv);
                this.QtyDisposal(data.QtyDisposal);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyDisposalConv(undefined);
            this.QtyDisposal(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:41
// Description   : vStockDisposalSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyDisposalConv = ko.observable();
        this.QtyDisposal = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockDisposalSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyDisposalConv: this.QtyDisposalConv(),
                QtyDisposal: this.QtyDisposal(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyDisposalConv(data.QtyDisposalConv);
                this.QtyDisposal(data.QtyDisposal);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vStockDisposalDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyDisposalConv(undefined);
            this.QtyDisposal(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 03 Apr 2016 07:00:14
// Description   : vStockOnHandAllViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel = function (data) {
        this.WarehouseID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.QtyPeriodOnHandGood = ko.observable();
        this.QtyPeriodOnHandHold = ko.observable();
        this.QtyPeriodOnHandBad = ko.observable();
        this.QtyTransactionGood = ko.observable();
        this.QtyTransactionHold = ko.observable();
        this.QtyTransactionBad = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotExpiredDate = ko.observable();
        this.ProductLot = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.IsProductLotCodeDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockOnHandAllViewModel.prototype, {
        toJS: function () {
            return {
                WarehouseID: this.WarehouseID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                QtyPeriodOnHandGood: this.QtyPeriodOnHandGood(),
                QtyPeriodOnHandHold: this.QtyPeriodOnHandHold(),
                QtyPeriodOnHandBad: this.QtyPeriodOnHandBad(),
                QtyTransactionGood: this.QtyTransactionGood(),
                QtyTransactionHold: this.QtyTransactionHold(),
                QtyTransactionBad: this.QtyTransactionBad(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotExpiredDate: this.ProductLotExpiredDate(),
                ProductLot: this.ProductLot(),
                ProductLotStatusID: this.ProductLotStatusID(),
                IsProductLotCodeDeleted: this.IsProductLotCodeDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.WarehouseID(data.WarehouseID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.QtyPeriodOnHandGood(data.QtyPeriodOnHandGood);
                this.QtyPeriodOnHandHold(data.QtyPeriodOnHandHold);
                this.QtyPeriodOnHandBad(data.QtyPeriodOnHandBad);
                this.QtyTransactionGood(data.QtyTransactionGood);
                this.QtyTransactionHold(data.QtyTransactionHold);
                this.QtyTransactionBad(data.QtyTransactionBad);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotExpiredDate(data.ProductLotExpiredDate);
                this.ProductLot(data.ProductLot);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.IsProductLotCodeDeleted(data.IsProductLotCodeDeleted);
            }
        },

        clear: function () {
            this.WarehouseID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.QtyPeriodOnHandGood(undefined);
            this.QtyPeriodOnHandHold(undefined);
            this.QtyPeriodOnHandBad(undefined);
            this.QtyTransactionGood(undefined);
            this.QtyTransactionHold(undefined);
            this.QtyTransactionBad(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotExpiredDate(undefined);
            this.ProductLot(undefined);
            this.ProductLotStatusID(undefined);
            this.IsProductLotCodeDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 03 Apr 2016 07:00:37
// Description   : vStockOnHandAvailableViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel = function (data) {
        this.WarehouseID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.QtyPeriodOnHandGood = ko.observable();
        this.QtyPeriodOnHandHold = ko.observable();
        this.QtyPeriodOnHandBad = ko.observable();
        this.QtyTransactionGood = ko.observable();
        this.QtyTransactionHold = ko.observable();
        this.QtyTransactionBad = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotExpiredDate = ko.observable();
        this.ProductLot = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.IsProductLotCodeDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockOnHandAvailableViewModel.prototype, {
        toJS: function () {
            return {
                WarehouseID: this.WarehouseID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                QtyPeriodOnHandGood: this.QtyPeriodOnHandGood(),
                QtyPeriodOnHandHold: this.QtyPeriodOnHandHold(),
                QtyPeriodOnHandBad: this.QtyPeriodOnHandBad(),
                QtyTransactionGood: this.QtyTransactionGood(),
                QtyTransactionHold: this.QtyTransactionHold(),
                QtyTransactionBad: this.QtyTransactionBad(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotExpiredDate: this.ProductLotExpiredDate(),
                ProductLot: this.ProductLot(),
                ProductLotStatusID: this.ProductLotStatusID(),
                IsProductLotCodeDeleted: this.IsProductLotCodeDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.WarehouseID(data.WarehouseID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.QtyPeriodOnHandGood(data.QtyPeriodOnHandGood);
                this.QtyPeriodOnHandHold(data.QtyPeriodOnHandHold);
                this.QtyPeriodOnHandBad(data.QtyPeriodOnHandBad);
                this.QtyTransactionGood(data.QtyTransactionGood);
                this.QtyTransactionHold(data.QtyTransactionHold);
                this.QtyTransactionBad(data.QtyTransactionBad);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotExpiredDate(data.ProductLotExpiredDate);
                this.ProductLot(data.ProductLot);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.IsProductLotCodeDeleted(data.IsProductLotCodeDeleted);
            }
        },

        clear: function () {
            this.WarehouseID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.QtyPeriodOnHandGood(undefined);
            this.QtyPeriodOnHandHold(undefined);
            this.QtyPeriodOnHandBad(undefined);
            this.QtyTransactionGood(undefined);
            this.QtyTransactionHold(undefined);
            this.QtyTransactionBad(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotExpiredDate(undefined);
            this.ProductLot(undefined);
            this.ProductLotStatusID(undefined);
            this.IsProductLotCodeDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:44:40
// Description   : vStockOpnameViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockOpnameViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.PIC = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.AttachmentFile = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockOpnameViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                PIC: this.PIC(),
                ReferenceNumber: this.ReferenceNumber(),
                AttachmentFile: this.AttachmentFile(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            }
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.PIC(data.PIC);
                this.ReferenceNumber(data.ReferenceNumber);
                this.AttachmentFile(data.AttachmentFile);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.PIC(undefined);
            this.ReferenceNumber(undefined);
            this.AttachmentFile(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:22
// Description   : vStockOpnameDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.QtyConvLGood = ko.observable();
        this.QtyConvMGood = ko.observable();
        this.QtyConvSGood = ko.observable();
        this.QtyConvLHold = ko.observable();
        this.QtyConvMHold = ko.observable();
        this.QtyConvSHold = ko.observable();
        this.QtyConvLBad = ko.observable();
        this.QtyConvMBad = ko.observable();
        this.QtyConvSBad = ko.observable();
        this.QtyGood = ko.observable();
        this.QtyHold = ko.observable();
        this.QtyBad = ko.observable();
        this.QtyOpnameConvGood = ko.observable();
        this.QtyOpnameConvHold = ko.observable();
        this.QtyOpnameConvBad = ko.observable();
        this.QtyOpnameGood = ko.observable();
        this.QtyOpnameHold = ko.observable();
        this.QtyOpnameBad = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                QtyConvLGood: this.QtyConvLGood(),
                QtyConvMGood: this.QtyConvMGood(),
                QtyConvSGood: this.QtyConvSGood(),
                QtyConvLHold: this.QtyConvLHold(),
                QtyConvMHold: this.QtyConvMHold(),
                QtyConvSHold: this.QtyConvSHold(),
                QtyConvLBad: this.QtyConvLBad(),
                QtyConvMBad: this.QtyConvMBad(),
                QtyConvSBad: this.QtyConvSBad(),
                QtyGood: this.QtyGood(),
                QtyHold: this.QtyHold(),
                QtyBad: this.QtyBad(),
                QtyOpnameConvGood: this.QtyOpnameConvGood(),
                QtyOpnameConvHold: this.QtyOpnameConvHold(),
                QtyOpnameConvBad: this.QtyOpnameConvBad(),
                QtyOpnameGood: this.QtyOpnameGood(),
                QtyOpnameHold: this.QtyOpnameHold(),
                QtyOpnameBad: this.QtyOpnameBad(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.QtyConvLGood(data.QtyConvLGood);
                this.QtyConvMGood(data.QtyConvMGood);
                this.QtyConvSGood(data.QtyConvSGood);
                this.QtyConvLHold(data.QtyConvLHold);
                this.QtyConvMHold(data.QtyConvMHold);
                this.QtyConvSHold(data.QtyConvSHold);
                this.QtyConvLBad(data.QtyConvLBad);
                this.QtyConvMBad(data.QtyConvMBad);
                this.QtyConvSBad(data.QtyConvSBad);
                this.QtyGood(data.QtyGood);
                this.QtyHold(data.QtyHold);
                this.QtyBad(data.QtyBad);
                this.QtyOpnameConvGood(data.QtyOpnameConvGood);
                this.QtyOpnameConvHold(data.QtyOpnameConvHold);
                this.QtyOpnameConvBad(data.QtyOpnameConvBad);
                this.QtyOpnameGood(data.QtyOpnameGood);
                this.QtyOpnameHold(data.QtyOpnameHold);
                this.QtyOpnameBad(data.QtyOpnameBad);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.QtyConvLGood(undefined);
            this.QtyConvMGood(undefined);
            this.QtyConvSGood(undefined);
            this.QtyConvLHold(undefined);
            this.QtyConvMHold(undefined);
            this.QtyConvSHold(undefined);
            this.QtyConvLBad(undefined);
            this.QtyConvMBad(undefined);
            this.QtyConvSBad(undefined);
            this.QtyGood(undefined);
            this.QtyHold(undefined);
            this.QtyBad(undefined);
            this.QtyOpnameConvGood(undefined);
            this.QtyOpnameConvHold(undefined);
            this.QtyOpnameConvBad(undefined);
            this.QtyOpnameGood(undefined);
            this.QtyOpnameHold(undefined);
            this.QtyOpnameBad(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:41
// Description   : vStockOpnameSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.QtyConvLGood = ko.observable();
        this.QtyConvMGood = ko.observable();
        this.QtyConvSGood = ko.observable();
        this.QtyConvLHold = ko.observable();
        this.QtyConvMHold = ko.observable();
        this.QtyConvSHold = ko.observable();
        this.QtyConvLBad = ko.observable();
        this.QtyConvMBad = ko.observable();
        this.QtyConvSBad = ko.observable();
        this.QtyGood = ko.observable();
        this.QtyHold = ko.observable();
        this.QtyBad = ko.observable();
        this.QtyOpnameConvGood = ko.observable();
        this.QtyOpnameConvHold = ko.observable();
        this.QtyOpnameConvBad = ko.observable();
        this.QtyOpnameGood = ko.observable();
        this.QtyOpnameHold = ko.observable();
        this.QtyOpnameBad = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockOpnameSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                QtyConvLGood: this.QtyConvLGood(),
                QtyConvMGood: this.QtyConvMGood(),
                QtyConvSGood: this.QtyConvSGood(),
                QtyConvLHold: this.QtyConvLHold(),
                QtyConvMHold: this.QtyConvMHold(),
                QtyConvSHold: this.QtyConvSHold(),
                QtyConvLBad: this.QtyConvLBad(),
                QtyConvMBad: this.QtyConvMBad(),
                QtyConvSBad: this.QtyConvSBad(),
                QtyGood: this.QtyGood(),
                QtyHold: this.QtyHold(),
                QtyBad: this.QtyBad(),
                QtyOpnameConvGood: this.QtyOpnameConvGood(),
                QtyOpnameConvHold: this.QtyOpnameConvHold(),
                QtyOpnameConvBad: this.QtyOpnameConvBad(),
                QtyOpnameGood: this.QtyOpnameGood(),
                QtyOpnameHold: this.QtyOpnameHold(),
                QtyOpnameBad: this.QtyOpnameBad(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.QtyConvLGood(data.QtyConvLGood);
                this.QtyConvMGood(data.QtyConvMGood);
                this.QtyConvSGood(data.QtyConvSGood);
                this.QtyConvLHold(data.QtyConvLHold);
                this.QtyConvMHold(data.QtyConvMHold);
                this.QtyConvSHold(data.QtyConvSHold);
                this.QtyConvLBad(data.QtyConvLBad);
                this.QtyConvMBad(data.QtyConvMBad);
                this.QtyConvSBad(data.QtyConvSBad);
                this.QtyGood(data.QtyGood);
                this.QtyHold(data.QtyHold);
                this.QtyBad(data.QtyBad);
                this.QtyOpnameConvGood(data.QtyOpnameConvGood);
                this.QtyOpnameConvHold(data.QtyOpnameConvHold);
                this.QtyOpnameConvBad(data.QtyOpnameConvBad);
                this.QtyOpnameGood(data.QtyOpnameGood);
                this.QtyOpnameHold(data.QtyOpnameHold);
                this.QtyOpnameBad(data.QtyOpnameBad);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vStockOpnameDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.QtyConvLGood(undefined);
            this.QtyConvMGood(undefined);
            this.QtyConvSGood(undefined);
            this.QtyConvLHold(undefined);
            this.QtyConvMHold(undefined);
            this.QtyConvSHold(undefined);
            this.QtyConvLBad(undefined);
            this.QtyConvMBad(undefined);
            this.QtyConvSBad(undefined);
            this.QtyGood(undefined);
            this.QtyHold(undefined);
            this.QtyBad(undefined);
            this.QtyOpnameConvGood(undefined);
            this.QtyOpnameConvHold(undefined);
            this.QtyOpnameConvBad(undefined);
            this.QtyOpnameGood(undefined);
            this.QtyOpnameHold(undefined);
            this.QtyOpnameBad(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:44:40
// Description   : vStockReceiveViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockReceiveViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.WarehouseID = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.PIC = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.AttachmentFile = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockReceiveViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                WarehouseID: this.WarehouseID(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                PIC: this.PIC(),
                ReferenceNumber: this.ReferenceNumber(),
                AttachmentFile: this.AttachmentFile(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            }
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.WarehouseID(data.WarehouseID);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.PIC(data.PIC);
                this.ReferenceNumber(data.ReferenceNumber);
                this.AttachmentFile(data.AttachmentFile);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.WarehouseID(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.PIC(undefined);
            this.ReferenceNumber(undefined);
            this.AttachmentFile(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:22
// Description   : vStockReceiveDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockReceiveDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyReceiveConv = ko.observable();
        this.QtyReceive = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockReceiveDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyReceiveConv: this.QtyReceiveConv(),
                QtyReceive: this.QtyReceive(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyReceiveConv(data.QtyReceiveConv);
                this.QtyReceive(data.QtyReceive);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyReceiveConv(undefined);
            this.QtyReceive(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:41
// Description   : vStockReceiveSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHand = ko.observable();
        this.QtyConvL = ko.observable();
        this.QtyConvM = ko.observable();
        this.QtyConvS = ko.observable();
        this.Qty = ko.observable();
        this.QtyReceiveConv = ko.observable();
        this.QtyReceive = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockReceiveSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHand: this.QtyOnHand(),
                QtyConvL: this.QtyConvL(),
                QtyConvM: this.QtyConvM(),
                QtyConvS: this.QtyConvS(),
                Qty: this.Qty(),
                QtyReceiveConv: this.QtyReceiveConv(),
                QtyReceive: this.QtyReceive(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHand(data.QtyOnHand);
                this.QtyConvL(data.QtyConvL);
                this.QtyConvM(data.QtyConvM);
                this.QtyConvS(data.QtyConvS);
                this.Qty(data.Qty);
                this.QtyReceiveConv(data.QtyReceiveConv);
                this.QtyReceive(data.QtyReceive);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vStockReceiveDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHand(undefined);
            this.QtyConvL(undefined);
            this.QtyConvM(undefined);
            this.QtyConvS(undefined);
            this.Qty(undefined);
            this.QtyReceiveConv(undefined);
            this.QtyReceive(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:46:21
// Description   : vStockTransferViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockTransferViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.DocumentCode = ko.observable();
        this.TransactionDate = ko.observable();
        this.SourceWarehouseID = ko.observable();
        this.SourceWarehouseCode = ko.observable();
        this.SourceWarehouseName = ko.observable();
        this.SourceWarehouse = ko.observable();
        this.SourceSiteID = ko.observable();
        this.SourceSiteCode = ko.observable();
        this.SourceSiteName = ko.observable();
        this.SourceSite = ko.observable();
        this.SourceCompanyID = ko.observable();
        this.SourceCompanyCode = ko.observable();
        this.SourceCompanyName = ko.observable();
        this.SourceCompany = ko.observable();
        this.SourceAreaID = ko.observable();
        this.SourceAreaCode = ko.observable();
        this.SourceAreaName = ko.observable();
        this.SourceArea = ko.observable();
        this.SourceRegionID = ko.observable();
        this.SourceRegionCode = ko.observable();
        this.SourceRegionName = ko.observable();
        this.SourceRegion = ko.observable();
        this.SourceTerritoryID = ko.observable();
        this.SourceTerritoryCode = ko.observable();
        this.SourceTerritoryName = ko.observable();
        this.SourceTerritory = ko.observable();
        this.SourceSiteDistributionTypeID = ko.observable();
        this.SourceSiteDistributionTypeName = ko.observable();
        this.SourceWarehouseTypeID = ko.observable();
        this.SourceWarehouseTypeName = ko.observable();
        this.IsSourceSiteLotNumberEntryRequired = ko.observable();
        this.SourcePIC = ko.observable();
        this.DestinationWarehouseID = ko.observable();
        this.DestinationWarehouseCode = ko.observable();
        this.DestinationWarehouseName = ko.observable();
        this.DestinationWarehouse = ko.observable();
        this.DestinationSiteID = ko.observable();
        this.DestinationSiteCode = ko.observable();
        this.DestinationSiteName = ko.observable();
        this.DestinationSite = ko.observable();
        this.DestinationCompanyID = ko.observable();
        this.DestinationCompanyCode = ko.observable();
        this.DestinationCompanyName = ko.observable();
        this.DestinationCompany = ko.observable();
        this.DestinationAreaID = ko.observable();
        this.DestinationAreaCode = ko.observable();
        this.DestinationAreaName = ko.observable();
        this.DestinationArea = ko.observable();
        this.DestinationRegionID = ko.observable();
        this.DestinationRegionCode = ko.observable();
        this.DestinationRegionName = ko.observable();
        this.DestinationRegion = ko.observable();
        this.DestinationTerritoryID = ko.observable();
        this.DestinationTerritoryCode = ko.observable();
        this.DestinationTerritoryName = ko.observable();
        this.DestinationTerritory = ko.observable();
        this.DestinationSiteDistributionTypeID = ko.observable();
        this.DestinationSiteDistributionTypeName = ko.observable();
        this.IsDestinationSiteLotNumberEntryRequired = ko.observable();
        this.DestinationWarehouseTypeID = ko.observable();
        this.DestinationWarehouseTypeName = ko.observable();
        this.DestinationPIC = ko.observable();
        this.ReferenceNumber = ko.observable();
        this.AttachmentFile = ko.observable();
        this.DODocumentID = ko.observable();
        this.DODocumentCode = ko.observable();
        this.DOShipmentDate = ko.observable();
        this.DOReceivedDate = ko.observable();
        this.DOPrintedCount = ko.observable();
        this.DOLastPrintedDate = ko.observable();
        this.DocumentStatusID = ko.observable();
        this.DocumentStatusName = ko.observable();
        this.PrintCount = ko.observable();
        this.PostedDate = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        this.ChildSummaries = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockTransferViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                DocumentCode: this.DocumentCode(),
                TransactionDate: this.TransactionDate(),
                SourceWarehouseID: this.SourceWarehouseID(),
                SourceWarehouseCode: this.SourceWarehouseCode(),
                SourceWarehouseName: this.SourceWarehouseName(),
                SourceWarehouse: this.SourceWarehouse(),
                SourceSiteID: this.SourceSiteID(),
                SourceSiteCode: this.SourceSiteCode(),
                SourceSiteName: this.SourceSiteName(),
                SourceSite: this.SourceSite(),
                SourceCompanyID: this.SourceCompanyID(),
                SourceCompanyCode: this.SourceCompanyCode(),
                SourceCompanyName: this.SourceCompanyName(),
                SourceCompany: this.SourceCompany(),
                SourceAreaID: this.SourceAreaID(),
                SourceAreaCode: this.SourceAreaCode(),
                SourceAreaName: this.SourceAreaName(),
                SourceArea: this.SourceArea(),
                SourceRegionID: this.SourceRegionID(),
                SourceRegionCode: this.SourceRegionCode(),
                SourceRegionName: this.SourceRegionName(),
                SourceRegion: this.SourceRegion(),
                SourceTerritoryID: this.SourceTerritoryID(),
                SourceTerritoryCode: this.SourceTerritoryCode(),
                SourceTerritoryName: this.SourceTerritoryName(),
                SourceTerritory: this.SourceTerritory(),
                SourceSiteDistributionTypeID: this.SourceSiteDistributionTypeID(),
                SourceSiteDistributionTypeName: this.SourceSiteDistributionTypeName(),
                SourceWarehouseTypeID: this.SourceWarehouseTypeID(),
                SourceWarehouseTypeName: this.SourceWarehouseTypeName(),
                IsSourceSiteLotNumberEntryRequired: this.IsSourceSiteLotNumberEntryRequired(),
                SourcePIC: this.SourcePIC(),
                DestinationWarehouseID: this.DestinationWarehouseID(),
                DestinationWarehouseCode: this.DestinationWarehouseCode(),
                DestinationWarehouseName: this.DestinationWarehouseName(),
                DestinationWarehouse: this.DestinationWarehouse(),
                DestinationSiteID: this.DestinationSiteID(),
                DestinationSiteCode: this.DestinationSiteCode(),
                DestinationSiteName: this.DestinationSiteName(),
                DestinationSite: this.DestinationSite(),
                DestinationCompanyID: this.DestinationCompanyID(),
                DestinationCompanyCode: this.DestinationCompanyCode(),
                DestinationCompanyName: this.DestinationCompanyName(),
                DestinationCompany: this.DestinationCompany(),
                DestinationAreaID: this.DestinationAreaID(),
                DestinationAreaCode: this.DestinationAreaCode(),
                DestinationAreaName: this.DestinationAreaName(),
                DestinationArea: this.DestinationArea(),
                DestinationRegionID: this.DestinationRegionID(),
                DestinationRegionCode: this.DestinationRegionCode(),
                DestinationRegionName: this.DestinationRegionName(),
                DestinationRegion: this.DestinationRegion(),
                DestinationTerritoryID: this.DestinationTerritoryID(),
                DestinationTerritoryCode: this.DestinationTerritoryCode(),
                DestinationTerritoryName: this.DestinationTerritoryName(),
                DestinationTerritory: this.DestinationTerritory(),
                DestinationSiteDistributionTypeID: this.DestinationSiteDistributionTypeID(),
                DestinationSiteDistributionTypeName: this.DestinationSiteDistributionTypeName(),
                DestinationWarehouseTypeID: this.DestinationWarehouseTypeID(),
                DestinationWarehouseTypeName: this.DestinationWarehouseTypeName(),
                IsDestinationSiteLotNumberEntryRequired: this.IsDestinationSiteLotNumberEntryRequired(),
                DestinationPIC: this.DestinationPIC(),
                ReferenceNumber: this.ReferenceNumber(),
                AttachmentFile: this.AttachmentFile(),
                DODocumentID: this.DODocumentID(),
                DODocumentCode: this.DODocumentCode(),
                DOShipmentDate: this.DOShipmentDate(),
                DOReceivedDate: this.DOReceivedDate(),
                DOPrintedCount: this.DOPrintedCount(),
                DOLastPrintedDate: this.DOLastPrintedDate(),
                DocumentStatusID: this.DocumentStatusID(),
                DocumentStatusName: this.DocumentStatusName(),
                PrintCount: this.PrintCount(),
                PostedDate: this.PostedDate(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),

                ChildSummaries: ko.toJS(this.ChildSummaries())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.DocumentCode(data.DocumentCode);
                this.TransactionDate(data.TransactionDate);
                this.SourceWarehouseID(data.SourceWarehouseID);
                this.SourceWarehouseCode(data.SourceWarehouseCode);
                this.SourceWarehouseName(data.SourceWarehouseName);
                this.SourceWarehouse(data.SourceWarehouse);
                this.SourceSiteID(data.SourceSiteID);
                this.SourceSiteCode(data.SourceSiteCode);
                this.SourceSiteName(data.SourceSiteName);
                this.SourceSite(data.SourceSite);
                this.SourceCompanyID(data.SourceCompanyID);
                this.SourceCompanyCode(data.SourceCompanyCode);
                this.SourceCompanyName(data.SourceCompanyName);
                this.SourceCompany(data.SourceCompany);
                this.SourceAreaID(data.SourceAreaID);
                this.SourceAreaCode(data.SourceAreaCode);
                this.SourceAreaName(data.SourceAreaName);
                this.SourceArea(data.SourceArea);
                this.SourceRegionID(data.SourceRegionID);
                this.SourceRegionCode(data.SourceRegionCode);
                this.SourceRegionName(data.SourceRegionName);
                this.SourceRegion(data.SourceRegion);
                this.SourceTerritoryID(data.SourceTerritoryID);
                this.SourceTerritoryCode(data.SourceTerritoryCode);
                this.SourceTerritoryName(data.SourceTerritoryName);
                this.SourceTerritory(data.SourceTerritory);
                this.SourceSiteDistributionTypeID(data.SourceSiteDistributionTypeID);
                this.SourceSiteDistributionTypeName(data.SourceSiteDistributionTypeName);
                this.SourceWarehouseTypeID(data.SourceWarehouseTypeID);
                this.SourceWarehouseTypeName(data.SourceWarehouseTypeName);
                this.IsSourceSiteLotNumberEntryRequired(data.IsSourceSiteLotNumberEntryRequired);
                this.SourcePIC(data.SourcePIC);
                this.DestinationWarehouseID(data.DestinationWarehouseID);
                this.DestinationWarehouseCode(data.DestinationWarehouseCode);
                this.DestinationWarehouseName(data.DestinationWarehouseName);
                this.DestinationWarehouse(data.DestinationWarehouse);
                this.DestinationSiteID(data.DestinationSiteID);
                this.DestinationSiteCode(data.DestinationSiteCode);
                this.DestinationSiteName(data.DestinationSiteName);
                this.DestinationSite(data.DestinationSite);
                this.DestinationCompanyID(data.DestinationCompanyID);
                this.DestinationCompanyCode(data.DestinationCompanyCode);
                this.DestinationCompanyName(data.DestinationCompanyName);
                this.DestinationCompany(data.DestinationCompany);
                this.DestinationAreaID(data.DestinationAreaID);
                this.DestinationAreaCode(data.DestinationAreaCode);
                this.DestinationAreaName(data.DestinationAreaName);
                this.DestinationArea(data.DestinationArea);
                this.DestinationRegionID(data.DestinationRegionID);
                this.DestinationRegionCode(data.DestinationRegionCode);
                this.DestinationRegionName(data.DestinationRegionName);
                this.DestinationRegion(data.DestinationRegion);
                this.DestinationTerritoryID(data.DestinationTerritoryID);
                this.DestinationTerritoryCode(data.DestinationTerritoryCode);
                this.DestinationTerritoryName(data.DestinationTerritoryName);
                this.DestinationTerritory(data.DestinationTerritory);
                this.DestinationSiteDistributionTypeID(data.DestinationSiteDistributionTypeID);
                this.DestinationSiteDistributionTypeName(data.DestinationSiteDistributionTypeName);
                this.DestinationWarehouseTypeID(data.DestinationWarehouseTypeID);
                this.DestinationWarehouseTypeName(data.DestinationWarehouseTypeName);
                this.IsDestinationSiteLotNumberEntryRequired(data.IsDestinationSiteLotNumberEntryRequired);
                this.DestinationPIC(data.DestinationPIC);
                this.ReferenceNumber(data.ReferenceNumber);
                this.AttachmentFile(data.AttachmentFile);
                this.DODocumentID(data.DODocumentID);
                this.DODocumentCode(data.DODocumentCode);
                this.DOShipmentDate(data.DOShipmentDate);
                this.DOReceivedDate(data.DOReceivedDate);
                this.DOPrintedCount(data.DOPrintedCount);
                this.DOLastPrintedDate(data.DOLastPrintedDate);
                this.DocumentStatusID(data.DocumentStatusID);
                this.DocumentStatusName(data.DocumentStatusName);
                this.PrintCount(data.PrintCount);
                this.PostedDate(data.PostedDate);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);

                if (data.ChildSummaries) {
                    for (var i = 0; i < data.ChildSummaries.length; i++)
                        this.ChildSummaries.push(new Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel(
                            data.ChildSummaries[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.DocumentCode(undefined);
            this.TransactionDate(undefined);
            this.SourceWarehouseID(undefined);
            this.SourceWarehouseCode(undefined);
            this.SourceWarehouseName(undefined);
            this.SourceWarehouse(undefined);
            this.SourceSiteID(undefined);
            this.SourceSiteCode(undefined);
            this.SourceSiteName(undefined);
            this.SourceSite(undefined);
            this.SourceCompanyID(undefined);
            this.SourceCompanyCode(undefined);
            this.SourceCompanyName(undefined);
            this.SourceCompany(undefined);
            this.SourceAreaID(undefined);
            this.SourceAreaCode(undefined);
            this.SourceAreaName(undefined);
            this.SourceArea(undefined);
            this.SourceRegionID(undefined);
            this.SourceRegionCode(undefined);
            this.SourceRegionName(undefined);
            this.SourceRegion(undefined);
            this.SourceTerritoryID(undefined);
            this.SourceTerritoryCode(undefined);
            this.SourceTerritoryName(undefined);
            this.SourceTerritory(undefined);
            this.SourceSiteDistributionTypeID(undefined);
            this.SourceSiteDistributionTypeName(undefined);
            this.SourceWarehouseTypeID(undefined);
            this.SourceWarehouseTypeName(undefined);
            this.IsSourceSiteLotNumberEntryRequired(undefined);
            this.SourcePIC(undefined);
            this.DestinationWarehouseID(undefined);
            this.DestinationWarehouseCode(undefined);
            this.DestinationWarehouseName(undefined);
            this.DestinationWarehouse(undefined);
            this.DestinationSiteID(undefined);
            this.DestinationSiteCode(undefined);
            this.DestinationSiteName(undefined);
            this.DestinationSite(undefined);
            this.DestinationCompanyID(undefined);
            this.DestinationCompanyCode(undefined);
            this.DestinationCompanyName(undefined);
            this.DestinationCompany(undefined);
            this.DestinationAreaID(undefined);
            this.DestinationAreaCode(undefined);
            this.DestinationAreaName(undefined);
            this.DestinationArea(undefined);
            this.DestinationRegionID(undefined);
            this.DestinationRegionCode(undefined);
            this.DestinationRegionName(undefined);
            this.DestinationRegion(undefined);
            this.DestinationTerritoryID(undefined);
            this.DestinationTerritoryCode(undefined);
            this.DestinationTerritoryName(undefined);
            this.DestinationTerritory(undefined);
            this.DestinationSiteDistributionTypeID(undefined);
            this.DestinationSiteDistributionTypeName(undefined);
            this.DestinationWarehouseTypeID(undefined);
            this.DestinationWarehouseTypeName(undefined);
            this.IsDestinationSiteLotNumberEntryRequired(undefined);
            this.DestinationPIC(undefined);
            this.ReferenceNumber(undefined);
            this.AttachmentFile(undefined);
            this.DODocumentID(undefined);
            this.DODocumentCode(undefined);
            this.DOShipmentDate(undefined);
            this.DOReceivedDate(undefined);
            this.DOPrintedCount(undefined);
            this.DOLastPrintedDate(undefined);
            this.DocumentStatusID(undefined);
            this.DocumentStatusName(undefined);
            this.PrintCount(undefined);
            this.PostedDate(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);

            this.ChildSummaries(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:22
// Description   : vStockTransferDetailsViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockTransferDetailsViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.QtyConvLGood = ko.observable();
        this.QtyConvMGood = ko.observable();
        this.QtyConvSGood = ko.observable();
        this.QtyConvLHold = ko.observable();
        this.QtyConvMHold = ko.observable();
        this.QtyConvSHold = ko.observable();
        this.QtyConvLBad = ko.observable();
        this.QtyConvMBad = ko.observable();
        this.QtyConvSBad = ko.observable();
        this.QtyGood = ko.observable();
        this.QtyHold = ko.observable();
        this.QtyBad = ko.observable();
        this.QtyTransferConvGood = ko.observable();
        this.QtyTransferConvHold = ko.observable();
        this.QtyTransferConvBad = ko.observable();
        this.QtyTransferGood = ko.observable();
        this.QtyTransferHold = ko.observable();
        this.QtyTransferBad = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockTransferDetailsViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                QtyConvLGood: this.QtyConvLGood(),
                QtyConvMGood: this.QtyConvMGood(),
                QtyConvSGood: this.QtyConvSGood(),
                QtyConvLHold: this.QtyConvLHold(),
                QtyConvMHold: this.QtyConvMHold(),
                QtyConvSHold: this.QtyConvSHold(),
                QtyConvLBad: this.QtyConvLBad(),
                QtyConvMBad: this.QtyConvMBad(),
                QtyConvSBad: this.QtyConvSBad(),
                QtyGood: this.QtyGood(),
                QtyHold: this.QtyHold(),
                QtyBad: this.QtyBad(),
                QtyTransferConvGood: this.QtyTransferConvGood(),
                QtyTransferConvHold: this.QtyTransferConvHold(),
                QtyTransferConvBad: this.QtyTransferConvBad(),
                QtyTransferGood: this.QtyTransferGood(),
                QtyTransferHold: this.QtyTransferHold(),
                QtyTransferBad: this.QtyTransferBad(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.QtyConvLGood(data.QtyConvLGood);
                this.QtyConvMGood(data.QtyConvMGood);
                this.QtyConvSGood(data.QtyConvSGood);
                this.QtyConvLHold(data.QtyConvLHold);
                this.QtyConvMHold(data.QtyConvMHold);
                this.QtyConvSHold(data.QtyConvSHold);
                this.QtyConvLBad(data.QtyConvLBad);
                this.QtyConvMBad(data.QtyConvMBad);
                this.QtyConvSBad(data.QtyConvSBad);
                this.QtyGood(data.QtyGood);
                this.QtyHold(data.QtyHold);
                this.QtyBad(data.QtyBad);
                this.QtyTransferConvGood(data.QtyTransferConvGood);
                this.QtyTransferConvHold(data.QtyTransferConvHold);
                this.QtyTransferConvBad(data.QtyTransferConvBad);
                this.QtyTransferGood(data.QtyTransferGood);
                this.QtyTransferHold(data.QtyTransferHold);
                this.QtyTransferBad(data.QtyTransferBad);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.QtyConvLGood(undefined);
            this.QtyConvMGood(undefined);
            this.QtyConvSGood(undefined);
            this.QtyConvLHold(undefined);
            this.QtyConvMHold(undefined);
            this.QtyConvSHold(undefined);
            this.QtyConvLBad(undefined);
            this.QtyConvMBad(undefined);
            this.QtyConvSBad(undefined);
            this.QtyGood(undefined);
            this.QtyHold(undefined);
            this.QtyBad(undefined);
            this.QtyTransferConvGood(undefined);
            this.QtyTransferConvHold(undefined);
            this.QtyTransferConvBad(undefined);
            this.QtyTransferGood(undefined);
            this.QtyTransferHold(undefined);
            this.QtyTransferBad(undefined);

            this.Parent(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 22 Mar 2016 12:45:41
// Description   : vStockTransferSummaryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel = function (data) {
        this.DocumentID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.QtyConvLGood = ko.observable();
        this.QtyConvMGood = ko.observable();
        this.QtyConvSGood = ko.observable();
        this.QtyConvLHold = ko.observable();
        this.QtyConvMHold = ko.observable();
        this.QtyConvSHold = ko.observable();
        this.QtyConvLBad = ko.observable();
        this.QtyConvMBad = ko.observable();
        this.QtyConvSBad = ko.observable();
        this.QtyGood = ko.observable();
        this.QtyHold = ko.observable();
        this.QtyBad = ko.observable();
        this.QtyTransferConvGood = ko.observable();
        this.QtyTransferConvHold = ko.observable();
        this.QtyTransferConvBad = ko.observable();
        this.QtyTransferGood = ko.observable();
        this.QtyTransferHold = ko.observable();
        this.QtyTransferBad = ko.observable();

        this.Parent = ko.observable();
        this.ChildDetails = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockTransferSummaryViewModel.prototype, {
        toJS: function () {
            return {
                DocumentID: this.DocumentID(),
                ProductID: this.ProductID(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                QtyConvLGood: this.QtyConvLGood(),
                QtyConvMGood: this.QtyConvMGood(),
                QtyConvSGood: this.QtyConvSGood(),
                QtyConvLHold: this.QtyConvLHold(),
                QtyConvMHold: this.QtyConvMHold(),
                QtyConvSHold: this.QtyConvSHold(),
                QtyConvLBad: this.QtyConvLBad(),
                QtyConvMBad: this.QtyConvMBad(),
                QtyConvSBad: this.QtyConvSBad(),
                QtyGood: this.QtyGood(),
                QtyHold: this.QtyHold(),
                QtyBad: this.QtyBad(),
                QtyTransferConvGood: this.QtyTransferConvGood(),
                QtyTransferConvHold: this.QtyTransferConvHold(),
                QtyTransferConvBad: this.QtyTransferConvBad(),
                QtyTransferGood: this.QtyTransferGood(),
                QtyTransferHold: this.QtyTransferHold(),
                QtyTransferBad: this.QtyTransferBad(),

                Parent: this.Parent(),
                ChildDetails: ko.toJS(this.ChildDetails())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.DocumentID(data.DocumentID);
                this.ProductID(data.ProductID);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.QtyConvLGood(data.QtyConvLGood);
                this.QtyConvMGood(data.QtyConvMGood);
                this.QtyConvSGood(data.QtyConvSGood);
                this.QtyConvLHold(data.QtyConvLHold);
                this.QtyConvMHold(data.QtyConvMHold);
                this.QtyConvSHold(data.QtyConvSHold);
                this.QtyConvLBad(data.QtyConvLBad);
                this.QtyConvMBad(data.QtyConvMBad);
                this.QtyConvSBad(data.QtyConvSBad);
                this.QtyGood(data.QtyGood);
                this.QtyHold(data.QtyHold);
                this.QtyBad(data.QtyBad);
                this.QtyTransferConvGood(data.QtyTransferConvGood);
                this.QtyTransferConvHold(data.QtyTransferConvHold);
                this.QtyTransferConvBad(data.QtyTransferConvBad);
                this.QtyTransferGood(data.QtyTransferGood);
                this.QtyTransferHold(data.QtyTransferHold);
                this.QtyTransferBad(data.QtyTransferBad);

                if (data.Parent)
                    this.Parent(data.Parent);

                if (data.ChildDetails) {
                    for (var i = 0; i < data.ChildDetails.length; i++)
                        this.ChildDetails.push(new Dismoyo_Ciptoning_Client.vStockTransferDetailsViewModel(
                            data.ChildDetails[i]));
                }
            }
        },

        clear: function () {
            this.DocumentID(undefined);
            this.ProductID(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.QtyConvLGood(undefined);
            this.QtyConvMGood(undefined);
            this.QtyConvSGood(undefined);
            this.QtyConvLHold(undefined);
            this.QtyConvMHold(undefined);
            this.QtyConvSHold(undefined);
            this.QtyConvLBad(undefined);
            this.QtyConvMBad(undefined);
            this.QtyConvSBad(undefined);
            this.QtyGood(undefined);
            this.QtyHold(undefined);
            this.QtyBad(undefined);
            this.QtyTransferConvGood(undefined);
            this.QtyTransferConvHold(undefined);
            this.QtyTransferConvBad(undefined);
            this.QtyTransferGood(undefined);
            this.QtyTransferHold(undefined);
            this.QtyTransferBad(undefined);

            this.Parent(undefined);
            this.ChildDetails(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 07 Apr 2016 06:21:32
// Description   : vStockViewViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vStockViewViewModel = function (data) {
        this.WarehouseID = ko.observable();
        this.ProductID = ko.observable();
        this.ProductLotID = ko.observable();
        this.TransactionDate = ko.observable();
        this.WarehouseCode = ko.observable();
        this.WarehouseName = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.WarehouseTypeID = ko.observable();
        this.WarehouseTypeName = ko.observable();
        this.IsWarehouseSOAllowed = ko.observable();
        this.WarehouseStatusID = ko.observable();
        this.WarehouseStatusName = ko.observable();
        this.QtyPeriodOnHandGood = ko.observable();
        this.QtyPeriodOnHandHold = ko.observable();
        this.QtyPeriodOnHandBad = ko.observable();
        this.QtyTransactionGood = ko.observable();
        this.QtyTransactionHold = ko.observable();
        this.QtyTransactionBad = ko.observable();
        this.QtyOnHandGood = ko.observable();
        this.QtyOnHandHold = ko.observable();
        this.QtyOnHandBad = ko.observable();
        this.ProductCode = ko.observable();
        this.ProductName = ko.observable();
        this.Product = ko.observable();
        this.ProductBrandID = ko.observable();
        this.ProductBrandCode = ko.observable();
        this.ProductBrandName = ko.observable();
        this.ProductBrand = ko.observable();
        this.ProductShortName = ko.observable();
        this.ProductUOMLID = ko.observable();
        this.ProductUOMLName = ko.observable();
        this.ProductUOMMID = ko.observable();
        this.ProductUOMMName = ko.observable();
        this.ProductUOMSID = ko.observable();
        this.ProductUOMSName = ko.observable();
        this.ProductWeight = ko.observable();
        this.ProductDimensionL = ko.observable();
        this.ProductDimensionW = ko.observable();
        this.ProductDimensionH = ko.observable();
        this.ProductConversionL = ko.observable();
        this.ProductConversionM = ko.observable();
        this.ProductConversionS = ko.observable();
        this.ProductStatusID = ko.observable();
        this.ProductStatusName = ko.observable();
        this.ProductAdditionalInfo1 = ko.observable();
        this.ProductAdditionalInfo2 = ko.observable();
        this.ProductAdditionalInfo3 = ko.observable();
        this.ProductAdditionalInfo4 = ko.observable();
        this.ProductAdditionalInfo5 = ko.observable();
        this.ProductAdditionalInfo6 = ko.observable();
        this.ProductAdditionalInfo7 = ko.observable();
        this.ProductAdditionalInfo8 = ko.observable();
        this.ProductAdditionalInfo9 = ko.observable();
        this.ProductAdditionalInfo10 = ko.observable();
        this.ProductLotCode = ko.observable();
        this.ProductLotExpiredDate = ko.observable();
        this.ProductLot = ko.observable();
        this.ProductLotStatusID = ko.observable();
        this.ProductLotStatusName = ko.observable();
        this.IsProductLotCodeDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vStockViewViewModel.prototype, {
        toJS: function () {
            return {
                WarehouseID: this.WarehouseID(),
                ProductID: this.ProductID(),
                ProductLotID: this.ProductLotID(),
                TransactionDate: this.TransactionDate(),
                WarehouseCode: this.WarehouseCode(),
                WarehouseName: this.WarehouseName(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                WarehouseTypeID: this.WarehouseTypeID(),
                WarehouseTypeName: this.WarehouseTypeName(),
                IsWarehouseSOAllowed: this.IsWarehouseSOAllowed(),
                WarehouseStatusID: this.WarehouseStatusID(),
                WarehouseStatusName: this.WarehouseStatusName(),
                QtyPeriodOnHandGood: this.QtyPeriodOnHandGood(),
                QtyPeriodOnHandHold: this.QtyPeriodOnHandHold(),
                QtyPeriodOnHandBad: this.QtyPeriodOnHandBad(),
                QtyTransactionGood: this.QtyTransactionGood(),
                QtyTransactionHold: this.QtyTransactionHold(),
                QtyTransactionBad: this.QtyTransactionBad(),
                QtyOnHandGood: this.QtyOnHandGood(),
                QtyOnHandHold: this.QtyOnHandHold(),
                QtyOnHandBad: this.QtyOnHandBad(),
                ProductCode: this.ProductCode(),
                ProductName: this.ProductName(),
                Product: this.Product(),
                ProductBrandID: this.ProductBrandID(),
                ProductBrandCode: this.ProductBrandCode(),
                ProductBrandName: this.ProductBrandName(),
                ProductBrand: this.ProductBrand(),
                ProductShortName: this.ProductShortName(),
                ProductUOMLID: this.ProductUOMLID(),
                ProductUOMLName: this.ProductUOMLName(),
                ProductUOMMID: this.ProductUOMMID(),
                ProductUOMMName: this.ProductUOMMName(),
                ProductUOMSID: this.ProductUOMSID(),
                ProductUOMSName: this.ProductUOMSName(),
                ProductWeight: this.ProductWeight(),
                ProductDimensionL: this.ProductDimensionL(),
                ProductDimensionW: this.ProductDimensionW(),
                ProductDimensionH: this.ProductDimensionH(),
                ProductConversionL: this.ProductConversionL(),
                ProductConversionM: this.ProductConversionM(),
                ProductConversionS: this.ProductConversionS(),
                ProductStatusID: this.ProductStatusID(),
                ProductStatusName: this.ProductStatusName(),
                ProductAdditionalInfo1: this.ProductAdditionalInfo1(),
                ProductAdditionalInfo2: this.ProductAdditionalInfo2(),
                ProductAdditionalInfo3: this.ProductAdditionalInfo3(),
                ProductAdditionalInfo4: this.ProductAdditionalInfo4(),
                ProductAdditionalInfo5: this.ProductAdditionalInfo5(),
                ProductAdditionalInfo6: this.ProductAdditionalInfo6(),
                ProductAdditionalInfo7: this.ProductAdditionalInfo7(),
                ProductAdditionalInfo8: this.ProductAdditionalInfo8(),
                ProductAdditionalInfo9: this.ProductAdditionalInfo9(),
                ProductAdditionalInfo10: this.ProductAdditionalInfo10(),
                ProductLotCode: this.ProductLotCode(),
                ProductLotExpiredDate: this.ProductLotExpiredDate(),
                ProductLot: this.ProductLot(),
                ProductLotStatusID: this.ProductLotStatusID(),
                ProductLotStatusName: this.ProductLotStatusName(),
                IsProductLotCodeDeleted: this.IsProductLotCodeDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.WarehouseID(data.WarehouseID);
                this.ProductID(data.ProductID);
                this.ProductLotID(data.ProductLotID);
                this.TransactionDate(data.TransactionDate);
                this.WarehouseCode(data.WarehouseCode);
                this.WarehouseName(data.WarehouseName);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.WarehouseTypeID(data.WarehouseTypeID);
                this.WarehouseTypeName(data.WarehouseTypeName);
                this.IsWarehouseSOAllowed(data.IsWarehouseSOAllowed);
                this.WarehouseStatusID(data.WarehouseStatusID);
                this.WarehouseStatusName(data.WarehouseStatusName);
                this.QtyPeriodOnHandGood(data.QtyPeriodOnHandGood);
                this.QtyPeriodOnHandHold(data.QtyPeriodOnHandHold);
                this.QtyPeriodOnHandBad(data.QtyPeriodOnHandBad);
                this.QtyTransactionGood(data.QtyTransactionGood);
                this.QtyTransactionHold(data.QtyTransactionHold);
                this.QtyTransactionBad(data.QtyTransactionBad);
                this.QtyOnHandGood(data.QtyOnHandGood);
                this.QtyOnHandHold(data.QtyOnHandHold);
                this.QtyOnHandBad(data.QtyOnHandBad);
                this.ProductCode(data.ProductCode);
                this.ProductName(data.ProductName);
                this.Product(data.Product);
                this.ProductBrandID(data.ProductBrandID);
                this.ProductBrandCode(data.ProductBrandCode);
                this.ProductBrandName(data.ProductBrandName);
                this.ProductBrand(data.ProductBrand);
                this.ProductShortName(data.ProductShortName);
                this.ProductUOMLID(data.ProductUOMLID);
                this.ProductUOMLName(data.ProductUOMLName);
                this.ProductUOMMID(data.ProductUOMMID);
                this.ProductUOMMName(data.ProductUOMMName);
                this.ProductUOMSID(data.ProductUOMSID);
                this.ProductUOMSName(data.ProductUOMSName);
                this.ProductWeight(data.ProductWeight);
                this.ProductDimensionL(data.ProductDimensionL);
                this.ProductDimensionW(data.ProductDimensionW);
                this.ProductDimensionH(data.ProductDimensionH);
                this.ProductConversionL(data.ProductConversionL);
                this.ProductConversionM(data.ProductConversionM);
                this.ProductConversionS(data.ProductConversionS);
                this.ProductStatusID(data.ProductStatusID);
                this.ProductStatusName(data.ProductStatusName);
                this.ProductAdditionalInfo1(data.ProductAdditionalInfo1);
                this.ProductAdditionalInfo2(data.ProductAdditionalInfo2);
                this.ProductAdditionalInfo3(data.ProductAdditionalInfo3);
                this.ProductAdditionalInfo4(data.ProductAdditionalInfo4);
                this.ProductAdditionalInfo5(data.ProductAdditionalInfo5);
                this.ProductAdditionalInfo6(data.ProductAdditionalInfo6);
                this.ProductAdditionalInfo7(data.ProductAdditionalInfo7);
                this.ProductAdditionalInfo8(data.ProductAdditionalInfo8);
                this.ProductAdditionalInfo9(data.ProductAdditionalInfo9);
                this.ProductAdditionalInfo10(data.ProductAdditionalInfo10);
                this.ProductLotCode(data.ProductLotCode);
                this.ProductLotExpiredDate(data.ProductLotExpiredDate);
                this.ProductLot(data.ProductLot);
                this.ProductLotStatusID(data.ProductLotStatusID);
                this.ProductLotStatusName(data.ProductLotStatusName);
                this.IsProductLotCodeDeleted(data.IsProductLotCodeDeleted);
            }
        },

        clear: function () {
            this.WarehouseID(undefined);
            this.ProductID(undefined);
            this.ProductLotID(undefined);
            this.TransactionDate(undefined);
            this.WarehouseCode(undefined);
            this.WarehouseName(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.WarehouseTypeID(undefined);
            this.WarehouseTypeName(undefined);
            this.IsWarehouseSOAllowed(undefined);
            this.WarehouseStatusID(undefined);
            this.WarehouseStatusName(undefined);
            this.QtyPeriodOnHandGood(undefined);
            this.QtyPeriodOnHandHold(undefined);
            this.QtyPeriodOnHandBad(undefined);
            this.QtyTransactionGood(undefined);
            this.QtyTransactionHold(undefined);
            this.QtyTransactionBad(undefined);
            this.QtyOnHandGood(undefined);
            this.QtyOnHandHold(undefined);
            this.QtyOnHandBad(undefined);
            this.ProductCode(undefined);
            this.ProductName(undefined);
            this.Product(undefined);
            this.ProductBrandID(undefined);
            this.ProductBrandCode(undefined);
            this.ProductBrandName(undefined);
            this.ProductBrand(undefined);
            this.ProductShortName(undefined);
            this.ProductUOMLID(undefined);
            this.ProductUOMLName(undefined);
            this.ProductUOMMID(undefined);
            this.ProductUOMMName(undefined);
            this.ProductUOMSID(undefined);
            this.ProductUOMSName(undefined);
            this.ProductWeight(undefined);
            this.ProductDimensionL(undefined);
            this.ProductDimensionW(undefined);
            this.ProductDimensionH(undefined);
            this.ProductConversionL(undefined);
            this.ProductConversionM(undefined);
            this.ProductConversionS(undefined);
            this.ProductStatusID(undefined);
            this.ProductStatusName(undefined);
            this.ProductAdditionalInfo1(undefined);
            this.ProductAdditionalInfo2(undefined);
            this.ProductAdditionalInfo3(undefined);
            this.ProductAdditionalInfo4(undefined);
            this.ProductAdditionalInfo5(undefined);
            this.ProductAdditionalInfo6(undefined);
            this.ProductAdditionalInfo7(undefined);
            this.ProductAdditionalInfo8(undefined);
            this.ProductAdditionalInfo9(undefined);
            this.ProductAdditionalInfo10(undefined);
            this.ProductLotCode(undefined);
            this.ProductLotExpiredDate(undefined);
            this.ProductLot(undefined);
            this.ProductLotStatusID(undefined);
            this.ProductLotStatusName(undefined);
            this.IsProductLotCodeDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 16 Mar 2016 02::45:39
// Description   : vSystemLookupViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSystemLookupViewModel = function (data) {
        this.ID = ko.observable();
        this.Name = ko.observable();
        this.Value_Boolean = ko.observable();
        this.Value_Int32 = ko.observable();
        this.Value_Double = ko.observable();
        this.Value_String = ko.observable();
        this.Value_Guid = ko.observable();
        this.Value_DateTime = ko.observable();
        this.ParentID = ko.observable();
        this.Group = ko.observable();
        this.SortIndex = ko.observable();
        this.IsActive = ko.observable();
        this.IsAuthorization = ko.observable();
        this.CreatedDate = ko.observable();
        this.ModifiedDate = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSystemLookupViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Name: this.Name(),
                Value_Boolean: this.Value_Boolean(),
                Value_Int32: this.Value_Int32(),
                Value_Double: this.Value_Double(),
                Value_String: this.Value_String(),
                Value_Guid: this.Value_Guid(),
                Value_DateTime: this.Value_DateTime(),
                ParentID: this.ParentID(),
                Group: this.Group(),
                SortIndex: this.SortIndex(),
                IsActive: this.IsActive(),
                IsAuthorization: this.IsAuthorization(),
                CreatedDate: this.CreatedDate(),
                ModifiedDate: this.ModifiedDate()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Name(data.Name);
                this.Value_Boolean(data.Value_Boolean);
                this.Value_Int32(data.Value_Int32);
                this.Value_Double(data.Value_Double);
                this.Value_String(data.Value_String);
                this.Value_Guid(data.Value_Guid);
                this.Value_DateTime(data.Value_DateTime);
                this.ParentID(data.ParentID);
                this.Group(data.Group);
                this.SortIndex(data.SortIndex);
                this.IsActive(data.IsActive);
                this.IsAuthorization(data.IsAuthorization);
                this.CreatedDate(data.CreatedDate);
                this.ModifiedDate(data.ModifiedDate);
            }
        },

        clear: function () {
                this.ID(undefined);
                this.Name(undefined);
                this.Value_Boolean(undefined);
                this.Value_Int32(undefined);
                this.Value_Double(undefined);
                this.Value_String(undefined);
                this.Value_Guid(undefined);
                this.Value_DateTime(undefined);
                this.ParentID(undefined);
                this.Group(undefined);
                this.SortIndex(undefined);
                this.IsActive(undefined);
                this.IsAuthorization(undefined);
                this.CreatedDate(undefined);
                this.ModifiedDate(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 03 Mei 2016 09:41:29
// Description   : vSystemParameterViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vSystemParameterViewModel = function (data) {
        this.ID = ko.observable();
        this.Description = ko.observable();
        this.Value = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vSystemParameterViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Description: this.Description(),
                Value: this.Value(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Description(data.Description);
                this.Value(data.Value);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Description(undefined);
            this.Value(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 09 Mar 2016 11:47:54
// Description   : vTerritoryViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vTerritoryViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Territory = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vTerritoryViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Territory: this.Territory(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Territory(data.Territory);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Territory(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 10 Mar 2016 02:49:59
// Description   : vUserViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vUserViewModel = function (data) {
        this.ID = ko.observable();
        this.Name = ko.observable();
        this.Password = ko.observable();
        this.IsHeadOffice = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.StatusID = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.NotificationCount = ko.observable();
        this.ChildPermissions = ko.observableArray([]);

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vUserViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Name: this.Name(),
                Password: this.Password(),
                IsHeadOffice: this.IsHeadOffice(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                StatusID: this.StatusID(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                NotificationCount: this.NotificationCount(),
                ChildPermissions: ko.toJS(this.ChildPermissions())
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Name(data.Name);
                this.Password(data.Password);
                this.IsHeadOffice(data.IsHeadOffice);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.StatusID(data.StatusID);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                this.NotificationCount(data.NotificationCount);

                if (data.ChildPermissions) {
                    for (var i = 0; i < data.ChildPermissions.length; i++)
                        this.ChildPermissions.push(new Dismoyo_Ciptoning_Client.vUserPermissionAllViewModel(
                            data.ChildPermissions[i]));
                }
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Name(undefined);
            this.Password(undefined);
            this.IsHeadOffice(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.StatusID(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.NotificationCount(undefined);
            this.ChildPermissions(undefined);
        },

        isAuthorized: function (permissionObjectID) {
            if ((permissionObjectID == undefined) || (permissionObjectID == null))
                return true;

            if (this.ChildPermissions) {
                for (var i = 0; i < this.ChildPermissions().length > 0; i++) {
                    if (this.ChildPermissions()[i].PermissionObjectID() == permissionObjectID)
                        return true;
                }
            }

            return false;
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 30 Oct 2016 10:51:10
// Description   : vUserNotificationViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vUserNotificationViewModel = function (data) {
        this.ID = ko.observable();
        this.RaisedDate = ko.observable();
        this.UserID = ko.observable();
        this.UserName = ko.observable();
        this.CategoryID = ko.observable();
        this.CategoryName = ko.observable();
        this.HtmlMessage = ko.observable();
        this.IsRead = ko.observable();
        this._ = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vUserNotificationViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                RaisedDate: this.RaisedDate(),
                UserID: this.UserID(),
                UserName: this.UserName(),
                CategoryID: this.CategoryID(),
                CategoryName: this.CategoryName(),
                HtmlMessage: this.HtmlMessage(),
                IsRead: this.IsRead(),
                _: this._()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.RaisedDate(data.RaisedDate);
                this.UserID(data.UserID);
                this.UserName(data.UserName);
                this.CategoryID(data.CategoryID);
                this.CategoryName(data.CategoryName);
                this.HtmlMessage(data.HtmlMessage);
                this.IsRead(data.IsRead);
                this._(data._);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.RaisedDate(undefined);
            this.UserID(undefined);
            this.UserName(undefined);
            this.CategoryID(undefined);
            this.CategoryName(undefined);
            this.HtmlMessage(undefined);
            this.IsRead(undefined);
            this._(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 10 Mar 2016 02:49:59
// Description   : vUserPermissionAllViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vUserPermissionAllViewModel = function (data) {
        this.UserID = ko.observable();
        this.PermissionObjectID = ko.observable();
        this.UserName = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vUserPermissionAllViewModel.prototype, {
        toJS: function () {
            return {
                UserID: this.UserID(),
                PermissionObjectID: this.PermissionObjectID(),
                UserName: this.UserName()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.UserID(data.UserID);
                this.PermissionObjectID(data.PermissionObjectID);
                this.UserName(data.UserName);
            }
        },

        clear: function () {
            this.UserID(undefined);
            this.PermissionObjectID(undefined);
            this.UserName(undefined);            
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 01 Aug 2016 00:55:55
// Description   : vUserRoleViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vUserRoleViewModel = function (data) {
        this.RoleID = ko.observable();
        this.UserID = ko.observable();
        this.RoleName = ko.observable();
        this.UserName = ko.observable();
        this.IsUserHeadOffice = ko.observable();
        this.UserSiteID = ko.observable();
        this.UserSiteCode = ko.observable();
        this.UserSiteName = ko.observable();
        this.UserSite = ko.observable();
        this.UserAreaID = ko.observable();
        this.UserAreaCode = ko.observable();
        this.UserAreaName = ko.observable();
        this.UserArea = ko.observable();
        this.UserRegionID = ko.observable();
        this.UserRegionCode = ko.observable();
        this.UserRegionName = ko.observable();
        this.UserRegion = ko.observable();
        this.UserTerritoryID = ko.observable();
        this.UserTerritoryCode = ko.observable();
        this.UserTerritoryName = ko.observable();
        this.UserTerritory = ko.observable();
        this.UserCompanyID = ko.observable();
        this.UserCompanyCode = ko.observable();
        this.UserCompanyName = ko.observable();
        this.UserCompany = ko.observable();
        this.UserSiteDistributionTypeID = ko.observable();
        this.UserSiteDistributionTypeName = ko.observable();
        this.IsUserSiteLotNumberEntryRequired = ko.observable();
        this.UserStatusID = ko.observable();
        this.UserStatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();

        this.ParentRole = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vUserRoleViewModel.prototype, {
        toJS: function () {
            return {
                RoleID: this.RoleID(),
                UserID: this.UserID(),
                RoleName: this.RoleName(),
                UserName: this.UserName(),
                IsUserHeadOffice: this.IsUserHeadOffice(),
                UserSiteID: this.UserSiteID(),
                UserSiteCode: this.UserSiteCode(),
                UserSiteName: this.UserSiteName(),
                UserSite: this.UserSite(),
                UserAreaID: this.UserAreaID(),
                UserAreaCode: this.UserAreaCode(),
                UserAreaName: this.UserAreaName(),
                UserArea: this.UserArea(),
                UserRegionID: this.UserRegionID(),
                UserRegionCode: this.UserRegionCode(),
                UserRegionName: this.UserRegionName(),
                UserRegion: this.UserRegion(),
                UserTerritoryID: this.UserTerritoryID(),
                UserTerritoryCode: this.UserTerritoryCode(),
                UserTerritoryName: this.UserTerritoryName(),
                UserTerritory: this.UserTerritory(),
                UserCompanyID: this.UserCompanyID(),
                UserCompanyCode: this.UserCompanyCode(),
                UserCompanyName: this.UserCompanyName(),
                UserCompany: this.UserCompany(),
                UserSiteDistributionTypeID: this.UserSiteDistributionTypeID(),
                UserSiteDistributionTypeName: this.UserSiteDistributionTypeName(),
                IsUserSiteLotNumberEntryRequired: this.IsUserSiteLotNumberEntryRequired(),
                UserStatusID: this.UserStatusID(),
                UserStatusName: this.UserStatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),

                ParentRole: this.ParentRole()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.RoleID(data.RoleID);
                this.UserID(data.UserID);
                this.RoleName(data.RoleName);
                this.UserName(data.UserName);
                this.IsUserHeadOffice(data.IsUserHeadOffice);
                this.UserSiteID(data.UserSiteID);
                this.UserSiteCode(data.UserSiteCode);
                this.UserSiteName(data.UserSiteName);
                this.UserSite(data.UserSite);
                this.UserAreaID(data.UserAreaID);
                this.UserAreaCode(data.UserAreaCode);
                this.UserAreaName(data.UserAreaName);
                this.UserArea(data.UserArea);
                this.UserRegionID(data.UserRegionID);
                this.UserRegionCode(data.UserRegionCode);
                this.UserRegionName(data.UserRegionName);
                this.UserRegion(data.UserRegion);
                this.UserTerritoryID(data.UserTerritoryID);
                this.UserTerritoryCode(data.UserTerritoryCode);
                this.UserTerritoryName(data.UserTerritoryName);
                this.UserTerritory(data.UserTerritory);
                this.UserCompanyID(data.UserCompanyID);
                this.UserCompanyCode(data.UserCompanyCode);
                this.UserCompanyName(data.UserCompanyName);
                this.UserCompany(data.UserCompany);
                this.UserSiteDistributionTypeID(data.UserSiteDistributionTypeID);
                this.UserSiteDistributionTypeName(data.UserSiteDistributionTypeName);
                this.IsUserSiteLotNumberEntryRequired(data.IsUserSiteLotNumberEntryRequired);
                this.UserStatusID(data.UserStatusID);
                this.UserStatusName(data.UserStatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);

                if (data.ParentRole)
                    this.ParentRole(data.ParentRole);
            }
        },

        clear: function () {
            this.RoleID(undefined);
            this.UserID(undefined);
            this.RoleName(undefined);
            this.UserName(undefined);
            this.IsUserHeadOffice(undefined);
            this.UserSiteID(undefined);
            this.UserSiteCode(undefined);
            this.UserSiteName(undefined);
            this.UserSite(undefined);
            this.UserAreaID(undefined);
            this.UserAreaCode(undefined);
            this.UserAreaName(undefined);
            this.UserArea(undefined);
            this.UserRegionID(undefined);
            this.UserRegionCode(undefined);
            this.UserRegionName(undefined);
            this.UserRegion(undefined);
            this.UserTerritoryID(undefined);
            this.UserTerritoryCode(undefined);
            this.UserTerritoryName(undefined);
            this.UserTerritory(undefined);
            this.UserCompanyID(undefined);
            this.UserCompanyCode(undefined);
            this.UserCompanyName(undefined);
            this.UserCompany(undefined);
            this.UserSiteDistributionTypeID(undefined);
            this.UserSiteDistributionTypeName(undefined);
            this.IsUserSiteLotNumberEntryRequired(undefined);
            this.UserStatusID(undefined);
            this.UserStatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);

            this.ParentRole(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 01 Aug 2016 08:39:52
// Description   : vUserRoleAllViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vUserRoleAllViewModel = function (data) {
        this.UserRoleID = ko.observable();
        this.IsUser = ko.observable();
        this.UserRoleName = ko.observable();
        this.IsUserHeadOffice = ko.observable();
        this.UserSiteID = ko.observable();
        this.UserSiteCode = ko.observable();
        this.UserSiteName = ko.observable();
        this.UserSite = ko.observable();
        this.UserAreaID = ko.observable();
        this.UserAreaCode = ko.observable();
        this.UserAreaName = ko.observable();
        this.UserArea = ko.observable();
        this.UserRegionID = ko.observable();
        this.UserRegionCode = ko.observable();
        this.UserRegionName = ko.observable();
        this.UserRegion = ko.observable();
        this.UserTerritoryID = ko.observable();
        this.UserTerritoryCode = ko.observable();
        this.UserTerritoryName = ko.observable();
        this.UserTerritory = ko.observable();
        this.UserCompanyID = ko.observable();
        this.UserCompanyCode = ko.observable();
        this.UserCompanyName = ko.observable();
        this.UserCompany = ko.observable();
        this.UserSiteDistributionTypeID = ko.observable();
        this.UserSiteDistributionTypeName = ko.observable();
        this.IsUserSiteLotNumberEntryRequired = ko.observable();
        this.UserStatusID = ko.observable();
        this.UserStatusName = ko.observable();
        this.IsDeleted = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vUserRoleAllViewModel.prototype, {
        toJS: function () {
            return {
                UserRoleID: this.UserRoleID(),
                IsUser: this.IsUser(),
                UserRoleName: this.UserRoleName(),
                IsUserHeadOffice: this.IsUserHeadOffice(),
                UserSiteID: this.UserSiteID(),
                UserSiteCode: this.UserSiteCode(),
                UserSiteName: this.UserSiteName(),
                UserSite: this.UserSite(),
                UserAreaID: this.UserAreaID(),
                UserAreaCode: this.UserAreaCode(),
                UserAreaName: this.UserAreaName(),
                UserArea: this.UserArea(),
                UserRegionID: this.UserRegionID(),
                UserRegionCode: this.UserRegionCode(),
                UserRegionName: this.UserRegionName(),
                UserRegion: this.UserRegion(),
                UserTerritoryID: this.UserTerritoryID(),
                UserTerritoryCode: this.UserTerritoryCode(),
                UserTerritoryName: this.UserTerritoryName(),
                UserTerritory: this.UserTerritory(),
                UserCompanyID: this.UserCompanyID(),
                UserCompanyCode: this.UserCompanyCode(),
                UserCompanyName: this.UserCompanyName(),
                UserCompany: this.UserCompany(),
                UserSiteDistributionTypeID: this.UserSiteDistributionTypeID(),
                UserSiteDistributionTypeName: this.UserSiteDistributionTypeName(),
                IsUserSiteLotNumberEntryRequired: this.IsUserSiteLotNumberEntryRequired(),
                UserStatusID: this.UserStatusID(),
                UserStatusName: this.UserStatusName(),
                IsDeleted: this.IsDeleted()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.UserRoleID(data.UserRoleID);
                this.IsUser(data.IsUser);
                this.UserRoleName(data.UserRoleName);
                this.IsUserHeadOffice(data.IsUserHeadOffice);
                this.UserSiteID(data.UserSiteID);
                this.UserSiteCode(data.UserSiteCode);
                this.UserSiteName(data.UserSiteName);
                this.UserSite(data.UserSite);
                this.UserAreaID(data.UserAreaID);
                this.UserAreaCode(data.UserAreaCode);
                this.UserAreaName(data.UserAreaName);
                this.UserArea(data.UserArea);
                this.UserRegionID(data.UserRegionID);
                this.UserRegionCode(data.UserRegionCode);
                this.UserRegionName(data.UserRegionName);
                this.UserRegion(data.UserRegion);
                this.UserTerritoryID(data.UserTerritoryID);
                this.UserTerritoryCode(data.UserTerritoryCode);
                this.UserTerritoryName(data.UserTerritoryName);
                this.UserTerritory(data.UserTerritory);
                this.UserCompanyID(data.UserCompanyID);
                this.UserCompanyCode(data.UserCompanyCode);
                this.UserCompanyName(data.UserCompanyName);
                this.UserCompany(data.UserCompany);
                this.UserSiteDistributionTypeID(data.UserSiteDistributionTypeID);
                this.UserSiteDistributionTypeName(data.UserSiteDistributionTypeName);
                this.IsUserSiteLotNumberEntryRequired(data.IsUserSiteLotNumberEntryRequired);
                this.UserStatusID(data.UserStatusID);
                this.UserStatusName(data.UserStatusName);
                this.IsDeleted(data.IsDeleted);
            }
        },

        clear: function () {
            this.UserRoleID(undefined);
            this.IsUser(undefined);
            this.UserRoleName(undefined);
            this.IsUserHeadOffice(undefined);
            this.UserSiteID(undefined);
            this.UserSiteCode(undefined);
            this.UserSiteName(undefined);
            this.UserSite(undefined);
            this.UserAreaID(undefined);
            this.UserAreaCode(undefined);
            this.UserAreaName(undefined);
            this.UserArea(undefined);
            this.UserRegionID(undefined);
            this.UserRegionCode(undefined);
            this.UserRegionName(undefined);
            this.UserRegion(undefined);
            this.UserTerritoryID(undefined);
            this.UserTerritoryCode(undefined);
            this.UserTerritoryName(undefined);
            this.UserTerritory(undefined);
            this.UserCompanyID(undefined);
            this.UserCompanyCode(undefined);
            this.UserCompanyName(undefined);
            this.UserCompany(undefined);
            this.UserSiteDistributionTypeID(undefined);
            this.UserSiteDistributionTypeName(undefined);
            this.IsUserSiteLotNumberEntryRequired(undefined);
            this.UserStatusID(undefined);
            this.UserStatusName(undefined);
            this.IsDeleted(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 01 Aug 2016 05:24:47
// Description   : vUserRolePermissionViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vUserRolePermissionViewModel = function (data) {
        this.PermissionObjectID = ko.observable();
        this.UserRoleID = ko.observable();
        this.IsUser = ko.observable();
        this.UserRoleName = ko.observable();
        this.IsUserHeadOffice = ko.observable();
        this.UserSiteID = ko.observable();
        this.UserSiteCode = ko.observable();
        this.UserSiteName = ko.observable();
        this.UserSite = ko.observable();
        this.UserAreaID = ko.observable();
        this.UserAreaCode = ko.observable();
        this.UserAreaName = ko.observable();
        this.UserArea = ko.observable();
        this.UserRegionID = ko.observable();
        this.UserRegionCode = ko.observable();
        this.UserRegionName = ko.observable();
        this.UserRegion = ko.observable();
        this.UserTerritoryID = ko.observable();
        this.UserTerritoryCode = ko.observable();
        this.UserTerritoryName = ko.observable();
        this.UserTerritory = ko.observable();
        this.UserCompanyID = ko.observable();
        this.UserCompanyCode = ko.observable();
        this.UserCompanyName = ko.observable();
        this.UserCompany = ko.observable();
        this.UserSiteDistributionTypeID = ko.observable();
        this.UserSiteDistributionTypeName = ko.observable();
        this.IsUserSiteLotNumberEntryRequired = ko.observable();
        this.UserStatusID = ko.observable();
        this.UserStatusName = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();

        this.ParentPermissionObject = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vUserRolePermissionViewModel.prototype, {
        toJS: function () {
            return {
                PermissionObjectID: this.PermissionObjectID(),
                UserRoleID: this.UserRoleID(),
                IsUser: this.IsUser(),
                UserRoleName: this.UserRoleName(),
                IsUserHeadOffice: this.IsUserHeadOffice(),
                UserSiteID: this.UserSiteID(),
                UserSiteCode: this.UserSiteCode(),
                UserSiteName: this.UserSiteName(),
                UserSite: this.UserSite(),
                UserAreaID: this.UserAreaID(),
                UserAreaCode: this.UserAreaCode(),
                UserAreaName: this.UserAreaName(),
                UserArea: this.UserArea(),
                UserRegionID: this.UserRegionID(),
                UserRegionCode: this.UserRegionCode(),
                UserRegionName: this.UserRegionName(),
                UserRegion: this.UserRegion(),
                UserTerritoryID: this.UserTerritoryID(),
                UserTerritoryCode: this.UserTerritoryCode(),
                UserTerritoryName: this.UserTerritoryName(),
                UserTerritory: this.UserTerritory(),
                UserCompanyID: this.UserCompanyID(),
                UserCompanyCode: this.UserCompanyCode(),
                UserCompanyName: this.UserCompanyName(),
                UserCompany: this.UserCompany(),
                UserSiteDistributionTypeID: this.UserSiteDistributionTypeID(),
                UserSiteDistributionTypeName: this.UserSiteDistributionTypeName(),
                IsUserSiteLotNumberEntryRequired: this.IsUserSiteLotNumberEntryRequired(),
                UserStatusID: this.UserStatusID(),
                UserStatusName: this.UserStatusName(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),

                ParentPermissionObject: this.ParentPermissionObject()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.PermissionObjectID(data.PermissionObjectID);
                this.UserRoleID(data.UserRoleID);
                this.IsUser(data.IsUser);
                this.UserRoleName(data.UserRoleName);
                this.IsUserHeadOffice(data.IsUserHeadOffice);
                this.UserSiteID(data.UserSiteID);
                this.UserSiteCode(data.UserSiteCode);
                this.UserSiteName(data.UserSiteName);
                this.UserSite(data.UserSite);
                this.UserAreaID(data.UserAreaID);
                this.UserAreaCode(data.UserAreaCode);
                this.UserAreaName(data.UserAreaName);
                this.UserArea(data.UserArea);
                this.UserRegionID(data.UserRegionID);
                this.UserRegionCode(data.UserRegionCode);
                this.UserRegionName(data.UserRegionName);
                this.UserRegion(data.UserRegion);
                this.UserTerritoryID(data.UserTerritoryID);
                this.UserTerritoryCode(data.UserTerritoryCode);
                this.UserTerritoryName(data.UserTerritoryName);
                this.UserTerritory(data.UserTerritory);
                this.UserCompanyID(data.UserCompanyID);
                this.UserCompanyCode(data.UserCompanyCode);
                this.UserCompanyName(data.UserCompanyName);
                this.UserCompany(data.UserCompany);
                this.UserSiteDistributionTypeID(data.UserSiteDistributionTypeID);
                this.UserSiteDistributionTypeName(data.UserSiteDistributionTypeName);
                this.IsUserSiteLotNumberEntryRequired(data.IsUserSiteLotNumberEntryRequired);
                this.UserStatusID(data.UserStatusID);
                this.UserStatusName(data.UserStatusName);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);

                if (data.ParentPermissionObject)
                    this.ParentPermissionObject(data.ParentPermissionObject);
            }
        },

        clear: function () {
            this.PermissionObjectID(undefined);
            this.UserRoleID(undefined);
            this.IsUser(undefined);
            this.UserRoleName(undefined);
            this.IsUserHeadOffice(undefined);
            this.UserSiteID(undefined);
            this.UserSiteCode(undefined);
            this.UserSiteName(undefined);
            this.UserSite(undefined);
            this.UserAreaID(undefined);
            this.UserAreaCode(undefined);
            this.UserAreaName(undefined);
            this.UserArea(undefined);
            this.UserRegionID(undefined);
            this.UserRegionCode(undefined);
            this.UserRegionName(undefined);
            this.UserRegion(undefined);
            this.UserTerritoryID(undefined);
            this.UserTerritoryCode(undefined);
            this.UserTerritoryName(undefined);
            this.UserTerritory(undefined);
            this.UserCompanyID(undefined);
            this.UserCompanyCode(undefined);
            this.UserCompanyName(undefined);
            this.UserCompany(undefined);
            this.UserSiteDistributionTypeID(undefined);
            this.UserSiteDistributionTypeName(undefined);
            this.IsUserSiteLotNumberEntryRequired(undefined);
            this.UserStatusID(undefined);
            this.UserStatusName(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);

            this.ParentPermissionObject(undefined);
        }
    });
})();

// ===================================================================================
// Author        : System
// Created date  : 21 Mar 2016 07:43:13
// Description   : vWarehouseViewModel javascript.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate this file.
// ===================================================================================

(function () {
    Dismoyo_Ciptoning_Client.vWarehouseViewModel = function (data) {
        this.ID = ko.observable();
        this.Code = ko.observable();
        this.Name = ko.observable();
        this.Warehouse = ko.observable();
        this.SiteID = ko.observable();
        this.SiteCode = ko.observable();
        this.SiteName = ko.observable();
        this.Site = ko.observable();
        this.AreaID = ko.observable();
        this.AreaCode = ko.observable();
        this.AreaName = ko.observable();
        this.Area = ko.observable();
        this.RegionID = ko.observable();
        this.RegionCode = ko.observable();
        this.RegionName = ko.observable();
        this.Region = ko.observable();
        this.TerritoryID = ko.observable();
        this.TerritoryCode = ko.observable();
        this.TerritoryName = ko.observable();
        this.Territory = ko.observable();
        this.CompanyID = ko.observable();
        this.CompanyCode = ko.observable();
        this.CompanyName = ko.observable();
        this.Company = ko.observable();
        this.SiteDistributionTypeID = ko.observable();
        this.SiteDistributionTypeName = ko.observable();
        this.IsSiteLotNumberEntryRequired = ko.observable();
        this.TypeID = ko.observable();
        this.TypeName = ko.observable();
        this.IsSOAllowed = ko.observable();
        this.StatusID = ko.observable();
        this.StatusName = ko.observable();
        this.SAPCode = ko.observable();
        this.CreatedDate = ko.observable();
        this.CreatedByUserID = ko.observable();
        this.CreatedByUserName = ko.observable();
        this.ModifiedDate = ko.observable();
        this.ModifiedByUserID = ko.observable();
        this.ModifiedByUserName = ko.observable();
        this.IsDeleted = ko.observable();

        this.Parent = ko.observable();

        if (data)
            this.fromJS(data);
    };

    $.extend(Dismoyo_Ciptoning_Client.vWarehouseViewModel.prototype, {
        toJS: function () {
            return {
                ID: this.ID(),
                Code: this.Code(),
                Name: this.Name(),
                Warehouse: this.Warehouse(),
                SiteID: this.SiteID(),
                SiteCode: this.SiteCode(),
                SiteName: this.SiteName(),
                Site: this.Site(),
                AreaID: this.AreaID(),
                AreaCode: this.AreaCode(),
                AreaName: this.AreaName(),
                Area: this.Area(),
                RegionID: this.RegionID(),
                RegionCode: this.RegionCode(),
                RegionName: this.RegionName(),
                Region: this.Region(),
                TerritoryID: this.TerritoryID(),
                TerritoryCode: this.TerritoryCode(),
                TerritoryName: this.TerritoryName(),
                Territory: this.Territory(),
                CompanyID: this.CompanyID(),
                CompanyCode: this.CompanyCode(),
                CompanyName: this.CompanyName(),
                Company: this.Company(),
                SiteDistributionTypeID: this.SiteDistributionTypeID(),
                SiteDistributionTypeName: this.SiteDistributionTypeName(),
                IsSiteLotNumberEntryRequired: this.IsSiteLotNumberEntryRequired(),
                TypeID: this.TypeID(),
                TypeName: this.TypeName(),
                IsSOAllowed: this.IsSOAllowed(),
                StatusID: this.StatusID(),
                StatusName: this.StatusName(),
                SAPCode: this.SAPCode(),
                CreatedDate: this.CreatedDate(),
                CreatedByUserID: this.CreatedByUserID(),
                CreatedByUserName: this.CreatedByUserName(),
                ModifiedDate: this.ModifiedDate(),
                ModifiedByUserID: this.ModifiedByUserID(),
                ModifiedByUserName: this.ModifiedByUserName(),
                IsDeleted: this.IsDeleted(),

                Parent: this.Parent()
            };
        },

        fromJS: function (data) {
            if (data) {
                this.ID(data.ID);
                this.Code(data.Code);
                this.Name(data.Name);
                this.Warehouse(data.Warehouse);
                this.SiteID(data.SiteID);
                this.SiteCode(data.SiteCode);
                this.SiteName(data.SiteName);
                this.Site(data.Site);
                this.AreaID(data.AreaID);
                this.AreaCode(data.AreaCode);
                this.AreaName(data.AreaName);
                this.Area(data.Area);
                this.RegionID(data.RegionID);
                this.RegionCode(data.RegionCode);
                this.RegionName(data.RegionName);
                this.Region(data.Region);
                this.TerritoryID(data.TerritoryID);
                this.TerritoryCode(data.TerritoryCode);
                this.TerritoryName(data.TerritoryName);
                this.Territory(data.Territory);
                this.CompanyID(data.CompanyID);
                this.CompanyCode(data.CompanyCode);
                this.CompanyName(data.CompanyName);
                this.Company(data.Company);
                this.SiteDistributionTypeID(data.SiteDistributionTypeID);
                this.SiteDistributionTypeName(data.SiteDistributionTypeName);
                this.IsSiteLotNumberEntryRequired(data.IsSiteLotNumberEntryRequired);
                this.TypeID(data.TypeID);
                this.TypeName(data.TypeName);
                this.IsSOAllowed(data.IsSOAllowed);
                this.StatusID(data.StatusID);
                this.StatusName(data.StatusName);
                this.SAPCode(data.SAPCode);
                this.CreatedDate(data.CreatedDate);
                this.CreatedByUserID(data.CreatedByUserID);
                this.CreatedByUserName(data.CreatedByUserName);
                this.ModifiedDate(data.ModifiedDate);
                this.ModifiedByUserID(data.ModifiedByUserID);
                this.ModifiedByUserName(data.ModifiedByUserName);
                this.IsDeleted(data.IsDeleted);

                if (data.Parent)
                    this.Parent(data.Parent);
            }
        },

        clear: function () {
            this.ID(undefined);
            this.Code(undefined);
            this.Name(undefined);
            this.Warehouse(undefined);
            this.SiteID(undefined);
            this.SiteCode(undefined);
            this.SiteName(undefined);
            this.Site(undefined);
            this.AreaID(undefined);
            this.AreaCode(undefined);
            this.AreaName(undefined);
            this.Area(undefined);
            this.RegionID(undefined);
            this.RegionCode(undefined);
            this.RegionName(undefined);
            this.Region(undefined);
            this.TerritoryID(undefined);
            this.TerritoryCode(undefined);
            this.TerritoryName(undefined);
            this.Territory(undefined);
            this.CompanyID(undefined);
            this.CompanyCode(undefined);
            this.CompanyName(undefined);
            this.Company(undefined);
            this.SiteDistributionTypeID(undefined);
            this.SiteDistributionTypeName(undefined);
            this.IsSiteLotNumberEntryRequired(undefined);
            this.TypeID(undefined);
            this.TypeName(undefined);
            this.IsSOAllowed(undefined);
            this.StatusID(undefined);
            this.StatusName(undefined);
            this.SAPCode(undefined);
            this.CreatedDate(undefined);
            this.CreatedByUserID(undefined);
            this.CreatedByUserName(undefined);
            this.ModifiedDate(undefined);
            this.ModifiedByUserID(undefined);
            this.ModifiedByUserName(undefined);
            this.IsDeleted(undefined);

            this.Parent(undefined);
        }
    });
})();

// ------------------------------------------------------------------------------------------------
// CommonUtility: A class for supporting the Html programming.
// ------------------------------------------------------------------------------------------------


// CommonUtility class definition.
var CommonUtility = function () {
}


// Configure the pane layouts for commonGridView.
CommonUtility.configureCommonGridViewLayout = function (viewName) {
    var ctlName = 'commonGridView';
    var ctl = $('#' + viewName + '_' + ctlName);
    return CommonUtility.configureCommonLayout(viewName, ctlName,
        function (pane, $Pane, state) {
            var filter = DXUtility.getDXInstance($Pane, '#collapsibleFilter_filter', 'dxAccordion');
            var dataGrid = DXUtility.getDXInstance($Pane, '#commonGridView_dataGrid', 'dxDataGrid');
            if (dataGrid) {
                var height = $Pane.height() - ((filter) ? filter.element().height() : 0);
                dataGrid.option('height', height - 40);
                ctl.height(height);
            }
        }
    );
}

// Configure the pane layouts for commonIFrame.
CommonUtility.configureCommonIFrameLayout = function (viewName) {
    var ctlName = 'commonIFrame';
    var ctl = $('#' + viewName + '_' + ctlName);
    return CommonUtility.configureCommonLayout(viewName, ctlName,
        function (pane, $Pane, state) {
            var filter = DXUtility.getDXInstance($Pane, '#collapsibleFilter_filter', 'dxAccordion');
            var iframe = $Pane.find('#commonIFrame_iframe');
            if (iframe) {
                var height = $Pane.height() - ((filter) ? filter.element().height() : 0);
                iframe.height(height);
                ctl.height(height);
            }
        }
    );
}

// Configure the pane layouts.
CommonUtility.configureCommonLayout = function (viewName, ctlName, onResize) {
    if (!CommonUtility.validateLoggedInUser())
        return;

    if ($('#' + viewName + '_' + ctlName).is(':visible')) {
        var pane = $('#' + viewName + '_viewContent').layout({
            name: viewName + 'ViewContent',
            north: {
                paneSelector: '#' + viewName + '_viewContentHeader',
                resizable: false,
                spacing_open: 0,
                spacing_closed: 0
            },
            center: {
                paneSelector: '#' + viewName + '_viewSubContent',
                onresize: onResize
            }
        });

        pane.resizeAll();
        desktopPane().show('west');
        return pane;
    }

    return undefined;
}


// Create file uploader element.
CommonUtility.createEditDataAttachmentFileUploader = function (viewName, attachmentPathName) {
    return $('<div id="' + viewName + '_editDataAttachmentFile">').dxFileUploader({
        accept:
            '.doc,application/msword,' +
            '.docx,application/vnd.openxmlformats-officedocument.wordprocessingml.document,' +
            '.xls,application/vnd.ms-excel,' +
            '.xlsx,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,' +
            '.pdf,application/pdf',
        uploadMode: 'useButtons',
        uploadedMessage: 'Uploaded',
        onProgress: function (e) {
        },
        onUploaded: function (e) {
        },
        onUploadError: function (e) {
        },
        onValueChanged: function (e) {
            if (e.value) {
                $('.dx-button-content:contains(\'Upload\')').remove();

                var fileExt = e.value.name.split('.').pop();
                e.component.fileName = new DevExpress.data.Guid() + '.' + fileExt;
                e.component.option('uploadUrl', Dismoyo_Ciptoning_Client.FileService.UploadFile.url(attachmentPathName + '/' + e.component.fileName));
            }
        }
    });
}

// Create file downloader element.
CommonUtility.createEditDataAttachmentFileDownloader = function (viewName, fileUploader, attachmentPathName, attachmentFileName) {
    var fileDownloadButtonID = viewName + '_editDataAttachmentFileDownload';
    $('#' + fileDownloadButtonID).remove();

    if (attachmentFileName) {
        var fileUrl = Dismoyo_Ciptoning_Client.FileService.DownloadFile.url(attachmentPathName, attachmentFileName);
        fileUploader.element().append('<a id="' + fileDownloadButtonID +
            '" style="margin-left: 10px;" target="_blank" href="' + fileUrl + '">Download</a>');
    }
}


// Validate login.
CommonUtility.validateLoggedInUser = function () {
    Dismoyo_Ciptoning_Client.app.CurrentUser = null;
    var userJS = CommonUtility.getJsonCookie('CurrentUser');
    if (userJS) {
        var strLength = CommonUtility.getCookie('CurrentUserPermissionsLength');
        if (strLength.length <= 0)
            strLength = '0';

        var currentPermissionsJSLength = Math.ceil(parseFloat(strLength));
        var currentPermissionsJS = '';
        for (var i = 0; i < currentPermissionsJSLength; i++)
            currentPermissionsJS += CommonUtility.getCookie('CurrentUserPermissions' + (i + 1).toString());

        if (currentPermissionsJS.length > 0)
            userJS.ChildPermissions = JSON.parse(currentPermissionsJS);
        
        var user = new Dismoyo_Ciptoning_Client.vUserViewModel(userJS);
        if (!user.IsHeadOffice())
            user.SiteID(new DevExpress.data.Guid(user.SiteID()));

        var currentItem = Dismoyo_Ciptoning_Client.app.navigationManager.currentItem();
        if (currentItem.uri != 'Login') {
            var header = $('#headerWelcome');
            if (header.text() == '') {
                var items = ko.toJS(mainMenuItems);
                for (var i = 0; i < items.length; i++)
                    items[i].visible = ((!user.IsHeadOffice() && items[i].isHeadOffice) ||
                        !user.isAuthorized(items[i].permissionObjectID)) ? false : true;

                $('#leftMenu').dxTreeView('instance').option('items', items);

                header.text('Welcome, ' + user.Name());
                headerMenu().option('visible', true);

                Dismoyo_Ciptoning_Client.LocalStore.loadAllData();
            }
        }

        Dismoyo_Ciptoning_Client.app.CurrentUser = user;
        return true;
    }

    return false;
}

// Show message after document action is succeed.
CommonUtility.documentSuccessMessage = function (statusID, action) {
    var statusHeader = '';
    var statusName = '';
    switch (statusID) {
        case 1: statusHeader = 'Save'; statusName = 'Saved'; break;
        case 2: statusHeader = 'Post'; statusName = 'Posted'; break;
        case 3: statusHeader = 'Discard'; statusName = 'Discarded'; break;
        case 4: statusHeader = 'Void'; statusName = 'Voided'; break;
    }

    if (statusName != '') {
        DevExpress.ui.dialog.alert(
            'Transaction has been successfully ' + statusName + '.', statusHeader + ' Successful')
            .done(function (e) { action(); });
    }
}

// Cascade value changed.
CommonUtility.cascadeValueChanged = function (form, selectedItem, value, field, parentFields, childFields) {
    if (selectedItem) {
        for (var i = 0; i < parentFields.length; i++)
            form.getEditor(parentFields[i] + 'ID').option('value', selectedItem[parentFields[i] + 'ID']());
    }

    for (var i = 0; i < childFields.length; i++) {
        var childEditor = form.getEditor(childFields[i] + 'ID');
        var childSelectedItem = childEditor.option('selectedItem');
        if (childFields[i] != 'Company') {
            if (childSelectedItem && (childSelectedItem[field + 'ID']() != value))
                childEditor.option('value', null);

            childEditor.option('dataSource',
                DataUtility['GetLookup' + childFields[i] + 'DataSource']((value) ? [field + 'ID', '=', value] : null));
        } else {
            if (childSelectedItem)
                childEditor.option('value', null);
        }

    }
}

// Cascade load data source.
CommonUtility.cascadeLoadLookupDataSource = function (data, parentColumn, dataSource) {
    var filter = null;
    if (data && data[parentColumn])
        filter = [parentColumn, '=', DXUtility.getValue(data, parentColumn)];

    return dataSource(filter);
},

// Cascade value changed.
CommonUtility.cascadeLookupValueChanged = function (items, data, idColumn, value, parentFields) {
    if (value) {
        var item = $.grep(items, function (e) { return (DXUtility.getValue(e, idColumn) == value); })[0];
        if (item) {
            for (var i = 0; i < parentFields.length; i++)
                data[parentFields[i]] = item[parentFields[i]]();
        }
    }
}

// Cascade value changed with GUID data type.
CommonUtility.cascadeLookupGuidValueChanged = function (items, data, idColumn, value, parentFields) {
    if (value) {
        var item = $.grep(items, function (e) { return (DXUtility.getValue(e, idColumn)._value == value._value); })[0];
        if (item) {
            for (var i = 0; i < parentFields.length; i++)
                data[parentFields[i]] = item[parentFields[i]]();
        }
    }
}

// Get number format.
CommonUtility.getNumberFormat = function (value) {
    if (!isNaN(parseFloat(value)))
        return numeral(value).format('0,0.00');

    return '';
}

// Converter to UOM Conversion and Pcs.
CommonUtility.getConversion = function (qtyTransactionConv, productConversionL, productConversionM, productConversionS) {
    var qtyConvL = 0;
    var qtyConvM = 0;
    var qtyConvS = 0;
    var qtyTransaction = 0;
    var arr = qtyTransactionConv.split('/');

    try {
        if (arr.length == 1)
            qtyConvS = (!arr[0] || isNaN(arr[0]) ? 0 : parseInt(arr[0]));

        if (arr.length == 2) {
            qtyConvM = (!arr[0] || isNaN(arr[0]) ? 0 : parseInt(arr[0]));
            qtyConvS = (!arr[1] || isNaN(arr[1]) ? 0 : parseInt(arr[1]));
        }

        if (arr.length == 3) {
            qtyConvL = (!arr[0] || isNaN(arr[0]) ? 0 : parseInt(arr[0]));
            qtyConvM = (!arr[1] || isNaN(arr[1]) ? 0 : parseInt(arr[1]));
            qtyConvS = (!arr[2] || isNaN(arr[2]) ? 0 : parseInt(arr[2]));
        }
    } catch (e) {
    }

    if (arr.length == 1) {
        var conversion = CommonUtility.calcToConversion(qtyConvS, productConversionL, productConversionM, productConversionS);
        qtyConvL = conversion.qtyConvL;
        qtyConvM = conversion.qtyConvM;
        qtyConvS = conversion.qtyConvS;
    }

    qtyTransaction = (qtyConvL * ((!productConversionL) ? 0 : productConversionL)) +
        (qtyConvM * ((!productConversionM) ? 0 : productConversionM)) +
        (qtyConvS * ((!productConversionS) ? 0 : productConversionS));

    if ((arr.length == 2) || (arr.length == 3)) {
        var conversion = CommonUtility.calcToConversion(qtyTransaction, productConversionL, productConversionM, productConversionS);
        qtyConvL = conversion.qtyConvL;
        qtyConvM = conversion.qtyConvM;
        qtyConvS = conversion.qtyConvS;
    }

    return {
        qtyConvL: qtyConvL,
        qtyConvM: qtyConvM,
        qtyConvS: qtyConvS,
        qtyTransaction: qtyTransaction,
        qtyTransactionConv: qtyConvL.toString() + '/' + qtyConvM.toString() + '/' + qtyConvS.toString()
    };
}

// Converter from Pcs to UOM Conversion.
CommonUtility.calcToConversion = function (qty, productConversionL, productConversionM, productConversionS) {
    var qtyConvL = 0;
    var qtyConvM = 0;
    var qtyConvS = 0;
    if ((qty != undefined) && (qty != null)) {
        var div;
        var mod = 0;

        div = 0;
        if (productConversionL) {
            div = Math.floor(qty / productConversionL);
            mod = qty % productConversionL;
            qty = (mod == 0) ? div : mod;
        }

        qtyConvL = div;
        div = 0;
        if ((mod > 0) && productConversionM) {
            div = Math.floor(qty / productConversionM);
            mod = qty % productConversionM;
            qty = (mod == 0) ? div : mod;
        }

        qtyConvM = div;
        qtyConvS = mod;
    }

    return {
        qtyConv: qtyConvL.toString() + '/' + qtyConvM.toString() + '/' + qtyConvS.toString(),
        qtyConvL: qtyConvL,
        qtyConvM: qtyConvM,
        qtyConvS: qtyConvS
    };
}



// Calculate product conversion.
CommonUtility.calcConversion = function (value, rowData) {
    var conversion = CommonUtility.getConversion(
        (value) ? value : '0/0/0',
        DXUtility.getValue(rowData, 'ProductConversionL'),
        DXUtility.getValue(rowData, 'ProductConversionM'),
        DXUtility.getValue(rowData, 'ProductConversionS')
    );

    DXUtility.setValue(rowData, 'QtyOrder', conversion.qtyTransaction);
    DXUtility.setValue(rowData, 'QtyConvL', conversion.qtyConvL);
    DXUtility.setValue(rowData, 'QtyConvM', conversion.qtyConvM);
    DXUtility.setValue(rowData, 'QtyConvS', conversion.qtyConvS);

    var weight = DXUtility.getValue(rowData, 'ProductWeight');
    var dimensionL = DXUtility.getValue(rowData, 'ProductDimensionL');
    var dimensionW = DXUtility.getValue(rowData, 'ProductDimensionW');
    var dimensionH = DXUtility.getValue(rowData, 'ProductDimensionH');

    if (weight != undefined)
        DXUtility.setValue(rowData, 'SubtotalWeight', conversion.qtyTransaction * weight);

    if ((dimensionL != undefined) && (dimensionW != undefined) && (dimensionH != undefined))
        DXUtility.setValue(rowData, 'SubtotalDimension', conversion.qtyTransaction *
            (dimensionL * dimensionW * dimensionH));

    return conversion;
}

// Get Discount Strata Details percentage value.
CommonUtility.getDiscountStrataDetailsPercentage = function (strata, priceDate, qtyOrder) {
    if ((strata.ValidDateFrom && (strata.ValidDateFrom() <= priceDate)) &&
        (strata.ValidDateTo && (strata.ValidDateTo() >= priceDate))) {
        var dataSourceStrataDetails = new DevExpress.data.DataSource({
            store: strata.ChildDetails(),
            filter: [['Minimum', '<=', qtyOrder], 'and', ['Maximum', '>=', qtyOrder]]
        });

        dataSourceStrataDetails.load();
        if (dataSourceStrataDetails.items().length > 0)
            return dataSourceStrataDetails.items()[0].DiscountPercentage();
    }

    return 0;
}

// Calculate Product Price and Discount.
CommonUtility.calcProductPriceAndDiscount = function (transactionDate, dataGrid, rowIndex, rowData,
    selectedProductPrices, selectedDiscountGroup, forceZero) {
    CommonUtility.calcProductPriceAndDiscountBase(transactionDate, dataGrid, rowIndex, rowData,
        selectedProductPrices, selectedDiscountGroup, forceZero, false)
}

// Calculate Product Price and Discount with option.
CommonUtility.calcProductPriceAndDiscountBase = function (transactionDate, dataGrid, rowIndex, rowData,
    selectedProductPrices, selectedDiscountGroup, forceZero, isOneLevelDiscount) {
    var priceDate = dataGrid.cellValue(rowIndex, 'PriceDate');
    if (!priceDate)
        priceDate = new Date(transactionDate);

    var productID = DXUtility.getValue(rowData, 'ProductID');
    var qtyOrder = DXUtility.getValue(rowData, 'QtyOrder');
    var weight = 0;
    var dimension = 0;
    var unitGrossPrice = 0;
    var unitPrice = 0;
    var discountStrata1Percentage = 0;
    var discountStrata2Percentage = 0;
    var discountStrata3Percentage = 0;
    var discountStrata4Percentage = 0;
    var discountStrata5Percentage = 0;

    var addDiscountStrataPercentage = dataGrid.cellValue(rowIndex, 'AddDiscountStrataPercentage');
    if (addDiscountStrataPercentage == undefined)
        addDiscountStrataPercentage = 0;

    var taxPercentage = 10; ///////////////////////////

    if (productID) {
        var dataSourcePoductPrice = new DevExpress.data.DataSource({
            store: selectedProductPrices,
            filter: [
                ['ProductID', '=', productID], 'and',
                ['ValidDateFrom', '<=', new Date(priceDate)], 'and',
                ['ValidDateTo', '>=', new Date(priceDate)]
            ]
        });

        dataSourcePoductPrice.load();
        if (dataSourcePoductPrice.items().length > 0) {
            var item = dataSourcePoductPrice.items()[0];

            weight = item.ProductWeight();
            dimension = item.ProductDimensionL() * item.ProductDimensionW() * item.ProductDimensionH();
            unitGrossPrice = item.GrossPrice();
            unitPrice = item.Price();
        }

        if (selectedDiscountGroup.length > 0) {
            var items = $.grep(selectedDiscountGroup[0].ChildProducts(), function (e) {
                return (e.ProductID() == productID);
            });

            if (items.length > 0) {
                var discountGroupProduct = items[0];

                if (discountGroupProduct.ChildStrata1())
                    discountStrata1Percentage = CommonUtility.getDiscountStrataDetailsPercentage(
                        discountGroupProduct.ChildStrata1(), priceDate, qtyOrder);

                if (isOneLevelDiscount) {
                    if (discountGroupProduct.ChildStrata2())
                        discountStrata2Percentage = CommonUtility.getDiscountStrataDetailsPercentage(
                            discountGroupProduct.ChildStrata2(), priceDate, qtyOrder);

                    if (discountGroupProduct.ChildStrata3())
                        discountStrata3Percentage = CommonUtility.getDiscountStrataDetailsPercentage(
                            discountGroupProduct.ChildStrata3(), priceDate, qtyOrder);

                    if (discountGroupProduct.ChildStrata4())
                        discountStrata4Percentage = CommonUtility.getDiscountStrataDetailsPercentage(
                            discountGroupProduct.ChildStrata4(), priceDate, qtyOrder);

                    if (discountGroupProduct.ChildStrata5())
                        discountStrata5Percentage = CommonUtility.getDiscountStrataDetailsPercentage(
                            discountGroupProduct.ChildStrata5(), priceDate, qtyOrder);
                }
            }
        }
    }

    var subtotalWeight = 0; //weight * qtyOrder;
    var subtotalDimension = 0; //dimension * qtyOrder;

    DXUtility.setValue(rowData, 'UnitGrossPrice', unitGrossPrice);
    DXUtility.setValue(rowData, 'SubtotalWeight', subtotalWeight);
    DXUtility.setValue(rowData, 'SubtotalDimension', subtotalDimension);

    // Raw (without rounded)
    var rawSubtotalGrossPrice = unitGrossPrice * qtyOrder;
    var rawSubtotalPrice = unitPrice * qtyOrder;

    if (forceZero) {
        rawSubtotalGrossPrice = 0;
        rawSubtotalPrice = 0;
    }

    var rawDiscountStrata1Amount = rawSubtotalPrice * (discountStrata1Percentage / 100);
    var rawSubtotalDiscountStrata1 = rawSubtotalPrice - rawDiscountStrata1Amount;

    var rawDiscountStrata2Amount = rawSubtotalDiscountStrata1 * (discountStrata2Percentage / 100);
    var rawSubtotalDiscountStrata2 = rawSubtotalDiscountStrata1 - rawDiscountStrata2Amount;

    var rawDiscountStrata3Amount = rawSubtotalDiscountStrata2 * (discountStrata3Percentage / 100);
    var rawSubtotalDiscountStrata3 = rawSubtotalDiscountStrata2 - rawDiscountStrata3Amount;

    var rawDiscountStrata4Amount = rawSubtotalDiscountStrata3 * (discountStrata4Percentage / 100);
    var rawSubtotalDiscountStrata4 = rawSubtotalDiscountStrata3 - rawDiscountStrata4Amount;

    var rawDiscountStrata5Amount = rawSubtotalDiscountStrata4 * (discountStrata5Percentage / 100);
    var rawSubtotalDiscountStrata5 = rawSubtotalDiscountStrata4 - rawDiscountStrata5Amount;

    var rawAddDiscountStrataAmount = rawSubtotalDiscountStrata5 * (addDiscountStrataPercentage / 100);

    var rawSubtotal = rawSubtotalDiscountStrata5 - rawAddDiscountStrataAmount;
    var rawSubtotalGross = rawSubtotal / ((taxPercentage / 100) + 1);
    var rawSubtotalTax = rawSubtotal - rawSubtotalGross;

    DXUtility.setValue(rowData, 'RawSubtotalGrossPrice', rawSubtotalGrossPrice);
    DXUtility.setValue(rowData, 'RawSubtotalPrice', rawSubtotalPrice);
    DXUtility.setValue(rowData, 'RawDiscountStrata1Amount', rawDiscountStrata1Amount);
    DXUtility.setValue(rowData, 'RawDiscountStrata2Amount', rawDiscountStrata2Amount);
    DXUtility.setValue(rowData, 'RawDiscountStrata3Amount', rawDiscountStrata3Amount);
    DXUtility.setValue(rowData, 'RawDiscountStrata4Amount', rawDiscountStrata4Amount);
    DXUtility.setValue(rowData, 'RawDiscountStrata5Amount', rawDiscountStrata5Amount);
    DXUtility.setValue(rowData, 'RawAddDiscountStrataAmount', rawAddDiscountStrataAmount);
    DXUtility.setValue(rowData, 'RawSubtotalDiscountStrata1', rawSubtotalDiscountStrata1);
    DXUtility.setValue(rowData, 'RawSubtotalDiscountStrata2', rawSubtotalDiscountStrata2);
    DXUtility.setValue(rowData, 'RawSubtotalDiscountStrata3', rawSubtotalDiscountStrata3);
    DXUtility.setValue(rowData, 'RawSubtotalDiscountStrata4', rawSubtotalDiscountStrata4);
    DXUtility.setValue(rowData, 'RawSubtotalDiscountStrata5', rawSubtotalDiscountStrata5);
    DXUtility.setValue(rowData, 'RawSubtotalGross', rawSubtotalGross);
    DXUtility.setValue(rowData, 'RawSubtotalTax', rawSubtotalTax);
    DXUtility.setValue(rowData, 'RawSubtotal', rawSubtotal);

    // Rounded
    var decimalLength = 4;
    var subtotalGrossPrice = parseFloat((unitGrossPrice * qtyOrder).toFixed(decimalLength));
    var subtotalPrice = parseFloat((unitPrice * qtyOrder).toFixed(decimalLength));

    if (forceZero) {
        subtotalGrossPrice = 0;
        subtotalPrice = 0;
    }

    var discountStrata1Amount = parseFloat((subtotalPrice * (discountStrata1Percentage / 100)).toFixed(decimalLength));
    var subtotalDiscountStrata1 = parseFloat((subtotalPrice - discountStrata1Amount).toFixed(decimalLength));

    var discountStrata2Amount = parseFloat((subtotalDiscountStrata1 * (discountStrata2Percentage / 100)).toFixed(decimalLength));
    var subtotalDiscountStrata2 = parseFloat((subtotalDiscountStrata1 - discountStrata2Amount).toFixed(decimalLength));

    var discountStrata3Amount = parseFloat((subtotalDiscountStrata2 * (discountStrata3Percentage / 100)).toFixed(decimalLength));
    var subtotalDiscountStrata3 = parseFloat((subtotalDiscountStrata2 - discountStrata3Amount).toFixed(decimalLength));

    var discountStrata4Amount = parseFloat((subtotalDiscountStrata3 * (discountStrata4Percentage / 100)).toFixed(decimalLength));
    var subtotalDiscountStrata4 = parseFloat((subtotalDiscountStrata3 - discountStrata4Amount).toFixed(decimalLength));

    var discountStrata5Amount = parseFloat((subtotalDiscountStrata4 * (discountStrata5Percentage / 100)).toFixed(decimalLength));
    var subtotalDiscountStrata5 = parseFloat((subtotalDiscountStrata4 - discountStrata5Amount).toFixed(decimalLength));

    var addDiscountStrataAmount = parseFloat((subtotalDiscountStrata5 * (addDiscountStrataPercentage / 100)).toFixed(decimalLength));

    var subtotal = parseFloat((subtotalDiscountStrata5 - addDiscountStrataAmount).toFixed(decimalLength));
    var subtotalGross = parseFloat((subtotal / ((taxPercentage / 100) + 1)).toFixed(decimalLength));
    var subtotalTax = parseFloat((subtotal - subtotalGross).toFixed(decimalLength));

    DXUtility.setValue(rowData, 'SubtotalDiscountStrata1', subtotalDiscountStrata1);
    DXUtility.setValue(rowData, 'SubtotalDiscountStrata2', subtotalDiscountStrata2);
    DXUtility.setValue(rowData, 'SubtotalDiscountStrata3', subtotalDiscountStrata3);
    DXUtility.setValue(rowData, 'SubtotalDiscountStrata4', subtotalDiscountStrata4);
    DXUtility.setValue(rowData, 'SubtotalDiscountStrata5', subtotalDiscountStrata5);
    DXUtility.setValue(rowData, 'TaxPercentage', taxPercentage);
    DXUtility.setValue(rowData, 'SubtotalGrossPrice', subtotalGrossPrice);
    DXUtility.setValue(rowData, 'SubtotalPrice', subtotalPrice);

    dataGrid.cellValue(rowIndex, 'UnitPrice', unitPrice);

    DXUtility.setValue(rowData, 'DiscountStrata1Percentage', discountStrata1Percentage);
    DXUtility.setValue(rowData, 'DiscountStrata1Amount', discountStrata1Amount);
    DXUtility.setValue(rowData, 'DiscountStrata2Percentage', discountStrata2Percentage);
    DXUtility.setValue(rowData, 'DiscountStrata2Amount', discountStrata2Amount);
    DXUtility.setValue(rowData, 'DiscountStrata3Percentage', discountStrata3Percentage);
    DXUtility.setValue(rowData, 'DiscountStrata3Amount', discountStrata3Amount);
    DXUtility.setValue(rowData, 'DiscountStrata4Percentage', discountStrata4Percentage);
    DXUtility.setValue(rowData, 'DiscountStrata4Amount', discountStrata4Amount);
    DXUtility.setValue(rowData, 'DiscountStrata5Percentage', discountStrata5Percentage);
    DXUtility.setValue(rowData, 'DiscountStrata5Amount', discountStrata5Amount);

    //dataGrid.cellValue(rowIndex, 'DiscountStrata1Percentage', discountStrata1Percentage);
    //dataGrid.cellValue(rowIndex, 'DiscountStrata1Amount', discountStrata1Amount);

    //dataGrid.cellValue(rowIndex, 'DiscountStrata2Percentage', discountStrata2Percentage);
    //dataGrid.cellValue(rowIndex, 'DiscountStrata2Amount', discountStrata2Amount);

    //dataGrid.cellValue(rowIndex, 'DiscountStrata3Percentage', discountStrata3Percentage);
    //dataGrid.cellValue(rowIndex, 'DiscountStrata3Amount', discountStrata3Amount);

    //dataGrid.cellValue(rowIndex, 'DiscountStrata4Percentage', discountStrata4Percentage);
    //dataGrid.cellValue(rowIndex, 'DiscountStrata4Amount', discountStrata4Amount);

    //dataGrid.cellValue(rowIndex, 'DiscountStrata5Percentage', discountStrata5Percentage);
    //dataGrid.cellValue(rowIndex, 'DiscountStrata5Amount', discountStrata5Amount);

    dataGrid.cellValue(rowIndex, 'DiscountStrataDefaultAmount', discountStrata1Amount + discountStrata2Amount +
        discountStrata3Amount + discountStrata4Amount + discountStrata5Amount);

    dataGrid.cellValue(rowIndex, 'AddDiscountStrataAmount', addDiscountStrataAmount);

    dataGrid.cellValue(rowIndex, 'SubtotalGross', subtotalGross);
    dataGrid.cellValue(rowIndex, 'SubtotalTax', subtotalTax);
    dataGrid.cellValue(rowIndex, 'Subtotal', subtotal);
}





// Update values of Sales Order Summary Form.
CommonUtility.updateSalesOrderSummaryForm = function (form, dataGrid) {
    var store = dataGrid.option('dataSource').store();
    var totalGross = 0;
    var totalTax = 0;
    var total = 0;
    for (var i = 0; i < store._array.length; i++) {
        var item = store._array[i];

        totalGross += item.Subtotal - item.SubtotalTax;
        totalTax += item.SubtotalTax;
        total += item.Subtotal;
    }

    form.getEditor('TotalGross').option('value', CommonUtility.getNumberFormat(totalGross));
    form.getEditor('TotalTax').option('value', CommonUtility.getNumberFormat(totalTax));
    form.getEditor('Total').option('value', CommonUtility.getNumberFormat(total));
}



// Update summary data grid data source store.
CommonUtility.updateSummariesArrayStore = function (store, summary) {
    for (var i = 0; i < store._array.length; i++) {
        if (store._array[i].ProductID == summary.ProductID()) {
            store._array[i] = summary.toJS();
            break;
        }
    }
}

// Update defer summary data grid data source store.
CommonUtility.updateDeferSummariesArrayStore = function (store, productID, summary) {
    for (var i = 0; i < store._array.length; i++) {
        if (store._array[i].ProductID == productID) {
            var summaryJS = ko.toJS(summary);
            var keys = Object.keys(summaryJS);
            for (var j = 0; j < keys.length; j++)
                store._array[i][keys[j]] = summaryJS[keys[j]];

            break;
        }
    }
}

// Validate summary data grid data source store.
CommonUtility.validateSummaryArrayStore = function (store, viewModel, summary) {
    for (var i = 0; i < store._array.length; i++) {
        if (store._array[i].ProductID == summary.ProductID())
            return new Dismoyo_Ciptoning_Client[viewModel](store._array[i]);
    }

    return new Dismoyo_Ciptoning_Client[viewModel]();
}



// Get index of item in data source store.
CommonUtility.indexOfArrayStoreItem = function (store, item) {
    var keys = store.key();
    for (var i = 0; i < store._array.length; i++) {
        for (var j = 0; j < keys.length; j++) {
            if (store._array[i][keys[j]] != item[keys[j]])
                break;

            if (j == keys.length - 1)
                return i;
        }
    }

    return -1;
}

// Move last element of the array store to the top.
CommonUtility.moveLastElementToTop = function (arrayStore, values, key) {
    var index = CommonUtility.indexOfArrayStoreItem(arrayStore, values);
    if (index >= 0)
        arrayStore._array.splice(index, 1);

    arrayStore._array.splice(0, 0, values);
}

// Create items data grid array data source.
CommonUtility.createArrayDataSource = function (viewModel, key, items) {
    return new DevExpress.data.DataSource({
        store: {
            type: 'array',
            key: key,
            data: ko.toJS(items),
            onInserted: function (values, key) {
                CommonUtility.moveLastElementToTop(this, values, key);
            }
        },
        paginate: false,
        map: function (item) { return new Dismoyo_Ciptoning_Client[viewModel](item); }
    });
}

// Validate inserted item of data grid.
CommonUtility.validateDataGridInsertedItem = function (dataGrid, item) {
    var dataSource = dataGrid.option('dataSource');
    var store = dataSource.store();
    var index = CommonUtility.indexOfArrayStoreItem(store, item);
    if (index >= 0)
        store._array[index] = item;
    else
        store._array.splice(0, 0, item);

    if (dataSource.items().length != store._array.length) {
        dataSource.reload();
        dataGrid.refresh();
    }

    dataGrid.selectRows(item);
}

// Validate removed item of data grid.
CommonUtility.validateDataGridRemovedItem = function (dataGrid, item) {
    var dataSource = dataGrid.option('dataSource');
    var store = dataSource.store();
    var index = CommonUtility.indexOfArrayStoreItem(store, item);
    if (index >= 0)
        store._array.splice(i, 1);

    if (dataSource.items().length != store._array.length) {
        dataSource.reload();
        dataGrid.refresh();
    }
}


// Validate inserted transaction summary of data grid.
CommonUtility.validateDataGridInsertedTransactionSummary = function (dataGrid, summary) {
    CommonUtility.validateDataGridInsertedItem(dataGrid, summary);
}

// Validate removed transaction summary of data grid.
CommonUtility.validateDataGridRemovedTransactionSummary = function (dataGrid, summary) {
    CommonUtility.validateDataGridRemovedItem(dataGrid, summary);
}


// Validate inserted transaction details of data grid.
CommonUtility.validateDataGridInsertedTransactionDetails = function (dataGrid, details) {
    CommonUtility.validateDataGridInsertedItem(dataGrid, details);
}

// Validate removed transaction details of data grid.
CommonUtility.validateDataGridRemovedTransactionDetails = function (dataGrid, details) {
    CommonUtility.validateDataGridRemovedItem(dataGrid, details);
}


// Validate when updating transaction details of data grid.
CommonUtility.validateDataGridUpdatingTransactionDetails = function (info,
    qtyConvLColumn, qtyConvMColumn, qtyConvSColumn, qtyTransactionConvColumn, qtyTransactionColumn) {
    if (info.newData[qtyTransactionConvColumn]) {
        var conversion = CommonUtility.getConversion(
            info.newData[qtyTransactionConvColumn],
            DXUtility.getValue(info.oldData, 'ProductConversionL'),
            DXUtility.getValue(info.oldData, 'ProductConversionM'),
            DXUtility.getValue(info.oldData, 'ProductConversionS')
        );

        info.newData[qtyConvLColumn] = conversion.qtyConvL;
        info.newData[qtyConvMColumn] = conversion.qtyConvM;
        info.newData[qtyConvSColumn] = conversion.qtyConvS;
        info.newData[qtyTransactionColumn] = conversion.qtyTransaction;
    }
}


// Update details data grid data source store.
CommonUtility.updateDetailsArrayStore = function (store, details) {
    for (var i = 0; i < store._array.length; i++) {
        if ((store._array[i].ProductID == details.ProductID()) &&
            (store._array[i].ProductLotID == details.ProductLotID())) {
            store._array[i] = details.toJS();
            break;
        }
    }
}


// Validate product lot editing before save.
CommonUtility.validateProductLotEditing = function (data, dataSource, summaryQty, keyword, detailsViewModel,
    qtyConvLColumn, qtyConvMColumn, qtyConvSColumn, qtyTransactionConvColumn, qtyTransactionColumn,
    validateAllItemStatus) {
    var detailsQty = 0;
    for (var i = 0; i < dataSource.items().length; i++) {
        var details = dataSource.items()[i];
        detailsQty += details[qtyTransactionColumn]();
    }

    if (detailsQty != summaryQty) {
        DevExpress.ui.dialog.alert('The total quantity of items is not matched with the summary.', 'Save Failed');
        return false;
    }

    for (var i = 0; i < data.ChildDetails().length; i++) {
        var details = data.ChildDetails()[i];
        if (details[qtyTransactionColumn]() > 0) {
            details[qtyConvLColumn](0);
            details[qtyConvMColumn](0);
            details[qtyConvSColumn](0);
            details[qtyTransactionColumn](0);
            details[qtyTransactionConvColumn]('0/0/0');
        }
    }

    var childDetails = dataSource.items();
    for (var i = 0; i < childDetails.length; i++) {
        var details = childDetails[i];
        var items = $.grep(data.ChildDetails(), function (e) {
            return (e.ProductLotID() == DXUtility.getValue(details, 'ProductLotID'));
        });

        if (items.length > 0) {
            var item = items[0];

            var conversion = CommonUtility.getConversion(
                DXUtility.getValue(details, qtyTransactionConvColumn),
                DXUtility.getValue(details, 'ProductConversionL'),
                DXUtility.getValue(details, 'ProductConversionM'),
                DXUtility.getValue(details, 'ProductConversionS')
            );

            item[qtyConvLColumn](conversion.qtyConvL);
            item[qtyConvMColumn](conversion.qtyConvM);
            item[qtyConvSColumn](conversion.qtyConvS);
            item[qtyTransactionColumn](conversion.qtyTransaction);
            item[qtyTransactionConvColumn](conversion.qtyTransactionConv);
        }
        else {
            if (validateAllItemStatus) {
                var keys = Object.keys(details);
                for (var j = 0; j < keys.length; j++) {
                    if (keys[j].indexOf('Qty' + keyword + 'Conv') == 0) {
                        if (keys[j] != qtyTransactionConvColumn)
                            details[keys[j]] = '0/0/0';
                    } else if (keys[j].indexOf('Qty' + keyword) == 0) {
                        if (keys[j] != qtyTransactionColumn)
                            details[keys[j]] = 0;
                    } else if (keys[j].indexOf('QtyConv') == 0) {
                        if ((keys[j] != qtyConvLColumn) &&
                            (keys[j] != qtyConvMColumn) &&
                            (keys[j] != qtyConvSColumn))
                            details[keys[j]] = 0;
                    }
                }
            }

            data.ChildDetails().push(new Dismoyo_Ciptoning_Client[detailsViewModel](ko.toJS(details)));
        }
    }

    var index = 0;
    while (index < data.ChildDetails().length) {
        var details = data.ChildDetails()[index];
        if (validateAllItemStatus) {
            if ((details['QtyOnHandGood']() == 0) &&
                (details['QtyOnHandHold']() == 0) &&
                (details['QtyOnHandBad']() == 0) &&
                (details['Qty' + keyword + 'Good']() == 0) &&
                (details['Qty' + keyword + 'Hold']() == 0) &&
                (details['Qty' + keyword + 'Bad']() == 0)) {
                data.ChildDetails().splice(index, 1);
                continue;
            }
        } else {
            if (details[qtyTransactionColumn]() == 0) {
                data.ChildDetails().splice(index, 1);
                continue;
            }
        }

        index++;
    }

    var conversion = CommonUtility.getConversion(
        DXUtility.getValue(data, qtyTransactionConvColumn),
        DXUtility.getValue(data, 'ProductConversionL'),
        DXUtility.getValue(data, 'ProductConversionM'),
        DXUtility.getValue(data, 'ProductConversionS')
    );

    data[qtyConvLColumn](conversion.qtyConvL);
    data[qtyConvMColumn](conversion.qtyConvM);
    data[qtyConvSColumn](conversion.qtyConvS);
    data[qtyTransactionColumn](conversion.qtyTransaction);
    return true;
}

// Update the summary of product lot editing.
CommonUtility.updateProductLotEditingSummary = function (options,
    qtyTransactionConvColumn, qtyTransactionColumn) {
    switch (options.summaryProcess) {
        case 'start':
            break;
        case 'calculate':
            break;
        case 'finalize':
            var items = options.component.option("dataSource").store()._array;

            options.totalValue = 0;
            for (var i = 0; i < items.length; i++) {
                var conversion = CommonUtility.getConversion(
                    (items[i][qtyTransactionConvColumn] ? items[i][qtyTransactionConvColumn] : '0/0/0'),
                    items[i].ProductConversionL,
                    items[i].ProductConversionM,
                    items[i].ProductConversionS
                );

                options.totalValue += conversion.qtyTransaction;
            }

            if (options.name == 'TotalQtyLMS') {
                if (options.totalValue > 0) {
                    var conversion = CommonUtility.calcToConversion(options.totalValue,
                        items[0].ProductConversionL,
                        items[0].ProductConversionM,
                        items[0].ProductConversionS
                    );

                    options.totalValue = conversion.qtyConv;
                } else
                    options.totalValue = '0/0/0';
            }
            break;
    }
}



// Set cookie.
CommonUtility.setCookie = function (cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
    var expires = 'expires=' + d.toUTCString();
    document.cookie = cname + '=' + cvalue + '; ' + expires;
}

// Set Json format cookie.
CommonUtility.setJsonCookie = function (cname, cvalue, exdays) {
    CommonUtility.setCookie(cname, JSON.stringify(cvalue), exdays);
}

// Get cookie.
CommonUtility.getCookie = function (cname) {
    var name = cname + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ')
            c = c.substring(1);

        if (c.indexOf(name) == 0)
            return c.substring(name.length, c.length);
    }

    return '';
}

// Get Json format cookie.
CommonUtility.getJsonCookie = function (cname) {
    var c = CommonUtility.getCookie(cname);
    if (c.length > 0)
        return JSON.parse(c);

    return undefined;
}

// Clear cookie.
CommonUtility.clearCookie = function (cname) {
    CommonUtility.setCookie(cname, '', DateTimeUtility.minDate());
}

// Hide error message on data grid.
CommonUtility.hideErrorMessageOnDataGrid = function (dataGrid) {
    setTimeout(function () { $('.dx-error-row').remove(); }, 5000);
}


// Create Product lookup header.
CommonUtility.createProductLookupHeader = function (id, element, productItemStatus) {
    var colHeader = element.find('#' + id);
    if (colHeader.length == 0) {
        var div = '<div id="' + id + '" class="dx-datagrid datagrid-columnheader">';
        div += '       <table class="dx-datagrid-headers dx-datagrid-nowrap">';
        div += '           <colgroup>';
        div += '               <col style="width: 350px;">';

        if (productItemStatus)
            div += '           <col style="width: 120px;">';
        else {
            div += '           <col style="width: 80px;">';
            div += '           <col style="width: 80px;">';
            div += '           <col style="width: 80px;">';
        }

        div += '               <col style="width: 80px;">';
        div += '               <col style="width: 80px;">';
        div += '               <col style="width: 80px;">';
        div += '           </colgroup><tbody>';
        div += '           <tr class="dx-row dx-header-row dx-column-lines">';
        div += '               <td class="dx-datagrid-action" style="border-left-style: none !important;">';
        div += '' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;"' + (productItemStatus ? '' : ' colSpan="3"') + '>';
        div += 'On Hand Qty (Pcs)' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;" colSpan="3">';
        div += 'Conversion Qty (Pcs)' + '</td>';
        div += '</tr>';

        div += '           <tr class="dx-row dx-header-row dx-column-lines">';
        div += '               <td class="dx-datagrid-action" style="border-left-style: none !important;">';
        div += 'Product' + '</td>';

        if (!productItemStatus || (productItemStatus == 1)) { // Good
            div += '           <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
            div += 'Good' + '</td>';
        }

        if (!productItemStatus || (productItemStatus == 2)) { // Hold
            div += '           <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
            div += 'Hold' + '</td>';
        }

        if (!productItemStatus || (productItemStatus == 3)) { // Bad
            div += '           <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
            div += 'Bad' + '</td>';
        }

        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        div += 'L' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        div += 'M' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        div += 'S' + '</td>';
        div += '</tr></tbody></table></div>';

        var list = element.find('.dx-list');
        list.attr('style', 'top: 55px !important');
        list.before($(div));
    }
}

// Create Product lookup item.
CommonUtility.createProductLookupItem = function (data, element, productItemStatus) {
    var title = '';
    var div = '<div class="dx-datagrid dx-datagrid-rowsview dx-datagrid-nowrap" style="background-color: inherit;">';
    div += '       <table class="dx-datagrid-table dx-datagrid-table-fixed" style="border-collapse: initial !important;">';
    div += '           <colgroup>';
    div += '               <col style="width: 350px;">';

    if (productItemStatus)
        div += '           <col style="width: 120px;">';
    else {
        div += '           <col style="width: 80px;">';
        div += '           <col style="width: 80px;">';
        div += '           <col style="width: 80px;">';
    }

    div += '               <col style="width: 80px;">';
    div += '               <col style="width: 80px;">';
    div += '               <col style="width: 80px;">';
    div += '           </colgroup><tbody>';
    div += '           <tr class="dx-row dx-data-row dx-column-lines">';
    div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.Product()) + '"';
    div += '                   style="text-align: left; border-left-style: none !important;">';
    div += HtmlUtility.htmlEncode(data.Product()) + '</td>';

    if (!productItemStatus || (productItemStatus == 1)) { // Good
        data.QtyOnHand = data.QtyOnHandGood;
        title = data.QtyOnHand();
        div += '           <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
        div += title + '</td>';
    }

    if (!productItemStatus || (productItemStatus == 2)) { // Hold
        data.QtyOnHand = data.QtyOnHandHold;
        title = data.QtyOnHand();
        div += '           <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
        div += title + '</td>';
    }

    if (!productItemStatus || (productItemStatus == 3)) { // Bad
        data.QtyOnHand = data.QtyOnHandBad;
        title = data.QtyOnHand();
        div += '           <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
        div += title + '</td>';
    }

    title = (!data.ProductUOMLID() ? '' : data.ProductConversionL());
    div += '               <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    title = (!data.ProductUOMMID() ? '' : data.ProductConversionM());
    div += '               <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    title = (!data.ProductUOMSID() ? '' : data.ProductConversionS());
    div += '               <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    div += '</tr></tbody></table></div>';

    element.attr('style', 'padding: 0px');

    return div;
}


// Create Product Lot lookup header.
CommonUtility.createProductLotLookupHeader = function (id, element, productItemStatus) {
    var colHeader = element.find('#' + id);
    if (colHeader.length == 0) {
        var title = '';
        var div = '<div id="' + id + '" class="dx-datagrid datagrid-columnheader">';
        div += '       <table class="dx-datagrid-headers dx-datagrid-nowrap">';
        div += '           <colgroup>';
        div += '               <col style="width: 120px;">';
        div += '               <col style="width: 120px;">';
        div += '               <col style="width: 120px;">';
        div += '               <col style="width: 80px;">';
        div += '               <col style="width: 80px;">';
        div += '               <col style="width: 80px;">';
        div += '           </colgroup><tbody>';
        div += '           <tr class="dx-row dx-header-row dx-column-lines">';
        div += '               <td class="dx-datagrid-action" style="border-left-style: none !important;">';
        div += '' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;">';
        div += '' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;">';
        div += 'On Hand Qty (Pcs)' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;" colSpan="3">';
        div += 'Conversion Qty (Pcs)' + '</td>';
        div += '</tr>';

        div += '           <tr class="dx-row dx-header-row dx-column-lines">';
        div += '               <td class="dx-datagrid-action" style="text-align: center; border-left-style: none !important;">';
        div += 'Lot Number' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: center;">';
        div += 'Expired Date' + '</td>';

        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        switch (productItemStatus) {
            case 1: // Good
                title = 'Good';
                break;
            case 2: // Hold
                title = 'Hold';
                break;
            case 3: // Bad
                title = 'Bad';
                break;
        }
        div += title + '</td>';

        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        div += 'L' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        div += 'M' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: right; border-top: 1px solid #D3D3D3;">';
        div += 'S' + '</td>';
        div += '</tr></tbody></table></div>';

        var list = element.find('.dx-list');
        list.attr('style', 'top: 55px !important');
        list.before($(div));
    }
}

// Create Product Lot lookup item.
CommonUtility.createProductLotLookupItem = function (data, element, qtyOnHandColumnName) {
    var title = '';
    var div = '<div class="dx-datagrid dx-datagrid-rowsview dx-datagrid-nowrap" style="background-color: inherit;">';
    div += '       <table class="dx-datagrid-table dx-datagrid-table-fixed" style="border-collapse: initial !important;">';
    div += '           <colgroup>';
    div += '               <col style="width: 120px;">';
    div += '               <col style="width: 120px;">';
    div += '               <col style="width: 120px;">';
    div += '               <col style="width: 80px;">';
    div += '               <col style="width: 80px;">';
    div += '               <col style="width: 80px;">';
    div += '           </colgroup><tbody>';
    div += '           <tr class="dx-row dx-data-row dx-column-lines">';
    div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.ProductLotCode()) + '"';
    div += '                   style="text-align: center; border-left-style: none !important;">';
    div += HtmlUtility.htmlEncode(data.ProductLotCode()) + '</td>';

    title = HtmlUtility.htmlEncode(DateTimeUtility.convertToLocal(data.ProductLotExpiredDate()).toISOString().substring(0, 10));
    div += '           <td class="dx-datagrid-action" title="' + title + '" style="text-align: center;">';
    div += title + '</td>';

    title = data[qtyOnHandColumnName]();
    div += '           <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    title = (!data.ProductUOMLID() ? '' : data.ProductConversionL());
    div += '               <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    title = (!data.ProductUOMMID() ? '' : data.ProductConversionM());
    div += '               <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    title = (!data.ProductUOMSID() ? '' : data.ProductConversionS());
    div += '               <td class="dx-datagrid-action" title="' + title + '" style="text-align: right;">';
    div += title + '</td>';

    div += '</tr></tbody></table></div>';

    element.attr('style', 'padding: 0px');

    return div;
}


// Compare two arrays contents.
CommonUtility.compareArray = function (arr1, arr2) {
    if (!arr1 || !arr2)
        return false;

    if (arr1.length != arr2.length)
        return false;

    for (var i = 0, l = arr1.length; i < l; i++) {
        if ((arr1[i] instanceof Array) && (arr2[i] instanceof Array)) {
            if (!CommonUtility.compareArray(arr1[i], arr2[i]))
                return false;
        } else {
            if ((arr1[i] == arr2[i]) ||
                ((arr1[i]._value != undefined) && (arr2[i]._value != undefined) && (arr1[i]._value == arr2[i]._value)))
                continue;

            return false;
        }
    }

    return true;
}


// Common Report Period value changed event handler.
CommonUtility.reportPeriodValueChanged = function (ctl, form, isSingleDate) {
    var itemReportDateFrom = form.itemOption('SalesByOrderReports.ReportDateFrom');
    var itemReportDateTo = form.itemOption('SalesByOrderReports.ReportDateTo');

    var reportDateFrom = form.getEditor('ReportDateFrom');
    var reportDateTo = form.getEditor('ReportDateTo');

    itemReportDateFrom.editorOptions.value = null;
    itemReportDateTo.editorOptions.value = null;


    switch (ctl.value) {
        case 1:
            if (isSingleDate) {
                itemReportDateFrom.label.text = 'Report Date From';
                itemReportDateFrom.visible = true;
                itemReportDateTo.visible = true;
            }

            itemReportDateFrom.editorOptions.placeholder = 'mm/dd/yyyy';
            itemReportDateFrom.editorOptions.formatString = 'MM/dd/yyyy';
            itemReportDateFrom.editorOptions.maxZoomLevel = 'month';

            itemReportDateTo.editorOptions.placeholder = 'mm/dd/yyyy';
            itemReportDateTo.editorOptions.formatString = 'MM/dd/yyyy';
            itemReportDateTo.editorOptions.maxZoomLevel = 'month';
            break;
        case 2:
            if (isSingleDate) {
                itemReportDateFrom.label.text = 'Report Month';
                itemReportDateFrom.visible = true;
                itemReportDateTo.visible = false;
            }

            itemReportDateFrom.editorOptions.placeholder = 'mmm-yyyy';
            itemReportDateFrom.editorOptions.formatString = 'MMM-yyyy';
            itemReportDateFrom.editorOptions.maxZoomLevel = 'year';

            itemReportDateTo.editorOptions.placeholder = 'mmm-yyyy';
            itemReportDateTo.editorOptions.formatString = 'MMM-yyyy';
            itemReportDateTo.editorOptions.maxZoomLevel = 'year';
            break;
        case 3:
            itemReportDateFrom.editorOptions.placeholder = 'yyyy';
            itemReportDateFrom.editorOptions.formatString = 'yyyy';
            itemReportDateFrom.editorOptions.maxZoomLevel = 'decade';

            itemReportDateTo.editorOptions.placeholder = 'yyyy';
            itemReportDateTo.editorOptions.formatString = 'yyyy';
            itemReportDateTo.editorOptions.maxZoomLevel = 'decade';
            break;
        case 9:
            itemReportDateFrom.visible = false;
            itemReportDateTo.visible = false;
            break;
    }

    form.repaint();
}

// Common Report Date From value changed event handler.
CommonUtility.reportDateFromValueChanged = function (ctl, form) {
    var period = form.getEditor('ReportPeriod').option('value');
    var reportDateTo = form.getEditor('ReportDateTo');
    var toValue = reportDateTo.option('value');
    if (((ctl.value instanceof Date) && (toValue instanceof Date)) && (ctl.value > toValue)) {
        switch (period) {
            case 1:
                toValue = new Date(ctl.value.getFullYear(), ctl.value.getMonth(), ctl.value.getDate());
                break;
            case 2:
                toValue = new Date(ctl.value.getFullYear(), ctl.value.getMonth() + 1, 0);
                break;
            case 3:
                toValue = new Date(ctl.value.getFullYear() + 1, 0, 0);
                break;
        }

        reportDateTo.option('value', toValue);
    }
}

// Common Report Date To value changed event handler.
CommonUtility.reportDateToValueChanged = function (ctl, form) {
    var period = form.getEditor('ReportPeriod').option('value');
    if (ctl.value) {
        switch (period) {
            case 1:
                break;
            case 2:
                ctl.value = new Date(ctl.value.getFullYear(), ctl.value.getMonth() + 1, 0);
                break;
            case 3:
                ctl.value = new Date(ctl.value.getFullYear() + 1, 0, 0);
                break;
        }
    }

    var reportDateFrom = form.getEditor('ReportDateFrom');
    var fromValue = reportDateFrom.option('value');
    if (((ctl.value instanceof Date) && (fromValue instanceof Date)) && (ctl.value < fromValue)) {
        switch (form.getEditor('ReportPeriod').option('value')) {
            case 1:
                fromValue = new Date(ctl.value.getFullYear(), ctl.value.getMonth(), ctl.value.getDate());
                break;
            case 2:
                fromValue = new Date(ctl.value.getFullYear(), ctl.value.getMonth(), 1);
                break;
            case 3:
                fromValue = new Date(ctl.value.getFullYear(), 0, 1);
                break;
        }

        reportDateFrom.option('value', fromValue);
    }
}


// Create Customer lookup header.
CommonUtility.createCustomerLookupHeader = function (id, element, category1IDCaption, siteID, popupEditForm) {
    var colHeader = element.find('#' + id);
    if (colHeader.length == 0) {
        var lookup = element.dxLookup('instance');
        var list = element.find('.dx-list');
        var lookupList = lookup._$list.dxList('instance');
        var loadingPanelID = id + '_loadingPanel';
        var searchFormID = id + '_form';

        var perFormSearchEvent = function () {
            var form = DXUtility.getDXInstance(null, '#' + searchFormID, 'dxForm');
            var loadingPanel = DXUtility.getDXInstance(null, '#' + loadingPanelID, 'dxLoadPanel');

            var filter = [
                ['IsDeleted', '=', false], 'and',
                ['StatusID', '=', 1], 'and',
                ['SiteID', '=', (siteID) ? siteID : popupEditForm.getEditor('SiteID').option('value')]
            ];

            var filterSearch = [];
            var filterSalesmanID = null;
            var searchValue = form.getEditor('Search').option('value');
            if (searchValue) {
                searchExpr = lookup.option('searchExpr');
                if (Object.prototype.toString.call(searchExpr) != '[object Array]')
                    searchExpr = [searchExpr];

                for (i = 0; i < searchExpr.length; i++) {
                    if (filterSearch.length > 0)
                        filterSearch.push('or');

                    filterSearch.push([searchExpr[i], 'contains', searchValue]);
                }
            }

            searchValue = form.getEditor('SalesmanID').option('value');
            if (searchValue)
                filterSalesmanID = ['SalesmanID', '=', searchValue];

            if (filterSearch.length > 0) {
                filter.push('and');
                filter.push([filterSearch]);
            }

            if (filterSalesmanID != null) {
                filter.push('and');
                filter.push(filterSalesmanID);
            }

            if (filter.length == 0)
                filter = null;

            var listDataSource = lookupList.option('dataSource');

            if (!CommonUtility.compareArray(listDataSource.filter(), filter)) {
                loadingPanel.option('visible', true);

                listDataSource.filter(filter);
                listDataSource.load()
                    .done(function (result) {
                        lookupList.option('dataSource', listDataSource);
                        loadingPanel.option('visible', false);
                    })
                    .fail(function (error) {
                        loadingPanel.option('visible', false);
                    });
            }
        };

        var loadingPanelCtl = $('<div id="' + loadingPanelID + '">').dxLoadPanel({
            position: { of: '#' + list.attr('id') },
            visible: false,
            shading: false,
            closeOnOutsideClick: false
        });

        var searchFormCtl = $('<div class="dx-lookup-search-wrapper">').append(
            $('<div id="' + searchFormID + '">').dxForm({
                colCount: 3,
                showColonAfterLabel: false,
                labelLocation: 'left',
                onEnterKey: perFormSearchEvent,
                items: [{
                    dataField: '',
                    name: 'Search',
                    label: { visible: false },
                    colSpan: 2,
                    editorOptions: {
                        placeholder: lookup.option('searchPlaceholder'),
                        mode: 'search',
                        onEnterKey: perFormSearchEvent
                    }
                }, {
                    dataField: 'SalesmanID',
                    label: { text: 'Salesman' },
                    editorType: 'dxSelectBox',
                    editorOptions: {
                        dataSource: [],
                        displayExpr: 'Salesman',
                        valueExpr: 'ID',
                        searchExpr: ['Code', 'Name'],
                        placeholder: '(All)',
                        searchEnabled: true,
                        showClearButton: true,
                        onEnterKey: perFormSearchEvent
                    }
                }]
            }));

        var div = '<div id="' + id + '" class="dx-datagrid datagrid-columnheader">';
        div += '       <table class="dx-datagrid-headers dx-datagrid-nowrap">';
        div += '           <colgroup>';
        div += '               <col style="width: 300px;">';
        div += '               <col style="width: 400px;">';
        div += '               <col style="width: 200px;">';
        div += '               <col style="width: 180px;">';
        div += '           </colgroup><tbody>';
        div += '           <tr class="dx-row dx-header-row dx-column-lines">';
        div += '               <td class="dx-datagrid-action" style="border-left-style: none !important;">';
        div += 'Customer' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;">';
        div += 'Shipment Address' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;">';
        div += 'Salesman' + '</td>';
        div += '               <td class="dx-datagrid-action" style="text-align: left;">';
        div += HtmlUtility.htmlEncode(category1IDCaption) + '</td>';
        div += '</tr></tbody></table></div>';

        lookup.option('openAction', function (e) {
            alert('Opened');
        });

        lookup.option('onOpened', function (e) {
            var form = DXUtility.getDXInstance(null, '#' + searchFormID, 'dxForm');

            form.getEditor('Search').focus();
            form.getEditor('SalesmanID').option('dataSource',
                DataUtility.GetLookupSalesmanDataSource(['SiteID', '=', siteID]));

            perFormSearchEvent();
        });

        lookup.option('onClosed', function (e) {
            var form = DXUtility.getDXInstance(null, '#' + searchFormID, 'dxForm');

            form.getEditor('Search').option('value', null);
            form.getEditor('SalesmanID').option('value', null);

            lookupList.option('selectedItems', []);
        });

        list.attr('style', 'top: 74px !important');
        list.before(loadingPanelCtl);
        list.before(searchFormCtl);
        list.before($(div));
    }
}

// Create Customer lookup item.
CommonUtility.createCustomerLookupItem = function (data, element) {
    var div = '<div class="dx-datagrid dx-datagrid-rowsview dx-datagrid-nowrap" style="background-color: inherit;">';
    div += '       <table class="dx-datagrid-table dx-datagrid-table-fixed" style="border-collapse: initial !important;">';
    div += '           <colgroup>';
    div += '               <col style="width: 300px;">';
    div += '               <col style="width: 400px;">';
    div += '               <col style="width: 200px;">';
    div += '               <col style="width: 180px;">';
    div += '           </colgroup><tbody>';
    div += '           <tr class="dx-row dx-data-row dx-column-lines">';
    div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.Customer()) + '"';
    div += '                   style="text-align: left; border-left-style: none !important;">';
    div += HtmlUtility.htmlEncode(data.Customer()) + '</td>';
    div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.Address()) + '" style="text-align: left;">';
    div += HtmlUtility.htmlEncode(data.Address()) + '</td>';
    div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.Salesman()) + '" style="text-align: left;">';
    div += HtmlUtility.htmlEncode(data.Salesman()) + '</td>';
    div += '               <td class="dx-datagrid-action" title="' + HtmlUtility.htmlEncode(data.Category1()) + '" style="text-align: left;">';
    div += HtmlUtility.htmlEncode(data.Category1()) + '</td>';
    div += '</tr></tbody></table></div>';

    element.attr('style', 'padding: 0px');

    return div;
}

// ------------------------------------------------------------------------------------------------
// DataUtility: A class for supporting the Data Source control programming.
// ------------------------------------------------------------------------------------------------


// DataUtility class definition.
var DataUtility = {
    // Attributes

    vCountries: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vCountries,
                select: [
                    'ID',
                    'Name'
                ],
                filter: filter,
                sort: 'Name',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vCountryViewModel(item); }
            };
        }
    },
    vSystemLookups: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vSystemLookups,
                select: [
                    'ID',
                    'Name',
                    'Value_Int32',
                    'Value_String',
                    'Group',
                    'SortIndex'
                ],
                filter: filter,
                sort: 'SortIndex',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSystemLookupViewModel(item); }
            };
        }
    },
    vCustomerCategories: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vCustomerCategories,
                select: [
                    'ID',
                    'Category'
                ],
                filter: filter,
                sort: 'Name',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vCustomerCategoryViewModel(item); }
            };
        }
    },
    vDiscountGroups: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vDiscountGroups,
                select: [
                    'ID',
                    'DiscountGroup'
                ],
                filter: filter,
                sort: 'Name',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountGroupViewModel(item); }
            };
        }
    },
    vDiscountStratas: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vDiscountStratas,
                select: [
                    'ID',
                    'DiscountStrata',
                    'ValidDateFrom',
                    'ValidDateTo'
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vDiscountStrataViewModel(item); }
            };
        }
    },
    vTerritories: {
        dataSource: function(filter){
            return {
                store: Dismoyo_Ciptoning_Client.DB.vTerritories,
                select: [
                    'ID',
                    'Territory'                    
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vTerritoryViewModel(item); }
            };
        },
    },
    vRegions: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vRegions,
                select: [
                    'ID',
                    'Region',
                    'TerritoryID'                    
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vRegionViewModel(item); }
            };
        }
    },
    vAreas: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vAreas,
                select: [
                    'ID',
                    'Area',
                    'TerritoryID',
                    'RegionID'
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vAreaViewModel(item); }
            };
        }
    },
    vCompanies: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vCompanies,
                select: [
                    'ID',
                    'Company'
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vCompanyViewModel(item); }
            };
        }
    },
    vSites: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vSites,
                select: [
                    'ID',
                    'Code',
                    'Site',
                    'TerritoryID',
                    'RegionID',
                    'AreaID',
                    'CompanyID',
                    'Company'
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSiteViewModel(item); }
            };
        }
    },
    vWarehouses: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vWarehouses,
                select: [
                    'ID',
                    'Warehouse',
                    'TerritoryID',
                    'RegionID',
                    'AreaID',
                    'CompanyID',
                    'SiteID'                    
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vWarehouseViewModel(item); }
            };
        }
    },
    vSalesmen: {
        dataSource: function (filter) {
            return {
                store: Dismoyo_Ciptoning_Client.DB.vSalesmen,
                select: [
                    'ID',
                    'Salesman',
                    'WarehouseID',
                    'SiteID',
                    'AreaID',
                    'RegionID',
                    'TerritoryID',
                    'CompanyID'
                ],
                filter: filter,
                sort: 'Code',
                map: function (item) { return new Dismoyo_Ciptoning_Client.vSalesmanViewModel(item); }
            };
        }
    },

    // Public Methods

    GetLookupCountryDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vCountries.dataSource(filter));
    },
    GetLookupSalesmanDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vSalesmen.dataSource(filter));
    },
    GetLookupSystemLookupDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vSystemLookups.dataSource(filter));
    },
    GetLookupCustomerCategoryDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vCustomerCategories.dataSource(filter));
    },
    GetLookupTerritoryDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vTerritories.dataSource(filter));
    },
    GetLookupRegionDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vRegions.dataSource(filter));
    },
    GetLookupAreaDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vAreas.dataSource(filter));
    },
    GetLookupCompanyDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vCompanies.dataSource(filter));
    },
    GetLookupSiteDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vSites.dataSource(filter));
    },
    GetLookupWarehouseDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vWarehouses.dataSource(filter));
    },
    GetLookupSalesmanDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vSalesmen.dataSource(filter));
    },
    GetLookupDiscountGroupDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vDiscountGroups.dataSource(filter));
    },    
    GetLookupDiscountStrataDataSource: function (filter) {
        return new DevExpress.data.DataSource(DataUtility.vDiscountStratas.dataSource(filter));
    }

}

// ------------------------------------------------------------------------------------------------
// DateTimeUtility: A class for supporting the DateTime programming.
// ------------------------------------------------------------------------------------------------


// DateTimeUtility class definition.
var DateTimeUtility = function () {
}

// Get minimum date.
DateTimeUtility.minDate = function () {
    return Date.UTC(1900, 1, 1, 0, 0, 0, 0);
}

// Get maximum date.
DateTimeUtility.maxDate = function () {
    return Date.UTC(9999, 12, 31, 23, 59, 59, 999);
}

// Function to convert from UTC date to local date.
DateTimeUtility.convertToLocal = function (utcDate) {
    try {
        //var localDate = moment(utcDate);

        //return moment.toDate();
        //return utcDate;
        return new Date(utcDate.toLocaleString() + " UTC");
    } catch (e) {
        return utcDate;
    }
}

DateTimeUtility.getFormatedDate = function (value) {
    var formattedDate = new Date(value);
    var d = formattedDate.getDate();
    var m = formattedDate.getMonth();
    m += 1;  // JavaScript months are 0-11
    var y = formattedDate.getFullYear();

    return (d + "/" + m + "/" + y);
}

// Function to get first time of day of the specified date.
DateTimeUtility.getFirstTimeOfDay = function (date) {
    var d = new Date(date);
    d.setHours(0, 0, 0, 0);

    return d;
}

// Function to get last time of day of the specified date.
DateTimeUtility.getLastTimeOfDay = function (date) {
    var d = new Date(date);
    d.setHours(23, 59, 59, 999);

    return d;
}

// Function to get first day of month of the specified date.
DateTimeUtility.getFirstDayOfMonth = function (date) {
    return new Date(date.getFullYear(), date.getMonth(), 1);
}

// Function to get last day of month of the specified date.
DateTimeUtility.getLastDayOfMonth = function (date) {
    return DateTimeUtility.getLastTimeOfDay(
        new Date(date.getFullYear(), date.getMonth() + 1, 0));
}

DateTimeUtility.getISODateString = function (date) {
    var day = date.getDate();
    var month = date.getMonth() + 1;
    var year = date.getFullYear();

    return year + '-' + ((month < 10) ? '0' : '') + month + '-' + ((day < 10) ? '0' : '') + day;
}

// ------------------------------------------------------------------------------------------------
// DXUtility: A class for supporting the DevExtreme control programming.
// ------------------------------------------------------------------------------------------------


// DXUtility class definition.
var DXUtility = function () {
}


// Function to retrieve an instance of DevExtreme control.
DXUtility.getDXInstance = function (parent, id, dxType) {
    var instance = null;
    try {
        var ctl = (parent) ? parent.find(id) : $(id);
        instance = ctl[dxType]('instance');
    }
    catch (ex) {
    }

    return instance;
}


// Event handler for fix accordion item title click.
DXUtility.fixAccordionItemTitleClick = function (e) {
    if (e.component.option('selectedIndex') == 0)
        e.component.collapseItem(0);
    else
        e.component.expandItem(0);

    e.jQueryEvent.stopPropagation();
}

// Event handler for fix accordion item click.
DXUtility.fixAccordionItemClick = function (e) {
    e.component.expandItem(0);
    e.jQueryEvent.stopPropagation();
}


// Refresh child items when parent value has changed (will return child zero list if parent value is null).
DXUtility.childSelectBoxCascadeDataSourceRefreshList = function (childSelectBox, childDataSource, parentField, parentValue) {
    childSelectBox.option('value', null);

    childSelectBox.option('dataSource', (parentValue ? childDataSource : []));
    var dataSource = childSelectBox.option('dataSource');
    if (parentValue) {
        dataSource.filter([parentField, '=', parentValue]);
        dataSource.load();
    }
}

// Refresh child items when parent value has changed.
DXUtility.childSelectBoxCascadeRefreshList = function (childSelectBox, parentField, parentValue) {
    childSelectBox.option('value', null);

    var dataSource = childSelectBox.option('dataSource');
    dataSource.filter(parentValue ? [parentField, '=', parentValue] : null);
    dataSource.load();
}

// Get child data grid lookup cascade filter.
DXUtility.getChildDataGridLookupCascadeFilter = function (data, parentField) {
    var filter = null;
    if (data && data[parentField])
        filter = [parentField, '=', DXUtility.getValue(data, parentField)];

    return filter;
}

// Add filter expression by specified group filter.
DXUtility.addGroupFilterExpression = function (filterExpr, groupFiterExpr, groupExpr) {
    if (groupFiterExpr && (groupFiterExpr.length > 0)) {
        if (filterExpr.length > 0)
            filterExpr.push(groupExpr);

        filterExpr.push(groupFiterExpr);
    }
}

// Add filter expression by specified field name, operator, and value.
DXUtility.addFilterExpression = function (filterExpr, fieldName, operator, value, groupExpr) {
    if ((value !== undefined) && (value !== null))
        DXUtility.addNullableFilterExpression(filterExpr, fieldName, operator, value, groupExpr);
}

// Add filter expression by specified field name, operator, and value.
DXUtility.addNullableFilterExpression = function (filterExpr, fieldName, operator, value, groupExpr) {
    if (filterExpr.length > 0)
        filterExpr.push(groupExpr);

    filterExpr.push([fieldName, operator, value]);
}


// Create dxForm item group with caption.
DXUtility.createFormItemGroupWithCaption = function (caption, marginBottom) {
    var style = '';
    if (marginBottom)
        style = ' style="margin-bottom:' + marginBottom + '"';

    var div = $('<div class="dx-form-group-with-caption dx-form-group"' + style + '>');
    if (caption)
        div.append($('<span class="dx-form-group-caption">').append(
            HtmlUtility.htmlEncode(caption)));

    return div;
}

// Create dxForm item group with content.
DXUtility.createFormItemGroupContent = function () {
    return $('<div class="dx-form-group-content">');
}

// Create dxForm item label located on top.
DXUtility.createFormItemLabelTop = function (caption) {
    return $('<label class="dx-field-item-label dx-field-item-label-location-top">').append(
        DXUtility.createFormItemLabelContent(caption));
}

// Create dxForm item label content.
DXUtility.createFormItemLabelContent = function (caption) {
    return $('<span class="dx-field-item-label-content">').append(
        $('<span class="dx-field-item-label-text">').append(
        HtmlUtility.htmlEncode(caption)));
}

// Reset dxForm validation.
DXUtility.resetFormValidation = function (form) {
    $.each(form.element().find('.dx-validator'), function (index, item) {
        $(item).dxValidator('instance').reset();
    });
}

// Get tree view selected items.
DXUtility.getSelectedTreeViewItems = function (items, selectedItems) {
    if (items) {
        for (var i = 0; i < items.length; i++) {
            if (items[i].selected)
                selectedItems.push(items[i]);

            DXUtility.getSelectedTreeViewItems(items[i].items, selectedItems);
        }
    }
}

// Set tree view selected items.
DXUtility.setSelectedTreeViewItems = function (items, selectedItems) {
    if (items) {
        for (var i = 0; i < items.length; i++) {
            var item = $.grep(selectedItems, function (e) {
                return (e.key == items[i].key);
            });

            items[i].selected = (item.length > 0) ? true : false;
            DXUtility.setSelectedTreeViewItems(items[i].items, selectedItems);
        }
    }
}



// Get value from property (direct or function (observable)).
DXUtility.getValue = function (obj, propertyName) {
    if ((obj[propertyName] != undefined) && (obj[propertyName] != null))
        return (typeof (obj[propertyName]) == 'function') ? obj[propertyName]() : obj[propertyName];

    return undefined;
}

// Set value to property (direct or function (observable)).
DXUtility.setValue = function (obj, propertyName, value) {
    if ((obj[propertyName] != undefined) && (obj[propertyName] != null) && (typeof (obj[propertyName]) == 'function')) {
        obj[propertyName](value);
        return;
    }

    obj[propertyName] = value;
}

// Select all text on input element.
DXUtility.selectAllText = function (element, dxType) {
    switch (dxType) {
        case 'dxTextBox':
            element.find('.dx-texteditor-input').select();
            break;
    }
}

DXUtility.preventInputCharacters = function (e) {
    if ((e.jQueryEvent.keyCode >= 48) && (e.jQueryEvent.keyCode <= 57)) {
        // do nothing
    } else if (e.jQueryEvent.keyCode != 8 && e.jQueryEvent.keyCode != 46 && e.jQueryEvent.keyCode != 13 && e.jQueryEvent.keyCode != 9) {
        e.jQueryEvent.preventDefault();
    }
}

DXUtility.deleteSelectedRows = function (dataGrid,parentGrid) {
    var dataSource = dataGrid.option('dataSource');
    var selectedKeys = dataGrid.getSelectedRowKeys();

    for (var i = 0; i < selectedKeys.length; i++) {
        dataSource.store().remove(selectedKeys[i])
            .done(function (result) {
                if (i >= (selectedKeys.length - 1))
                    dataSource.load().done(function (result) {
                        dataGrid.refresh();
                        if (parentGrid)
                            parentGrid.dataGrid().refresh();
                    });
            })
            .fail(function (error) {
                if (i >= (selectedKeys.length - 1))
                    dataSource.load().done(function (result) {
                        dataGrid.refresh();
                        if (parentGrid)
                            parentGrid.dataGrid().refresh();
                    });
            });
    }
}

// ------------------------------------------------------------------------------------------------
// HtmlUtility: A class for supporting the Html programming.
// ------------------------------------------------------------------------------------------------


// HtmlUtility class definition.
var HtmlUtility = function () {
}


// Dynamic load scripts.
HtmlUtility.loadScriptFile = function (fileName, filetype) {
    var scripts = document.getElementsByTagName('script');
    for (var i = scripts.length - 1; i >= 0; i--) {
        if (scripts[i].src.indexOf(fileName) >= 0)
            return;
    }

    var fileref = undefined;

    switch (filetype) {
        case 'js':
            fileref = document.createElement('script');
            fileref.setAttribute('type', 'text/javascript');
            fileref.setAttribute('src', fileName);
            break;
        case 'css':
            fileref = document.createElement('link');
            fileref.setAttribute('rel', 'stylesheet');
            fileref.setAttribute('type', 'text/css');
            fileref.setAttribute('href', fileName);
            break;
    }

    if (typeof fileref != undefined)
        document.getElementsByTagName('head')[0].appendChild(fileref)
}

// Function to encode string to html.
HtmlUtility.htmlEncode = function (value) {
    return $('<div/>').text(value).html()
        .replace(new RegExp('"', 'g'), '&quot;')
        .replace(new RegExp('\'', 'g'), '&#39;');
}

// Function to decode html to string.
HtmlUtility.htmlDecode = function (value) {
    return $('<div/>').html(value).text()
        .replace(new RegExp('&quot;', 'g'), '"')
        .replace(new RegExp('&#39;', 'g'), '\'');
}