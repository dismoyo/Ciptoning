<%--
-------------------------------------------------------------------------------------------------------
Name:           TableGenerator
Author:         Didik Ismoyo
Created date:   2016-02-28
Description:    Create CSharp code from a database table.
-------------------------------------------------------------------------------------------------------
--%>

<%@ Template Language="C#" Src="BaseTemplate.cst.cs" Inherits="Generator.BaseTemplate" TargetLanguage="C#" Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="RootNamespace" Default="AIO.IDOS2" Type="System.String" Description="Root Namespace of the code (Company_Name.Product_Name)." %>
<%@ Property Name="BaseNamespace" Default="ISID.Data" Type="System.String" Description="Base Namespace of the code (Developer_Name.Data)." %>

<%@ Register Template="CSharp\TableData\TableIDataProvider.cst" Name="TableIDataProvider" MergeProperties="False" %>
<%@ Register Template="CSharp\TableData\TableIData.cst" Name="TableIData" MergeProperties="False" %>
<%@ Register Template="CSharp\TableData\TableData.cst" Name="TableData" MergeProperties="False" %>
<%@ Register Template="CSharp\TableData.LinqToEntity\TableDataProvider.cst" Name="TableDataProvider" MergeProperties="False" %>
<%@ Register Template="CSharp\TableData.LinqToEntity\TableDataEntityTypeConfig.cst" Name="TableDataEntityTypeConfig" MergeProperties="False" %>

<%@ Register Template="EditableCSharp\TableData\EditableTableIDataProvider.cst" Name="EditableTableIDataProvider" MergeProperties="False" %>
<%@ Register Template="EditableCSharp\TableData.LinqToEntity\EditableTableDataProvider.cst" Name="EditableTableDataProvider" MergeProperties="False" %>

<%
Response.WriteLine("Generating " + SourceTable.Name + " table...");

GenerateTableData(SourceTable);
GenerateTableDataLinqToEntity(SourceTable);

GenerateEditableTableData(SourceTable);
GenerateEditableTableDataLinqToEntity(SourceTable);

Response.WriteLine("\nDone\n");
Response.WriteLine("Files is generated inside " + CodeTemplateInfo.DirectoryName + @"Generated Files\");
%>

<script runat="template">
private string Namespace { get { return RootNamespace + ".Data"; } }

public void GenerateTableData(TableSchema table)
{
    string path = @"Generated Files\AutoGenerated\" + RootNamespace + @".Data\" + table.Name + @"\Generated";
    Directory.CreateDirectory(path);
    
    // Create IDataProvider
    TableIDataProvider tableIDataProvider = new TableIDataProvider();
    tableIDataProvider.TableName = table.Name;
    tableIDataProvider.Namespace = Namespace;
    
    tableIDataProvider.RenderToFile(path + @"\I" + table.Name + "DataProvider.generated.cs", true);
    Response.WriteLine("\nGenerate I" + table.Name + "DataProvider.generated.cs succeed..");
    
    // Create IData
    TableIData tableIData = new TableIData();
    tableIData.SourceTable = SourceTable;
    tableIData.Namespace = Namespace;
    
    tableIData.RenderToFile(path + @"\I" + table.Name + ".generated.cs", true);
    Response.WriteLine("Generate I" + table.Name + ".generated.cs succeed..");
   
    // Create Data
    TableData tableData = new TableData();
    tableData.SourceTable = SourceTable;
    tableData.Namespace = Namespace;
    
    tableData.RenderToFile(path + @"\" + table.Name + ".generated.cs", true);
    Response.WriteLine("Generate " + table.Name + ".generated.cs succeed..");
}

public void GenerateTableDataLinqToEntity(TableSchema table)
{
    string path = @"Generated Files\AutoGenerated\" + RootNamespace + @".Data.LinqToEntity\" + table.Name + @"\Generated";
    Directory.CreateDirectory(path);
    
    // Create DataProvider
    TableDataProvider tableDataProvider = new TableDataProvider();
    tableDataProvider.TableName = table.Name;
    tableDataProvider.Namespace = Namespace;
    
    tableDataProvider.RenderToFile(path + @"\" + table.Name + "DataProvider.generated.cs", true);
    Response.WriteLine("\nGenerate " + table.Name + "DataProvider.generated.cs succeed..");
    
    // Create DataEntityTypeConfig
    TableDataEntityTypeConfig tableDataEntityTypeConfig = new TableDataEntityTypeConfig();
    tableDataEntityTypeConfig.TableName = table.Name;
    tableDataEntityTypeConfig.Namespace = Namespace;
    
    tableDataEntityTypeConfig.RenderToFile(path + @"\" + table.Name + "EntityTypeConfig.generated.cs", true);
    Response.WriteLine("Generate " + table.Name + "EntityTypeConfig.generated.cs succeed..");
}


public void GenerateEditableTableData(TableSchema table)
{
    string path = @"Generated Files\Editable\" + RootNamespace + @".Data\" + table.Name;
    Directory.CreateDirectory(path);
    
    // Create IDataProvider
    EditableTableIDataProvider editableTableIDataProvider = new EditableTableIDataProvider();
    editableTableIDataProvider.TableName = table.Name;
    editableTableIDataProvider.Namespace = Namespace;
    editableTableIDataProvider.BaseNamespace = BaseNamespace;
    
    editableTableIDataProvider.RenderToFile(path + @"\I" + table.Name + "DataProvider.cs", true);
    Response.WriteLine("\nGenerate I" + table.Name + "DataProvider.cs succeed..");
}

public void GenerateEditableTableDataLinqToEntity(TableSchema table)
{
    string path = @"Generated Files\Editable\" + RootNamespace + @".Data.LinqToEntity\" + table.Name;
    Directory.CreateDirectory(path);
    
    // Create DataProvider
    EditableTableDataProvider editableTableDataProvider = new EditableTableDataProvider();
    editableTableDataProvider.TableName = table.Name;
    editableTableDataProvider.Namespace = Namespace;
    editableTableDataProvider.BaseNamespace = BaseNamespace;
    
    editableTableDataProvider.RenderToFile(path + @"\" + table.Name + "DataProvider.cs", true);
    Response.WriteLine("\nGenerate " + table.Name + "DataProvider.cs succeed..");
}

</script>
