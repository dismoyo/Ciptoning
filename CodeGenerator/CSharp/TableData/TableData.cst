<%@ Template Language="C#" Src="..\..\BaseTemplate.cst.cs" Inherits="Generator.BaseTemplate" TargetLanguage="C#" Description="Create a class from database table." %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Namespace" Type="System.String" Description="Namespace of the object." %>

<% %>
// ===================================================================================
// Author        : System
// Created date  : <%= DateAndTime.Now.ToString("dd MMM yyyy HH:mm:ss") %>
// Description   : <%= SourceTable.Name %> partial class.
//
// NOTE: This file is generated by system. Please do not modify this file.
//       Consider regenerate or modify through partial class. If required,
//       a partial class should be created as '<%= SourceTable.Name %>.cs'
//       up to one level of this file location inside '<%= SourceTable.Name %>' folder.
// ===================================================================================

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace <%= Namespace %>
{

    [Table("<%= SourceTable.Name %>")]
    public partial class <%= SourceTable.Name %> : I<%= SourceTable.Name %>
    {                
        
        #region Implements I<%= SourceTable.Name %>

<%
    int keyCount = 0;
    foreach(ColumnSchema c in SourceTable.Columns)   
    {
        if(c.IsPrimaryKeyMember)
            keyCount++;
    }

    int i = 0;    
    foreach(ColumnSchema c in SourceTable.Columns)   
    {
        if(c.IsPrimaryKeyMember)
        {
            if (keyCount > 1)
            {
%>
        [Key, Column(Order = <%= i.ToString() %>)]
<%
                i++;
            }
            else
            {
%>
        [Key]
<%
            }
            
            if ((bool)c.ExtendedProperties["CS_IsIdentity"].Value)
            {
%>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
<%
            } else if ((c.SystemType == typeof(int)) || (c.SystemType == typeof(uint)) ||
                (c.SystemType == typeof(short)) || (c.SystemType == typeof(ushort)) ||
                (c.SystemType == typeof(long)) || (c.SystemType == typeof(ulong)) ||
                (c.SystemType == typeof(byte)) || (c.SystemType == typeof(bool)))
            {
%>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
<%
            }
        }
%>
        public <%= GetSystemTypeString(c.SystemType.FullName, c.AllowDBNull) %> <%= c.Name %> { get; set; }
            
<%
    }
%>
        #endregion

    }

}
