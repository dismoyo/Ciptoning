<%@ Template Language="C#" Src="..\..\BaseTemplate.cst.cs" Inherits="Generator.BaseTemplate" TargetLanguage="C#" Description="Create a class from database view." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data.Entity.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data.Entity.Design.PluralizationServices" %>
<%@ Import Namespace="System.Globalization" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Context" Description="View that the object is based on." %>
<%@ Property Name="Namespace" Type="System.String" Description="Namespace of the object." %>
<%@ Property Name="DataNamespace" Type="System.String" Description="Data namespace of the object." %>

<%
var pluralizationService = PluralizationService.CreateService(CultureInfo.GetCultureInfo(1033));
string serviceName = pluralizationService.Pluralize(SourceView.Name);
%>
// ===================================================================================
// Author        : System
// Created date  : <%= DateAndTime.Now.ToString("dd MMM yyyy HH:mm:ss") %>
// Description   : DataService partial class.
//
//
// Modified date :
// Modified by   :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using <%= DataNamespace %>;
using System;
using System.Data.Services;
using System.Data.Services.Providers;
using System.Linq.Expressions;

namespace <%= Namespace %>
{

    public partial class DataService : EntityFrameworkDataService<StoreFunctionsDataContext>, IServiceProvider
    {

        #region Methods

        [QueryInterceptor("<%= serviceName %>")]
        public Expression<Func<<%= SourceView.Name %>, bool>> OnQuery<%= serviceName %>()
        {
            return (p => !p.IsDeleted);
        }

        [ChangeInterceptor("<%= serviceName %>")]
        public void OnChange<%= serviceName %>(<%= SourceView.Name %> data, UpdateOperations operations)
        {
            var dataProvider = DataConfiguration.GetDefaultDataProvider<I<%= SourceView.Name %>DataProvider>();

            switch (operations)
            {
                case UpdateOperations.Add:
                    dataProvider.InsertData(data);
                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Change:
                    dataProvider.UpdateData(data);
                    operations = UpdateOperations.None;
                    break;
                case UpdateOperations.Delete:
                    dataProvider.DeleteData(data);
                    operations = UpdateOperations.None;
                    break;
            }

            if (operations == UpdateOperations.None)
                CancelChanges();
        }

        #endregion

    }

}
