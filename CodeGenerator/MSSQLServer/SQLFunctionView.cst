<%@ Template Language="C#" Src="..\BaseTemplate.cst.cs" Inherits="Generator.BaseTemplate" TargetLanguage="SQL" Description="Create SQL Function & View script from database table." %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Drawing.Design" %>
<%@ Import Namespace="System.Linq" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="DatabaseName" Type="System.String" Description="Database name that the object is based on." %>
<%@ Property Name="ExcludedParamColumns" Type="System.String" Default="CreatedDate;CreatedByUserID;ModifiedDate;ModifiedByUserID" Optional="True" Description="Specify columns to be excluded as parameter." %>

<script runat="template">
public class ForeignKey
{
    
    public ForeignKey(string key, string value)
    {        
        string[] temp;
        string[] temp2;
        
        RefColumnName = key;
        temp = value.Split(new char[] { '=' }, StringSplitOptions.RemoveEmptyEntries);
                        
        temp2 = temp[0].Split(new char[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
        TableName = temp2[0];
        TableAlias = temp2[1];
        RelationType = temp2[2];
        
        Columns = new List<string>();
        temp2 = temp[1].Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (string s in temp2)
            Columns.Add(s);
    }
    
    public string RefColumnName { get; private set; }
    public string TableName { get; private set; }
    public string TableAlias { get; private set; }
    public string RelationType { get; private set; }
    public List<string> Columns { get; private set; }
    
}

private string _virtualForeignKeyAttributesMapFile = @"..\CustomMaps\VirtualForeignKeyAttributes.csmap";

[Editor(typeof(FileNameEditor), typeof(UITypeEditor)),
    FileDialog(FileDialogType.Open, Title = "Select Map File", Filter = "CodeSmith Map (*.csmap)|*.csmap"),
    Description("Specify map file where contains columns to be treated as foreign key.")]
public string VirtualForeignKeyAttributesMapFile
{
      get { return _virtualForeignKeyAttributesMapFile; }
      set { _virtualForeignKeyAttributesMapFile = value;}
}

public void DeepForeignKeyTableName(List<string> foreignKeyTableNames, TableKeySchema tableKey)
{
    foreignKeyTableNames.Add(tableKey.ForeignKeyMemberColumns[0].Name);
    foreach (var tk in tableKey.PrimaryKeyTable.ForeignKeys)
        DeepForeignKeyTableName(foreignKeyTableNames, tk);
}
</script>

<%
string[] excludedParamColumns = (ExcludedParamColumns ?? "").Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

var virtualForeignKeyMap = Map.Load(VirtualForeignKeyAttributesMapFile); 
var virtualForeignKeys = new List<ForeignKey>();

foreach (var v in virtualForeignKeyMap)
    virtualForeignKeys.Add(new ForeignKey(v.Key, v.Value));

var tableAliases = new Dictionary<string, string[]>();
var foreignKeyTableNames = new Dictionary<string, List<string>>();

AddTableAliasAbbreviation(tableAliases, "-", SourceTable.FullName);
foreach (var tableKey in SourceTable.ForeignKeys)
{
    AddTableAliasAbbreviation(tableAliases, tableKey.ForeignKeyMemberColumns[0].Name, tableKey.PrimaryKeyTable.FullName);

    var list = new List<string>();
    DeepForeignKeyTableName(list, tableKey);    
    foreignKeyTableNames.Add(tableKey.ForeignKeyMemberColumns[0].Name, list);
}

int codeName;
int i;
int j;
%>

USE [<%= DatabaseName %>];
GO

SET ANSI_NULLS ON;
GO

SET QUOTED_IDENTIFIER ON;
GO

IF EXISTS(SELECT * FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[<%= SourceTable.Owner %>].[f<%= SourceTable.Name %>]') AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT'))
    DROP FUNCTION [<%= SourceTable.Owner %>].[f<%= SourceTable.Name %>];
GO

-- ===================================================================================
-- Author        : System
-- Created date  : <%= DateAndTime.Now.ToString("dd MMM yyyy HH:mm:ss") %>
-- Description   : Provide function to retrieve [<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] data.
--
-- NOTE: This Function is initially generated by system and can be modified following
--       the requirement.
-- ===================================================================================

CREATE FUNCTION [<%= SourceTable.Owner %>].[f<%= SourceTable.Name %>]
(
    <%
    i = 0;
    foreach (ColumnSchema c in SourceTable.Columns)
    {
        if (!excludedParamColumns.Contains(c.Name))
        {
            if (tableAliases.Keys.Contains(c.Name))
            {
                j = 0;
                foreach (var s in foreignKeyTableNames[c.Name])
                {            
                    string colAlias = s.Replace("ID", "");
%>
    @<%= colAlias %>ID int,
    @<%= colAlias %>Code nvarchar(10),
    @<%= colAlias %>Name nvarchar(50)<%= (i < SourceTable.Columns.Count - 1) || (j < foreignKeyTableNames.Count - 1) ? "," : ""  %>
<%
                }
            }
            else
            {
%>
    @<%= c.Name %> <%= GetDbTypeString(c) %><%= (i < SourceTable.Columns.Count - 1) ? "," : "" %>
<%
            }
        }
        i++;
    }
%>
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT
			<%
    codeName = 0;
    i = 0;
    foreach (ColumnSchema c in SourceTable.Columns)
    {
        ForeignKey fk = virtualForeignKeys.SingleOrDefault(p => p.RefColumnName == c.Name);
        if (fk != null)
        {
            j = 0;
            foreach (var col in fk.Columns)
            {
                string colName = col;
                string[] colAttr = col.Split(':');
                if (colAttr.Length > 1)
                    colName = colAttr[0] + " " + colAttr[1];
%>
            <%= fk.TableAlias %>.<%= colName %><%= (i < SourceTable.Columns.Count - 1) || (j < fk.Columns.Count - 1) ? "," : "" %>
<%
                j++;
            }
        }
        else if (tableAliases.Keys.Contains(c.Name))
        {
            string tableAlias = tableAliases[c.Name][1];
            j = 0;
            foreach (var s in foreignKeyTableNames[c.Name])
            {
                string colAlias = s.Replace("ID", "");
                string colName = (s == c.Name) ? "" : colAlias;
%>
            [f<%= tableAlias %>].[<%= colName %>ID] [<%= colAlias %>ID],
            [f<%= tableAlias %>].[<%= colName %>Code] [<%= colAlias %>Code],
            [f<%= tableAlias %>].[<%= colName %>Name] [<%= colAlias %>Name],
            [f<%= tableAlias %>].[<%= colAlias %>]<%= (i < SourceTable.Columns.Count - 1) || (j < foreignKeyTableNames.Count - 1) ? "," : "" %>
<%
            }
        }
        else
        {
            if ((c.Name == "Code") || (c.Name == "Name"))
                codeName++;
%>
            [<%= tableAliases["-"][1] %>].[<%= c.Name %>]<%= (i < SourceTable.Columns.Count - 1) ? "," : "" %>
<%
            if (codeName == 2)
            {
%>
            [dbo].[fCodeNameFormatter]([<%= tableAliases["-"][1] %>].[Code], [<%= tableAliases["-"][1] %>].[Name]) [<%= SourceTable.Name %>]<%= (i < SourceTable.Columns.Count - 1) ? "," : "" %>
<%
            codeName = 0;
            }
        }
        i++;
    }
%>
        FROM
			[<%= SourceTable.Owner %>].[<%= SourceTable.Name %>] [<%= tableAliases["-"][1] %>]<%
    foreach (var ta in tableAliases)
    {
        if (ta.Key == "-")
            continue;
%> LEFT OUTER JOIN
            [dbo].[f<%= ta.Key.Replace("ID", "") %>]
            (
<%
        j = 0;
        foreach (var s in foreignKeyTableNames[ta.Key])
        {
            string colAlias = s.Replace("ID", "");
            string colName = (s == ta.Key) ? "" : colAlias;
%>
                @<%= colAlias %>ID,
                @<%= colAlias %>Code,
                @<%= colAlias %>Name,
<%
        }
%>
                NULL
            ) [f<%= ta.Value[1] %>] ON ([<%= tableAliases["-"][1] %>].[<%= ta.Key %>] = [f<%= ta.Value[1] %>].[ID])<%
    }

    j = 0;
    foreach (var fk in virtualForeignKeys)
    {
%> <%= fk.RelationType %>
            <%= fk.TableName %> <%= fk.TableAlias %> ON ([<%= tableAliases["-"][1] %>].[<%= fk.RefColumnName %>] = <%= fk.TableAlias %>.[ID])<%
        j++;
    }
%>
		WHERE
<%
    i = 0;
    foreach (ColumnSchema c in SourceTable.Columns)
    {
        if (!excludedParamColumns.Contains(c.Name) && !tableAliases.Keys.Contains(c.Name))
        {
            if ((c.SystemType == typeof(String)) && !c.IsPrimaryKeyMember)
            {
%>
            ((@<%= c.Name %> IS NULL) OR ([<%= tableAliases["-"][1] %>].[<%= c.Name %>] LIKE '%' + @<%= c.Name %> + '%'))<%= (i < SourceTable.Columns.Count - 1) ? " AND" : "" %>
<%
            } else
            {
%>
            ((@<%= c.Name %> IS NULL) OR ([<%= tableAliases["-"][1] %>].[<%= c.Name %>] = @<%= c.Name %>))<%= (i < SourceTable.Columns.Count - 1) ? " AND" : "" %>
<%
            }
        }
        i++;
    }
%>
);
GO



IF EXISTS(SELECT * FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[<%= SourceTable.Owner %>].[v<%= SourceTable.Name %>]') AND type IN ( N'V' ))
    DROP VIEW [<%= SourceTable.Owner %>].[v<%= SourceTable.Name %>];
GO

-- ===================================================================================
-- Author        : System
-- Created date  : <%= DateAndTime.Now.ToString("dd MMM yyyy HH:mm:ss") %>
-- Description   : Provide view (model) to retrieve [<%= SourceTable.Owner %>].[f<%= SourceTable.Name %>] data.
--
-- NOTE: This View is initially generated by system and can be modified following
--       the requirement.
-- ===================================================================================

CREATE VIEW [<%= SourceTable.Owner %>].[v<%= SourceTable.Name %>]
AS
(
    SELECT
	    <%
    codeName = 0;
    i = 0;
    foreach (ColumnSchema c in SourceTable.Columns)
    {
        ForeignKey fk = virtualForeignKeys.SingleOrDefault(p => p.RefColumnName == c.Name);
        if (fk != null)
        {
            j = 0;
            foreach (var col in fk.Columns)
            {
                string colName = col;
                string[] colAttr = col.Split(':');
                if (colAttr.Length > 1)
                    colName = colAttr[1];
%>
            <%= colName %><%= (i < SourceTable.Columns.Count - 1) || (j < fk.Columns.Count - 1) ? "," : "" %>
<%
                j++;
            }
        }
        else if (tableAliases.Keys.Contains(c.Name))
        {
            string tableAlias = tableAliases[c.Name][1];
            j = 0;
            foreach (var s in foreignKeyTableNames[c.Name])
            {
                string colAlias = s.Replace("ID", "");
%>
            [<%= colAlias %>ID],
            [<%= colAlias %>Code],
            [<%= colAlias %>Name],
            [<%= colAlias %>]<%= (i < SourceTable.Columns.Count - 1) || (j < foreignKeyTableNames.Count - 1) ? "," : "" %>
<%
            }
        }
        else
        {
            if ((c.Name == "Code") || (c.Name == "Name"))
                codeName++;
%>
            [<%= c.Name %>]<%= (i < SourceTable.Columns.Count - 1) ? "," : "" %>
<%
            if (codeName == 2)
            {
%>
            [<%= SourceTable.Name %>]<%= (i < SourceTable.Columns.Count - 1) ? "," : "" %>
<%
            codeName = 0;
            }
        }
        i++;
    }
%>
        FROM
			[<%= SourceTable.Owner %>].[f<%= SourceTable.Name %>]
            (
<%
    i = 0;
    foreach (ColumnSchema c in SourceTable.Columns)
    {
        if (!excludedParamColumns.Contains(c.Name))
        {
            if (tableAliases.Keys.Contains(c.Name))
            {
                j = 0;
                foreach (var s in foreignKeyTableNames[c.Name])
                {
%>
                NULL,
                NULL,
                NULL<%= (i < SourceTable.Columns.Count - 1) || (j < foreignKeyTableNames.Count - 1) ? "," : ""  %>
<%
                }
            }
            else
            {
%>
                NULL<%= (i < SourceTable.Columns.Count - 1) ? "," : "" %>
<%
            }
        }
        i++;
    }
%>
            )
);
GO
