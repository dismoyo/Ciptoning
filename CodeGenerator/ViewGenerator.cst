<%--
-------------------------------------------------------------------------------------------------------
Name:           ViewGenerator
Author:         Didik Ismoyo
Created date:   2016-02-28
Description:    Create CSharp code from a database view.
-------------------------------------------------------------------------------------------------------
--%>

<%@ Template Language="C#" Src="BaseTemplate.cst.cs" Inherits="Generator.BaseTemplate" TargetLanguage="C#" Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data.Entity.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Data.Entity.Design.PluralizationServices" %>
<%@ Import Namespace="System.Globalization" %>

<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Context" Description="View that the object is based on." %>
<%@ Property Name="RootNamespace" Default="AIO.IDOS2" Type="System.String" Description="Root Namespace of the code (Company_Name.Product_Name)." %>

<%@ Register Template="CSharp\ViewData\ViewIDataProvider.cst" Name="ViewIDataProvider" MergeProperties="False" %>
<%@ Register Template="CSharp\ViewData\ViewIData.cst" Name="ViewIData" MergeProperties="False" %>
<%@ Register Template="CSharp\ViewData\ViewData.cst" Name="ViewData" MergeProperties="False" %>
<%@ Register Template="CSharp\ViewData.LinqToEntity\ViewDataProvider.cst" Name="ViewDataProvider" MergeProperties="False" %>
<%@ Register Template="CSharp\ViewData.LinqToEntity\ViewDataEntityTypeConfig.cst" Name="ViewDataEntityTypeConfig" MergeProperties="False" %>

<%@ Register Template="EditableCSharp\DataService\EditableDataService.svc.cst" Name="DataServiceSvc" MergeProperties="False" %>
<%@ Register Template="EditableCSharp\ViewData.LinqToEntity\EditableViewDataProvider.cst" Name="EditableViewDataProvider" MergeProperties="False" %>

<%
Response.WriteLine("Generating " + SourceView.Name + " view...");

GenerateViewData(SourceView);
GenerateViewDataLinqToEntity(SourceView);
GenerateViewDataService(SourceView);

GenerateEditableViewDataLinqToEntity(SourceView);

Response.WriteLine("\nDone\n");
Response.WriteLine("Files is generated inside " + CodeTemplateInfo.DirectoryName + @"Generated Files\");
%>

<script runat="template">
private PluralizationService pluralizationService = PluralizationService.CreateService(CultureInfo.GetCultureInfo(1033));

private string Namespace { get { return RootNamespace + ".Data"; } }
private string ServicesNamespace { get { return RootNamespace + ".Web.Services"; } }
private string ServiceName { get { return pluralizationService.Pluralize(SourceView.Name); } }

public void GenerateViewData(ViewSchema view)
{
    string path = @"Generated Files\AutoGenerated\" + RootNamespace + @".Data\" + view.Name + @"\Generated";
    Directory.CreateDirectory(path);
    
    // Create IDataProvider
    ViewIDataProvider viewIDataProvider = new ViewIDataProvider();
    viewIDataProvider.ViewName = view.Name;
    viewIDataProvider.Namespace = Namespace;
    
    viewIDataProvider.RenderToFile(path + @"\I" + view.Name + "DataProvider.generated.cs", true);
    Response.WriteLine("\nGenerate I" + view.Name + "DataProvider.generated.cs succeed..");
    
    // Create IData
    ViewIData viewIData = new ViewIData();
    viewIData.SourceView = view;
    viewIData.Namespace = Namespace;
    
    viewIData.RenderToFile(path + @"\I" + view.Name + ".generated.cs", true);
    Response.WriteLine("Generate I" + view.Name + ".generated.cs succeed..");
    
    // Create Data
    ViewData viewData = new ViewData();
    viewData.SourceView = view;
    viewData.Namespace = Namespace;
    
    viewData.RenderToFile(path + @"\" + view.Name + ".generated.cs", true);
    Response.WriteLine("Generate " + view.Name + ".generated.cs succeed..");
}

public void GenerateViewDataLinqToEntity(ViewSchema view)
{
    string path = @"Generated Files\AutoGenerated\" + RootNamespace + @".Data.LinqToEntity\" + view.Name + @"\Generated";
    Directory.CreateDirectory(path);
    
    // Create DataProvider
    ViewDataProvider viewDataProvider = new ViewDataProvider();
    viewDataProvider.ViewName = view.Name;
    viewDataProvider.Namespace = Namespace;
    
    viewDataProvider.RenderToFile(path + @"\" + view.Name + "DataProvider.generated.cs", true);
    Response.WriteLine("\nGenerate " + view.Name + "DataProvider.generated.cs succeed..");
    
    // Create DataEntityTypeConfig
    ViewDataEntityTypeConfig viewDataEntityTypeConfig = new ViewDataEntityTypeConfig();
    viewDataEntityTypeConfig.ViewName = view.Name;
    viewDataEntityTypeConfig.Namespace = Namespace;
    
    viewDataEntityTypeConfig.RenderToFile(path + @"\" + view.Name + "EntityTypeConfig.generated.cs", true);
    Response.WriteLine("Generate " + view.Name + "EntityTypeConfig.generated.cs succeed..");
}

public void GenerateViewDataService(ViewSchema view)
{
    string path = @"Generated Files\Editable\" + RootNamespace + @".Web.Services\DataService";
    Directory.CreateDirectory(path);
    
    // Create DataServiceSvc
    DataServiceSvc dataServiceSvc = new DataServiceSvc();
    dataServiceSvc.SourceView = view;
    dataServiceSvc.DataNamespace = Namespace;
    dataServiceSvc.Namespace = ServicesNamespace;
        
    dataServiceSvc.RenderToFile(path + @"\DataService.svc." + ServiceName + ".cs", true);
    Response.WriteLine("\nGenerate DataService.svc." + ServiceName + ".cs succeed..");
}


public void GenerateEditableViewDataLinqToEntity(ViewSchema view)
{
    string path = @"Generated Files\Editable\" + RootNamespace + @".Data.LinqToEntity\" + view.Name;
    Directory.CreateDirectory(path);
    
    // Create DataProvider
    EditableViewDataProvider editableViewDataProvider = new EditableViewDataProvider();
    editableViewDataProvider.TableName = view.Name.Substring(1);
    editableViewDataProvider.ViewName = view.Name;
    editableViewDataProvider.Namespace = Namespace;
    
    editableViewDataProvider.RenderToFile(path + @"\" + view.Name + "DataProvider.cs", true);
    Response.WriteLine("\nGenerate " + view.Name + "DataProvider.cs succeed..");
}

</script>
